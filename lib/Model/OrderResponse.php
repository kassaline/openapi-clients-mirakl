<?php
/**
 * OrderResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Connect APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * OrderResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'billingInfo' => '\OpenAPI\Client\Mirakl\Model\BillingInfo',
        'channelOrderId' => 'string',
        'channelUpdatedAt' => '\DateTime',
        'createdAt' => '\DateTime',
        'customAttributes' => '\OpenAPI\Client\Mirakl\Model\CustomAttributeResponse[]',
        'fulfillment' => '\OpenAPI\Client\Mirakl\Model\Fulfillment',
        'id' => 'string',
        'orderLines' => '\OpenAPI\Client\Mirakl\Model\OrderLineResponse[]',
        'origin' => '\OpenAPI\Client\Mirakl\Model\Origin',
        'shippingInfo' => '\OpenAPI\Client\Mirakl\Model\ShippingInfo',
        'status' => 'string',
        'statusReason' => 'string',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'billingInfo' => null,
        'channelOrderId' => null,
        'channelUpdatedAt' => 'date-time',
        'createdAt' => 'date-time',
        'customAttributes' => null,
        'fulfillment' => null,
        'id' => null,
        'orderLines' => null,
        'origin' => null,
        'shippingInfo' => null,
        'status' => null,
        'statusReason' => null,
        'updatedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'billingInfo' => false,
        'channelOrderId' => false,
        'channelUpdatedAt' => false,
        'createdAt' => false,
        'customAttributes' => false,
        'fulfillment' => false,
        'id' => false,
        'orderLines' => false,
        'origin' => false,
        'shippingInfo' => false,
        'status' => false,
        'statusReason' => false,
        'updatedAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billingInfo' => 'billing_info',
        'channelOrderId' => 'channel_order_id',
        'channelUpdatedAt' => 'channel_updated_at',
        'createdAt' => 'created_at',
        'customAttributes' => 'custom_attributes',
        'fulfillment' => 'fulfillment',
        'id' => 'id',
        'orderLines' => 'order_lines',
        'origin' => 'origin',
        'shippingInfo' => 'shipping_info',
        'status' => 'status',
        'statusReason' => 'status_reason',
        'updatedAt' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billingInfo' => 'setBillingInfo',
        'channelOrderId' => 'setChannelOrderId',
        'channelUpdatedAt' => 'setChannelUpdatedAt',
        'createdAt' => 'setCreatedAt',
        'customAttributes' => 'setCustomAttributes',
        'fulfillment' => 'setFulfillment',
        'id' => 'setId',
        'orderLines' => 'setOrderLines',
        'origin' => 'setOrigin',
        'shippingInfo' => 'setShippingInfo',
        'status' => 'setStatus',
        'statusReason' => 'setStatusReason',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billingInfo' => 'getBillingInfo',
        'channelOrderId' => 'getChannelOrderId',
        'channelUpdatedAt' => 'getChannelUpdatedAt',
        'createdAt' => 'getCreatedAt',
        'customAttributes' => 'getCustomAttributes',
        'fulfillment' => 'getFulfillment',
        'id' => 'getId',
        'orderLines' => 'getOrderLines',
        'origin' => 'getOrigin',
        'shippingInfo' => 'getShippingInfo',
        'status' => 'getStatus',
        'statusReason' => 'getStatusReason',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('billingInfo', $data ?? [], null);
        $this->setIfExists('channelOrderId', $data ?? [], null);
        $this->setIfExists('channelUpdatedAt', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('customAttributes', $data ?? [], null);
        $this->setIfExists('fulfillment', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('orderLines', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('shippingInfo', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('statusReason', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billingInfo
     *
     * @return \OpenAPI\Client\Mirakl\Model\BillingInfo|null
     */
    public function getBillingInfo()
    {
        return $this->container['billingInfo'];
    }

    /**
     * Sets billingInfo
     *
     * @param \OpenAPI\Client\Mirakl\Model\BillingInfo|null $billingInfo billingInfo
     *
     * @return self
     */
    public function setBillingInfo($billingInfo)
    {
        if (is_null($billingInfo)) {
            throw new \InvalidArgumentException('non-nullable billingInfo cannot be null');
        }
        $this->container['billingInfo'] = $billingInfo;

        return $this;
    }

    /**
     * Gets channelOrderId
     *
     * @return string|null
     */
    public function getChannelOrderId()
    {
        return $this->container['channelOrderId'];
    }

    /**
     * Sets channelOrderId
     *
     * @param string|null $channelOrderId Order identifier on the sales channel. This identifier is not guaranteed to be unique as multiple channels can use the same identifier.
     *
     * @return self
     */
    public function setChannelOrderId($channelOrderId)
    {
        if (is_null($channelOrderId)) {
            throw new \InvalidArgumentException('non-nullable channelOrderId cannot be null');
        }
        $this->container['channelOrderId'] = $channelOrderId;

        return $this;
    }

    /**
     * Gets channelUpdatedAt
     *
     * @return \DateTime|null
     */
    public function getChannelUpdatedAt()
    {
        return $this->container['channelUpdatedAt'];
    }

    /**
     * Sets channelUpdatedAt
     *
     * @param \DateTime|null $channelUpdatedAt Date time the order was last updated on the sales channel (can differ from the modification date time in Connect).
     *
     * @return self
     */
    public function setChannelUpdatedAt($channelUpdatedAt)
    {
        if (is_null($channelUpdatedAt)) {
            throw new \InvalidArgumentException('non-nullable channelUpdatedAt cannot be null');
        }
        $this->container['channelUpdatedAt'] = $channelUpdatedAt;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt Date time the order was created on the sales channel.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets customAttributes
     *
     * @return \OpenAPI\Client\Mirakl\Model\CustomAttributeResponse[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['customAttributes'];
    }

    /**
     * Sets customAttributes
     *
     * @param \OpenAPI\Client\Mirakl\Model\CustomAttributeResponse[]|null $customAttributes Custom attributes
     *
     * @return self
     */
    public function setCustomAttributes($customAttributes)
    {
        if (is_null($customAttributes)) {
            throw new \InvalidArgumentException('non-nullable customAttributes cannot be null');
        }
        $this->container['customAttributes'] = $customAttributes;

        return $this;
    }

    /**
     * Gets fulfillment
     *
     * @return \OpenAPI\Client\Mirakl\Model\Fulfillment|null
     */
    public function getFulfillment()
    {
        return $this->container['fulfillment'];
    }

    /**
     * Sets fulfillment
     *
     * @param \OpenAPI\Client\Mirakl\Model\Fulfillment|null $fulfillment fulfillment
     *
     * @return self
     */
    public function setFulfillment($fulfillment)
    {
        if (is_null($fulfillment)) {
            throw new \InvalidArgumentException('non-nullable fulfillment cannot be null');
        }
        $this->container['fulfillment'] = $fulfillment;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique order identifier used by Mirakl Connect. This identifier can be used as a primary key, but it must not be shared with final users.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets orderLines
     *
     * @return \OpenAPI\Client\Mirakl\Model\OrderLineResponse[]|null
     */
    public function getOrderLines()
    {
        return $this->container['orderLines'];
    }

    /**
     * Sets orderLines
     *
     * @param \OpenAPI\Client\Mirakl\Model\OrderLineResponse[]|null $orderLines Information about ordered products
     *
     * @return self
     */
    public function setOrderLines($orderLines)
    {
        if (is_null($orderLines)) {
            throw new \InvalidArgumentException('non-nullable orderLines cannot be null');
        }
        $this->container['orderLines'] = $orderLines;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \OpenAPI\Client\Mirakl\Model\Origin|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \OpenAPI\Client\Mirakl\Model\Origin|null $origin origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets shippingInfo
     *
     * @return \OpenAPI\Client\Mirakl\Model\ShippingInfo|null
     */
    public function getShippingInfo()
    {
        return $this->container['shippingInfo'];
    }

    /**
     * Sets shippingInfo
     *
     * @param \OpenAPI\Client\Mirakl\Model\ShippingInfo|null $shippingInfo shippingInfo
     *
     * @return self
     */
    public function setShippingInfo($shippingInfo)
    {
        if (is_null($shippingInfo)) {
            throw new \InvalidArgumentException('non-nullable shippingInfo cannot be null');
        }
        $this->container['shippingInfo'] = $shippingInfo;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Current order status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusReason
     *
     * @return string|null
     */
    public function getStatusReason()
    {
        return $this->container['statusReason'];
    }

    /**
     * Sets statusReason
     *
     * @param string|null $statusReason Additional reason about the order status. Availability depends on the order status.
     *
     * @return self
     */
    public function setStatusReason($statusReason)
    {
        if (is_null($statusReason)) {
            throw new \InvalidArgumentException('non-nullable statusReason cannot be null');
        }
        $this->container['statusReason'] = $statusReason;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt Date time the order was last updated in Mirakl Connect.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


