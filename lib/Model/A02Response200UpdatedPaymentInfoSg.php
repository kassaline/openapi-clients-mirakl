<?php
/**
 * A02Response200UpdatedPaymentInfoSg
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * A02Response200UpdatedPaymentInfoSg Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class A02Response200UpdatedPaymentInfoSg implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'A02_Response_200_Updated_PaymentInfo_Sg';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bankAccountNumber' => 'string',
        'bankCity' => 'string',
        'bankKey' => 'string',
        'bankName' => 'string',
        'bankStreet' => 'string',
        'bankZip' => 'string',
        'owner' => 'string',
        'swiftCode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bankAccountNumber' => null,
        'bankCity' => null,
        'bankKey' => null,
        'bankName' => null,
        'bankStreet' => null,
        'bankZip' => null,
        'owner' => null,
        'swiftCode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bankAccountNumber' => false,
        'bankCity' => false,
        'bankKey' => false,
        'bankName' => false,
        'bankStreet' => false,
        'bankZip' => false,
        'owner' => false,
        'swiftCode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bankAccountNumber' => 'bank_account_number',
        'bankCity' => 'bank_city',
        'bankKey' => 'bank_key',
        'bankName' => 'bank_name',
        'bankStreet' => 'bank_street',
        'bankZip' => 'bank_zip',
        'owner' => 'owner',
        'swiftCode' => 'swift_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bankAccountNumber' => 'setBankAccountNumber',
        'bankCity' => 'setBankCity',
        'bankKey' => 'setBankKey',
        'bankName' => 'setBankName',
        'bankStreet' => 'setBankStreet',
        'bankZip' => 'setBankZip',
        'owner' => 'setOwner',
        'swiftCode' => 'setSwiftCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bankAccountNumber' => 'getBankAccountNumber',
        'bankCity' => 'getBankCity',
        'bankKey' => 'getBankKey',
        'bankName' => 'getBankName',
        'bankStreet' => 'getBankStreet',
        'bankZip' => 'getBankZip',
        'owner' => 'getOwner',
        'swiftCode' => 'getSwiftCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('bankAccountNumber', $data ?? [], null);
        $this->setIfExists('bankCity', $data ?? [], null);
        $this->setIfExists('bankKey', $data ?? [], null);
        $this->setIfExists('bankName', $data ?? [], null);
        $this->setIfExists('bankStreet', $data ?? [], null);
        $this->setIfExists('bankZip', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('swiftCode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['bankAccountNumber']) && (mb_strlen($this->container['bankAccountNumber']) > 12)) {
            $invalidProperties[] = "invalid value for 'bankAccountNumber', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['bankAccountNumber']) && (mb_strlen($this->container['bankAccountNumber']) < 9)) {
            $invalidProperties[] = "invalid value for 'bankAccountNumber', the character length must be bigger than or equal to 9.";
        }

        if (!is_null($this->container['bankAccountNumber']) && !preg_match("/[0-9]+/", $this->container['bankAccountNumber'])) {
            $invalidProperties[] = "invalid value for 'bankAccountNumber', must be conform to the pattern /[0-9]+/.";
        }

        if (!is_null($this->container['bankCity']) && (mb_strlen($this->container['bankCity']) > 100)) {
            $invalidProperties[] = "invalid value for 'bankCity', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['bankCity']) && (mb_strlen($this->container['bankCity']) < 3)) {
            $invalidProperties[] = "invalid value for 'bankCity', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['bankKey']) && !preg_match("/[0-9]+/", $this->container['bankKey'])) {
            $invalidProperties[] = "invalid value for 'bankKey', must be conform to the pattern /[0-9]+/.";
        }

        if (!is_null($this->container['bankName']) && (mb_strlen($this->container['bankName']) > 255)) {
            $invalidProperties[] = "invalid value for 'bankName', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['bankName']) && (mb_strlen($this->container['bankName']) < 0)) {
            $invalidProperties[] = "invalid value for 'bankName', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bankStreet']) && (mb_strlen($this->container['bankStreet']) > 100)) {
            $invalidProperties[] = "invalid value for 'bankStreet', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['bankStreet']) && (mb_strlen($this->container['bankStreet']) < 3)) {
            $invalidProperties[] = "invalid value for 'bankStreet', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['bankZip']) && (mb_strlen($this->container['bankZip']) > 255)) {
            $invalidProperties[] = "invalid value for 'bankZip', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['bankZip']) && (mb_strlen($this->container['bankZip']) < 0)) {
            $invalidProperties[] = "invalid value for 'bankZip', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['owner']) && (mb_strlen($this->container['owner']) > 100)) {
            $invalidProperties[] = "invalid value for 'owner', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['owner']) && (mb_strlen($this->container['owner']) < 3)) {
            $invalidProperties[] = "invalid value for 'owner', the character length must be bigger than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bankAccountNumber
     *
     * @return string|null
     */
    public function getBankAccountNumber()
    {
        return $this->container['bankAccountNumber'];
    }

    /**
     * Sets bankAccountNumber
     *
     * @param string|null $bankAccountNumber Bank Account Number
     *
     * @return self
     */
    public function setBankAccountNumber($bankAccountNumber)
    {
        if (is_null($bankAccountNumber)) {
            throw new \InvalidArgumentException('non-nullable bankAccountNumber cannot be null');
        }
        if ((mb_strlen($bankAccountNumber) > 12)) {
            throw new \InvalidArgumentException('invalid length for $bankAccountNumber when calling A02Response200UpdatedPaymentInfoSg., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($bankAccountNumber) < 9)) {
            throw new \InvalidArgumentException('invalid length for $bankAccountNumber when calling A02Response200UpdatedPaymentInfoSg., must be bigger than or equal to 9.');
        }
        if ((!preg_match("/[0-9]+/", ObjectSerializer::toString($bankAccountNumber)))) {
            throw new \InvalidArgumentException("invalid value for \$bankAccountNumber when calling A02Response200UpdatedPaymentInfoSg., must conform to the pattern /[0-9]+/.");
        }

        $this->container['bankAccountNumber'] = $bankAccountNumber;

        return $this;
    }

    /**
     * Gets bankCity
     *
     * @return string|null
     */
    public function getBankCity()
    {
        return $this->container['bankCity'];
    }

    /**
     * Sets bankCity
     *
     * @param string|null $bankCity Bank city
     *
     * @return self
     */
    public function setBankCity($bankCity)
    {
        if (is_null($bankCity)) {
            throw new \InvalidArgumentException('non-nullable bankCity cannot be null');
        }
        if ((mb_strlen($bankCity) > 100)) {
            throw new \InvalidArgumentException('invalid length for $bankCity when calling A02Response200UpdatedPaymentInfoSg., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($bankCity) < 3)) {
            throw new \InvalidArgumentException('invalid length for $bankCity when calling A02Response200UpdatedPaymentInfoSg., must be bigger than or equal to 3.');
        }

        $this->container['bankCity'] = $bankCity;

        return $this;
    }

    /**
     * Gets bankKey
     *
     * @return string|null
     */
    public function getBankKey()
    {
        return $this->container['bankKey'];
    }

    /**
     * Sets bankKey
     *
     * @param string|null $bankKey Bank Key
     *
     * @return self
     */
    public function setBankKey($bankKey)
    {
        if (is_null($bankKey)) {
            throw new \InvalidArgumentException('non-nullable bankKey cannot be null');
        }

        if ((!preg_match("/[0-9]+/", ObjectSerializer::toString($bankKey)))) {
            throw new \InvalidArgumentException("invalid value for \$bankKey when calling A02Response200UpdatedPaymentInfoSg., must conform to the pattern /[0-9]+/.");
        }

        $this->container['bankKey'] = $bankKey;

        return $this;
    }

    /**
     * Gets bankName
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bankName'];
    }

    /**
     * Sets bankName
     *
     * @param string|null $bankName Bank name
     *
     * @return self
     */
    public function setBankName($bankName)
    {
        if (is_null($bankName)) {
            throw new \InvalidArgumentException('non-nullable bankName cannot be null');
        }
        if ((mb_strlen($bankName) > 255)) {
            throw new \InvalidArgumentException('invalid length for $bankName when calling A02Response200UpdatedPaymentInfoSg., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($bankName) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bankName when calling A02Response200UpdatedPaymentInfoSg., must be bigger than or equal to 0.');
        }

        $this->container['bankName'] = $bankName;

        return $this;
    }

    /**
     * Gets bankStreet
     *
     * @return string|null
     */
    public function getBankStreet()
    {
        return $this->container['bankStreet'];
    }

    /**
     * Sets bankStreet
     *
     * @param string|null $bankStreet Bank street name
     *
     * @return self
     */
    public function setBankStreet($bankStreet)
    {
        if (is_null($bankStreet)) {
            throw new \InvalidArgumentException('non-nullable bankStreet cannot be null');
        }
        if ((mb_strlen($bankStreet) > 100)) {
            throw new \InvalidArgumentException('invalid length for $bankStreet when calling A02Response200UpdatedPaymentInfoSg., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($bankStreet) < 3)) {
            throw new \InvalidArgumentException('invalid length for $bankStreet when calling A02Response200UpdatedPaymentInfoSg., must be bigger than or equal to 3.');
        }

        $this->container['bankStreet'] = $bankStreet;

        return $this;
    }

    /**
     * Gets bankZip
     *
     * @return string|null
     */
    public function getBankZip()
    {
        return $this->container['bankZip'];
    }

    /**
     * Sets bankZip
     *
     * @param string|null $bankZip Bank zip code
     *
     * @return self
     */
    public function setBankZip($bankZip)
    {
        if (is_null($bankZip)) {
            throw new \InvalidArgumentException('non-nullable bankZip cannot be null');
        }
        if ((mb_strlen($bankZip) > 255)) {
            throw new \InvalidArgumentException('invalid length for $bankZip when calling A02Response200UpdatedPaymentInfoSg., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($bankZip) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bankZip when calling A02Response200UpdatedPaymentInfoSg., must be bigger than or equal to 0.');
        }

        $this->container['bankZip'] = $bankZip;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner Name of the owner of the payment information
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        if ((mb_strlen($owner) > 100)) {
            throw new \InvalidArgumentException('invalid length for $owner when calling A02Response200UpdatedPaymentInfoSg., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($owner) < 3)) {
            throw new \InvalidArgumentException('invalid length for $owner when calling A02Response200UpdatedPaymentInfoSg., must be bigger than or equal to 3.');
        }

        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets swiftCode
     *
     * @return string|null
     */
    public function getSwiftCode()
    {
        return $this->container['swiftCode'];
    }

    /**
     * Sets swiftCode
     *
     * @param string|null $swiftCode Bank account swift code
     *
     * @return self
     */
    public function setSwiftCode($swiftCode)
    {
        if (is_null($swiftCode)) {
            throw new \InvalidArgumentException('non-nullable swiftCode cannot be null');
        }
        $this->container['swiftCode'] = $swiftCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


