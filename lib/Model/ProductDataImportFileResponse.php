<?php
/**
 * ProductDataImportFileResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * The version of the OpenAPI document: 2.18.3
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * ProductDataImportFileResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductDataImportFileResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductDataImportFileResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'idImportFile' => 'int',
        'uri' => 'string',
        'status' => '\OpenAPI\Client\Mirakl\Model\ProductDataImportFileStatus',
        'note' => 'string',
        'totalLines' => 'float',
        'currentLine' => 'float',
        'tsCreated' => 'string',
        'tsUpdated' => 'string',
        'tsLastRowUpdated' => 'string',
        'tsCompleted' => 'string',
        'errorCount' => 'float',
        'asyncImportDone' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'idImportFile' => 'int64',
        'uri' => null,
        'status' => null,
        'note' => null,
        'totalLines' => 'double',
        'currentLine' => 'double',
        'tsCreated' => null,
        'tsUpdated' => null,
        'tsLastRowUpdated' => null,
        'tsCompleted' => null,
        'errorCount' => 'double',
        'asyncImportDone' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'idImportFile' => false,
        'uri' => false,
        'status' => false,
        'note' => true,
        'totalLines' => false,
        'currentLine' => false,
        'tsCreated' => false,
        'tsUpdated' => true,
        'tsLastRowUpdated' => true,
        'tsCompleted' => true,
        'errorCount' => false,
        'asyncImportDone' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'idImportFile' => 'id_import_file',
        'uri' => 'uri',
        'status' => 'status',
        'note' => 'note',
        'totalLines' => 'total_lines',
        'currentLine' => 'current_line',
        'tsCreated' => 'ts_created',
        'tsUpdated' => 'ts_updated',
        'tsLastRowUpdated' => 'ts_last_row_updated',
        'tsCompleted' => 'ts_completed',
        'errorCount' => 'error_count',
        'asyncImportDone' => 'async_import_done'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'idImportFile' => 'setIdImportFile',
        'uri' => 'setUri',
        'status' => 'setStatus',
        'note' => 'setNote',
        'totalLines' => 'setTotalLines',
        'currentLine' => 'setCurrentLine',
        'tsCreated' => 'setTsCreated',
        'tsUpdated' => 'setTsUpdated',
        'tsLastRowUpdated' => 'setTsLastRowUpdated',
        'tsCompleted' => 'setTsCompleted',
        'errorCount' => 'setErrorCount',
        'asyncImportDone' => 'setAsyncImportDone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'idImportFile' => 'getIdImportFile',
        'uri' => 'getUri',
        'status' => 'getStatus',
        'note' => 'getNote',
        'totalLines' => 'getTotalLines',
        'currentLine' => 'getCurrentLine',
        'tsCreated' => 'getTsCreated',
        'tsUpdated' => 'getTsUpdated',
        'tsLastRowUpdated' => 'getTsLastRowUpdated',
        'tsCompleted' => 'getTsCompleted',
        'errorCount' => 'getErrorCount',
        'asyncImportDone' => 'getAsyncImportDone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('idImportFile', $data ?? [], null);
        $this->setIfExists('uri', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('totalLines', $data ?? [], null);
        $this->setIfExists('currentLine', $data ?? [], null);
        $this->setIfExists('tsCreated', $data ?? [], null);
        $this->setIfExists('tsUpdated', $data ?? [], null);
        $this->setIfExists('tsLastRowUpdated', $data ?? [], null);
        $this->setIfExists('tsCompleted', $data ?? [], null);
        $this->setIfExists('errorCount', $data ?? [], null);
        $this->setIfExists('asyncImportDone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['idImportFile'] === null) {
            $invalidProperties[] = "'idImportFile' can't be null";
        }
        if (($this->container['idImportFile'] < 1)) {
            $invalidProperties[] = "invalid value for 'idImportFile', must be bigger than or equal to 1.";
        }

        if ($this->container['uri'] === null) {
            $invalidProperties[] = "'uri' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalidProperties[] = "'note' can't be null";
        }
        if ($this->container['totalLines'] === null) {
            $invalidProperties[] = "'totalLines' can't be null";
        }
        if ($this->container['currentLine'] === null) {
            $invalidProperties[] = "'currentLine' can't be null";
        }
        if ($this->container['tsCreated'] === null) {
            $invalidProperties[] = "'tsCreated' can't be null";
        }
        if ($this->container['tsUpdated'] === null) {
            $invalidProperties[] = "'tsUpdated' can't be null";
        }
        if ($this->container['tsLastRowUpdated'] === null) {
            $invalidProperties[] = "'tsLastRowUpdated' can't be null";
        }
        if ($this->container['tsCompleted'] === null) {
            $invalidProperties[] = "'tsCompleted' can't be null";
        }
        if ($this->container['errorCount'] === null) {
            $invalidProperties[] = "'errorCount' can't be null";
        }
        if ($this->container['asyncImportDone'] === null) {
            $invalidProperties[] = "'asyncImportDone' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets idImportFile
     *
     * @return int
     */
    public function getIdImportFile()
    {
        return $this->container['idImportFile'];
    }

    /**
     * Sets idImportFile
     *
     * @param int $idImportFile idImportFile
     *
     * @return self
     */
    public function setIdImportFile($idImportFile)
    {
        if (is_null($idImportFile)) {
            throw new \InvalidArgumentException('non-nullable idImportFile cannot be null');
        }

        if (($idImportFile < 1)) {
            throw new \InvalidArgumentException('invalid value for $idImportFile when calling ProductDataImportFileResponse., must be bigger than or equal to 1.');
        }

        $this->container['idImportFile'] = $idImportFile;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string $uri uri
     *
     * @return self
     */
    public function setUri($uri)
    {
        if (is_null($uri)) {
            throw new \InvalidArgumentException('non-nullable uri cannot be null');
        }
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Mirakl\Model\ProductDataImportFileStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Mirakl\Model\ProductDataImportFileStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets totalLines
     *
     * @return float
     */
    public function getTotalLines()
    {
        return $this->container['totalLines'];
    }

    /**
     * Sets totalLines
     *
     * @param float $totalLines totalLines
     *
     * @return self
     */
    public function setTotalLines($totalLines)
    {
        if (is_null($totalLines)) {
            throw new \InvalidArgumentException('non-nullable totalLines cannot be null');
        }
        $this->container['totalLines'] = $totalLines;

        return $this;
    }

    /**
     * Gets currentLine
     *
     * @return float
     */
    public function getCurrentLine()
    {
        return $this->container['currentLine'];
    }

    /**
     * Sets currentLine
     *
     * @param float $currentLine currentLine
     *
     * @return self
     */
    public function setCurrentLine($currentLine)
    {
        if (is_null($currentLine)) {
            throw new \InvalidArgumentException('non-nullable currentLine cannot be null');
        }
        $this->container['currentLine'] = $currentLine;

        return $this;
    }

    /**
     * Gets tsCreated
     *
     * @return string
     */
    public function getTsCreated()
    {
        return $this->container['tsCreated'];
    }

    /**
     * Sets tsCreated
     *
     * @param string $tsCreated tsCreated
     *
     * @return self
     */
    public function setTsCreated($tsCreated)
    {
        if (is_null($tsCreated)) {
            throw new \InvalidArgumentException('non-nullable tsCreated cannot be null');
        }
        $this->container['tsCreated'] = $tsCreated;

        return $this;
    }

    /**
     * Gets tsUpdated
     *
     * @return string
     */
    public function getTsUpdated()
    {
        return $this->container['tsUpdated'];
    }

    /**
     * Sets tsUpdated
     *
     * @param string $tsUpdated tsUpdated
     *
     * @return self
     */
    public function setTsUpdated($tsUpdated)
    {
        if (is_null($tsUpdated)) {
            array_push($this->openAPINullablesSetToNull, 'tsUpdated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tsUpdated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tsUpdated'] = $tsUpdated;

        return $this;
    }

    /**
     * Gets tsLastRowUpdated
     *
     * @return string
     */
    public function getTsLastRowUpdated()
    {
        return $this->container['tsLastRowUpdated'];
    }

    /**
     * Sets tsLastRowUpdated
     *
     * @param string $tsLastRowUpdated tsLastRowUpdated
     *
     * @return self
     */
    public function setTsLastRowUpdated($tsLastRowUpdated)
    {
        if (is_null($tsLastRowUpdated)) {
            array_push($this->openAPINullablesSetToNull, 'tsLastRowUpdated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tsLastRowUpdated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tsLastRowUpdated'] = $tsLastRowUpdated;

        return $this;
    }

    /**
     * Gets tsCompleted
     *
     * @return string
     */
    public function getTsCompleted()
    {
        return $this->container['tsCompleted'];
    }

    /**
     * Sets tsCompleted
     *
     * @param string $tsCompleted tsCompleted
     *
     * @return self
     */
    public function setTsCompleted($tsCompleted)
    {
        if (is_null($tsCompleted)) {
            array_push($this->openAPINullablesSetToNull, 'tsCompleted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tsCompleted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tsCompleted'] = $tsCompleted;

        return $this;
    }

    /**
     * Gets errorCount
     *
     * @return float
     */
    public function getErrorCount()
    {
        return $this->container['errorCount'];
    }

    /**
     * Sets errorCount
     *
     * @param float $errorCount errorCount
     *
     * @return self
     */
    public function setErrorCount($errorCount)
    {
        if (is_null($errorCount)) {
            throw new \InvalidArgumentException('non-nullable errorCount cannot be null');
        }
        $this->container['errorCount'] = $errorCount;

        return $this;
    }

    /**
     * Gets asyncImportDone
     *
     * @return float
     */
    public function getAsyncImportDone()
    {
        return $this->container['asyncImportDone'];
    }

    /**
     * Sets asyncImportDone
     *
     * @param float $asyncImportDone asyncImportDone
     *
     * @return self
     */
    public function setAsyncImportDone($asyncImportDone)
    {
        if (is_null($asyncImportDone)) {
            throw new \InvalidArgumentException('non-nullable asyncImportDone cannot be null');
        }
        $this->container['asyncImportDone'] = $asyncImportDone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


