<?php
/**
 * PC01Response200FeaturesOrderWorkflows
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * PC01Response200FeaturesOrderWorkflows Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PC01Response200FeaturesOrderWorkflows implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PC01_Response_200_Features_OrderWorkflows';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'noCustomerPaymentConfirmation' => 'bool',
        'orderAcceptance' => 'string',
        'pauseDebitWorkflow' => 'bool',
        'payOnDueDate' => 'bool',
        'payOnShipment' => 'bool',
        'sellersEditShippingOrigin' => 'bool',
        'shippingAndBillingDetailsBeforeAcceptance' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'noCustomerPaymentConfirmation' => null,
        'orderAcceptance' => null,
        'pauseDebitWorkflow' => null,
        'payOnDueDate' => null,
        'payOnShipment' => null,
        'sellersEditShippingOrigin' => null,
        'shippingAndBillingDetailsBeforeAcceptance' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'noCustomerPaymentConfirmation' => false,
        'orderAcceptance' => false,
        'pauseDebitWorkflow' => false,
        'payOnDueDate' => false,
        'payOnShipment' => false,
        'sellersEditShippingOrigin' => false,
        'shippingAndBillingDetailsBeforeAcceptance' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'noCustomerPaymentConfirmation' => 'no_customer_payment_confirmation',
        'orderAcceptance' => 'order_acceptance',
        'pauseDebitWorkflow' => 'pause_debit_workflow',
        'payOnDueDate' => 'pay_on_due_date',
        'payOnShipment' => 'pay_on_shipment',
        'sellersEditShippingOrigin' => 'sellers_edit_shipping_origin',
        'shippingAndBillingDetailsBeforeAcceptance' => 'shipping_and_billing_details_before_acceptance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'noCustomerPaymentConfirmation' => 'setNoCustomerPaymentConfirmation',
        'orderAcceptance' => 'setOrderAcceptance',
        'pauseDebitWorkflow' => 'setPauseDebitWorkflow',
        'payOnDueDate' => 'setPayOnDueDate',
        'payOnShipment' => 'setPayOnShipment',
        'sellersEditShippingOrigin' => 'setSellersEditShippingOrigin',
        'shippingAndBillingDetailsBeforeAcceptance' => 'setShippingAndBillingDetailsBeforeAcceptance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'noCustomerPaymentConfirmation' => 'getNoCustomerPaymentConfirmation',
        'orderAcceptance' => 'getOrderAcceptance',
        'pauseDebitWorkflow' => 'getPauseDebitWorkflow',
        'payOnDueDate' => 'getPayOnDueDate',
        'payOnShipment' => 'getPayOnShipment',
        'sellersEditShippingOrigin' => 'getSellersEditShippingOrigin',
        'shippingAndBillingDetailsBeforeAcceptance' => 'getShippingAndBillingDetailsBeforeAcceptance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('noCustomerPaymentConfirmation', $data ?? [], null);
        $this->setIfExists('orderAcceptance', $data ?? [], null);
        $this->setIfExists('pauseDebitWorkflow', $data ?? [], null);
        $this->setIfExists('payOnDueDate', $data ?? [], null);
        $this->setIfExists('payOnShipment', $data ?? [], null);
        $this->setIfExists('sellersEditShippingOrigin', $data ?? [], null);
        $this->setIfExists('shippingAndBillingDetailsBeforeAcceptance', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets noCustomerPaymentConfirmation
     *
     * @return bool|null
     */
    public function getNoCustomerPaymentConfirmation()
    {
        return $this->container['noCustomerPaymentConfirmation'];
    }

    /**
     * Sets noCustomerPaymentConfirmation
     *
     * @param bool|null $noCustomerPaymentConfirmation Allows seller payments to be completely separated from customer debits
     *
     * @return self
     */
    public function setNoCustomerPaymentConfirmation($noCustomerPaymentConfirmation)
    {
        if (is_null($noCustomerPaymentConfirmation)) {
            throw new \InvalidArgumentException('non-nullable noCustomerPaymentConfirmation cannot be null');
        }
        $this->container['noCustomerPaymentConfirmation'] = $noCustomerPaymentConfirmation;

        return $this;
    }

    /**
     * Gets orderAcceptance
     *
     * @return string|null
     */
    public function getOrderAcceptance()
    {
        return $this->container['orderAcceptance'];
    }

    /**
     * Sets orderAcceptance
     *
     * @param string|null $orderAcceptance Indicate if shop accounts must accept new orders and take responsibility for the transaction. NOT_AUTOMATIC: All shop accounts must accept their orders manually. AUTOMATIC: Orders are automatically accepted. BOTH: AUTOMATIC or NOT_AUTOMATIC mode depending on the store account
     *
     * @return self
     */
    public function setOrderAcceptance($orderAcceptance)
    {
        if (is_null($orderAcceptance)) {
            throw new \InvalidArgumentException('non-nullable orderAcceptance cannot be null');
        }
        $this->container['orderAcceptance'] = $orderAcceptance;

        return $this;
    }

    /**
     * Gets pauseDebitWorkflow
     *
     * @return bool|null
     */
    public function getPauseDebitWorkflow()
    {
        return $this->container['pauseDebitWorkflow'];
    }

    /**
     * Sets pauseDebitWorkflow
     *
     * @param bool|null $pauseDebitWorkflow Pause the order debit workflow when taxes must be recalculated
     *
     * @return self
     */
    public function setPauseDebitWorkflow($pauseDebitWorkflow)
    {
        if (is_null($pauseDebitWorkflow)) {
            throw new \InvalidArgumentException('non-nullable pauseDebitWorkflow cannot be null');
        }
        $this->container['pauseDebitWorkflow'] = $pauseDebitWorkflow;

        return $this;
    }

    /**
     * Gets payOnDueDate
     *
     * @return bool|null
     */
    public function getPayOnDueDate()
    {
        return $this->container['payOnDueDate'];
    }

    /**
     * Sets payOnDueDate
     *
     * @param bool|null $payOnDueDate Allows professionals to pay their orders after the receipt of the items or an explicit invoice
     *
     * @return self
     */
    public function setPayOnDueDate($payOnDueDate)
    {
        if (is_null($payOnDueDate)) {
            throw new \InvalidArgumentException('non-nullable payOnDueDate cannot be null');
        }
        $this->container['payOnDueDate'] = $payOnDueDate;

        return $this;
    }

    /**
     * Gets payOnShipment
     *
     * @return bool|null
     */
    public function getPayOnShipment()
    {
        return $this->container['payOnShipment'];
    }

    /**
     * Sets payOnShipment
     *
     * @param bool|null $payOnShipment Allows operators to debit orders before they have been fully shipped
     *
     * @return self
     */
    public function setPayOnShipment($payOnShipment)
    {
        if (is_null($payOnShipment)) {
            throw new \InvalidArgumentException('non-nullable payOnShipment cannot be null');
        }
        $this->container['payOnShipment'] = $payOnShipment;

        return $this;
    }

    /**
     * Gets sellersEditShippingOrigin
     *
     * @return bool|null
     */
    public function getSellersEditShippingOrigin()
    {
        return $this->container['sellersEditShippingOrigin'];
    }

    /**
     * Sets sellersEditShippingOrigin
     *
     * @param bool|null $sellersEditShippingOrigin Allow shop accounts to edit shipping origin to ensures accurate tax calculations with shipping origin data
     *
     * @return self
     */
    public function setSellersEditShippingOrigin($sellersEditShippingOrigin)
    {
        if (is_null($sellersEditShippingOrigin)) {
            throw new \InvalidArgumentException('non-nullable sellersEditShippingOrigin cannot be null');
        }
        $this->container['sellersEditShippingOrigin'] = $sellersEditShippingOrigin;

        return $this;
    }

    /**
     * Gets shippingAndBillingDetailsBeforeAcceptance
     *
     * @return bool|null
     */
    public function getShippingAndBillingDetailsBeforeAcceptance()
    {
        return $this->container['shippingAndBillingDetailsBeforeAcceptance'];
    }

    /**
     * Sets shippingAndBillingDetailsBeforeAcceptance
     *
     * @param bool|null $shippingAndBillingDetailsBeforeAcceptance Indicate if shipping and billing details are displayed before order acceptance
     *
     * @return self
     */
    public function setShippingAndBillingDetailsBeforeAcceptance($shippingAndBillingDetailsBeforeAcceptance)
    {
        if (is_null($shippingAndBillingDetailsBeforeAcceptance)) {
            throw new \InvalidArgumentException('non-nullable shippingAndBillingDetailsBeforeAcceptance cannot be null');
        }
        $this->container['shippingAndBillingDetailsBeforeAcceptance'] = $shippingAndBillingDetailsBeforeAcceptance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


