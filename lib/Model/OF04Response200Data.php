<?php
/**
 * OF04Response200Data
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * OF04Response200Data Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OF04Response200Data implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OF04_Response_200_Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dateCreated' => '\DateTime',
        'hasErrorReport' => 'bool',
        'importId' => 'int',
        'linesInError' => 'int',
        'linesInPending' => 'int',
        'linesInSuccess' => 'int',
        'linesRead' => 'int',
        'mode' => 'string',
        'offerDeleted' => 'int',
        'offerInserted' => 'int',
        'offerUpdated' => 'int',
        'origin' => 'string',
        'reasonStatus' => 'string',
        'shopId' => 'int',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dateCreated' => 'date-time',
        'hasErrorReport' => null,
        'importId' => 'int64',
        'linesInError' => 'int32',
        'linesInPending' => 'int32',
        'linesInSuccess' => 'int32',
        'linesRead' => 'int32',
        'mode' => null,
        'offerDeleted' => 'int32',
        'offerInserted' => 'int32',
        'offerUpdated' => 'int32',
        'origin' => null,
        'reasonStatus' => null,
        'shopId' => 'int64',
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dateCreated' => false,
        'hasErrorReport' => false,
        'importId' => false,
        'linesInError' => false,
        'linesInPending' => false,
        'linesInSuccess' => false,
        'linesRead' => false,
        'mode' => false,
        'offerDeleted' => false,
        'offerInserted' => false,
        'offerUpdated' => false,
        'origin' => false,
        'reasonStatus' => false,
        'shopId' => false,
        'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dateCreated' => 'date_created',
        'hasErrorReport' => 'has_error_report',
        'importId' => 'import_id',
        'linesInError' => 'lines_in_error',
        'linesInPending' => 'lines_in_pending',
        'linesInSuccess' => 'lines_in_success',
        'linesRead' => 'lines_read',
        'mode' => 'mode',
        'offerDeleted' => 'offer_deleted',
        'offerInserted' => 'offer_inserted',
        'offerUpdated' => 'offer_updated',
        'origin' => 'origin',
        'reasonStatus' => 'reason_status',
        'shopId' => 'shop_id',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dateCreated' => 'setDateCreated',
        'hasErrorReport' => 'setHasErrorReport',
        'importId' => 'setImportId',
        'linesInError' => 'setLinesInError',
        'linesInPending' => 'setLinesInPending',
        'linesInSuccess' => 'setLinesInSuccess',
        'linesRead' => 'setLinesRead',
        'mode' => 'setMode',
        'offerDeleted' => 'setOfferDeleted',
        'offerInserted' => 'setOfferInserted',
        'offerUpdated' => 'setOfferUpdated',
        'origin' => 'setOrigin',
        'reasonStatus' => 'setReasonStatus',
        'shopId' => 'setShopId',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dateCreated' => 'getDateCreated',
        'hasErrorReport' => 'getHasErrorReport',
        'importId' => 'getImportId',
        'linesInError' => 'getLinesInError',
        'linesInPending' => 'getLinesInPending',
        'linesInSuccess' => 'getLinesInSuccess',
        'linesRead' => 'getLinesRead',
        'mode' => 'getMode',
        'offerDeleted' => 'getOfferDeleted',
        'offerInserted' => 'getOfferInserted',
        'offerUpdated' => 'getOfferUpdated',
        'origin' => 'getOrigin',
        'reasonStatus' => 'getReasonStatus',
        'shopId' => 'getShopId',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('dateCreated', $data ?? [], null);
        $this->setIfExists('hasErrorReport', $data ?? [], null);
        $this->setIfExists('importId', $data ?? [], null);
        $this->setIfExists('linesInError', $data ?? [], null);
        $this->setIfExists('linesInPending', $data ?? [], null);
        $this->setIfExists('linesInSuccess', $data ?? [], null);
        $this->setIfExists('linesRead', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('offerDeleted', $data ?? [], null);
        $this->setIfExists('offerInserted', $data ?? [], null);
        $this->setIfExists('offerUpdated', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('reasonStatus', $data ?? [], null);
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dateCreated
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime|null $dateCreated Import creation date
     *
     * @return self
     */
    public function setDateCreated($dateCreated)
    {
        if (is_null($dateCreated)) {
            throw new \InvalidArgumentException('non-nullable dateCreated cannot be null');
        }
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets hasErrorReport
     *
     * @return bool|null
     */
    public function getHasErrorReport()
    {
        return $this->container['hasErrorReport'];
    }

    /**
     * Sets hasErrorReport
     *
     * @param bool|null $hasErrorReport Indicate if an error report exists
     *
     * @return self
     */
    public function setHasErrorReport($hasErrorReport)
    {
        if (is_null($hasErrorReport)) {
            throw new \InvalidArgumentException('non-nullable hasErrorReport cannot be null');
        }
        $this->container['hasErrorReport'] = $hasErrorReport;

        return $this;
    }

    /**
     * Gets importId
     *
     * @return int|null
     */
    public function getImportId()
    {
        return $this->container['importId'];
    }

    /**
     * Sets importId
     *
     * @param int|null $importId Import ID
     *
     * @return self
     */
    public function setImportId($importId)
    {
        if (is_null($importId)) {
            throw new \InvalidArgumentException('non-nullable importId cannot be null');
        }
        $this->container['importId'] = $importId;

        return $this;
    }

    /**
     * Gets linesInError
     *
     * @return int|null
     */
    public function getLinesInError()
    {
        return $this->container['linesInError'];
    }

    /**
     * Sets linesInError
     *
     * @param int|null $linesInError Total count of lines in error
     *
     * @return self
     */
    public function setLinesInError($linesInError)
    {
        if (is_null($linesInError)) {
            throw new \InvalidArgumentException('non-nullable linesInError cannot be null');
        }
        $this->container['linesInError'] = $linesInError;

        return $this;
    }

    /**
     * Gets linesInPending
     *
     * @return int|null
     */
    public function getLinesInPending()
    {
        return $this->container['linesInPending'];
    }

    /**
     * Sets linesInPending
     *
     * @param int|null $linesInPending Total count of lines in pending
     *
     * @return self
     */
    public function setLinesInPending($linesInPending)
    {
        if (is_null($linesInPending)) {
            throw new \InvalidArgumentException('non-nullable linesInPending cannot be null');
        }
        $this->container['linesInPending'] = $linesInPending;

        return $this;
    }

    /**
     * Gets linesInSuccess
     *
     * @return int|null
     */
    public function getLinesInSuccess()
    {
        return $this->container['linesInSuccess'];
    }

    /**
     * Sets linesInSuccess
     *
     * @param int|null $linesInSuccess Total count of lines in success
     *
     * @return self
     */
    public function setLinesInSuccess($linesInSuccess)
    {
        if (is_null($linesInSuccess)) {
            throw new \InvalidArgumentException('non-nullable linesInSuccess cannot be null');
        }
        $this->container['linesInSuccess'] = $linesInSuccess;

        return $this;
    }

    /**
     * Gets linesRead
     *
     * @return int|null
     */
    public function getLinesRead()
    {
        return $this->container['linesRead'];
    }

    /**
     * Sets linesRead
     *
     * @param int|null $linesRead Total count of lines read
     *
     * @return self
     */
    public function setLinesRead($linesRead)
    {
        if (is_null($linesRead)) {
            throw new \InvalidArgumentException('non-nullable linesRead cannot be null');
        }
        $this->container['linesRead'] = $linesRead;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Import mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets offerDeleted
     *
     * @return int|null
     */
    public function getOfferDeleted()
    {
        return $this->container['offerDeleted'];
    }

    /**
     * Sets offerDeleted
     *
     * @param int|null $offerDeleted Total count of deleted offers
     *
     * @return self
     */
    public function setOfferDeleted($offerDeleted)
    {
        if (is_null($offerDeleted)) {
            throw new \InvalidArgumentException('non-nullable offerDeleted cannot be null');
        }
        $this->container['offerDeleted'] = $offerDeleted;

        return $this;
    }

    /**
     * Gets offerInserted
     *
     * @return int|null
     */
    public function getOfferInserted()
    {
        return $this->container['offerInserted'];
    }

    /**
     * Sets offerInserted
     *
     * @param int|null $offerInserted Total count of inserted offers
     *
     * @return self
     */
    public function setOfferInserted($offerInserted)
    {
        if (is_null($offerInserted)) {
            throw new \InvalidArgumentException('non-nullable offerInserted cannot be null');
        }
        $this->container['offerInserted'] = $offerInserted;

        return $this;
    }

    /**
     * Gets offerUpdated
     *
     * @return int|null
     */
    public function getOfferUpdated()
    {
        return $this->container['offerUpdated'];
    }

    /**
     * Sets offerUpdated
     *
     * @param int|null $offerUpdated Total count of updated offers
     *
     * @return self
     */
    public function setOfferUpdated($offerUpdated)
    {
        if (is_null($offerUpdated)) {
            throw new \InvalidArgumentException('non-nullable offerUpdated cannot be null');
        }
        $this->container['offerUpdated'] = $offerUpdated;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string|null $origin Import origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets reasonStatus
     *
     * @return string|null
     */
    public function getReasonStatus()
    {
        return $this->container['reasonStatus'];
    }

    /**
     * Sets reasonStatus
     *
     * @param string|null $reasonStatus Import status reason
     *
     * @return self
     */
    public function setReasonStatus($reasonStatus)
    {
        if (is_null($reasonStatus)) {
            throw new \InvalidArgumentException('non-nullable reasonStatus cannot be null');
        }
        $this->container['reasonStatus'] = $reasonStatus;

        return $this;
    }

    /**
     * Gets shopId
     *
     * @return int|null
     */
    public function getShopId()
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId
     *
     * @param int|null $shopId Shop identifier
     *
     * @return self
     */
    public function setShopId($shopId)
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Import status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


