<?php
/**
 * OrderDetailsOrderUnitsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * The version of the OpenAPI document: 2.18.3
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * OrderDetailsOrderUnitsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderDetailsOrderUnitsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderDetails_order_units_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'kssEligible' => 'bool',
        'tickets' => '\OpenAPI\Client\Mirakl\Model\Ticket[]',
        'vat' => 'float',
        'product' => '\OpenAPI\Client\Mirakl\Model\Product',
        'cancelReason' => 'string',
        'shippingRate' => 'int',
        'orderReceivedTimestampIso' => '\DateTime',
        'deliveryTimeExpiresIso' => '\DateTime',
        'deliveryTimeMax' => 'int',
        'deliveryTimeMin' => 'int',
        'currency' => '\OpenAPI\Client\Mirakl\Model\Currency',
        'storefront' => '\OpenAPI\Client\Mirakl\Model\Storefront',
        'unitCondition' => 'string',
        'note' => 'string',
        'revenueNet' => 'int',
        'revenueGross' => 'int',
        'idOffer' => 'string',
        'price' => 'int',
        'status' => '\OpenAPI\Client\Mirakl\Model\OrderUnitStatus',
        'tsUpdatedIso' => '\DateTime',
        'isMarketplaceDeemedSupplier' => 'bool',
        'tsCreatedIso' => '\DateTime',
        'idOrder' => 'string',
        'idOrderUnit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'kssEligible' => null,
        'tickets' => null,
        'vat' => 'float',
        'product' => null,
        'cancelReason' => null,
        'shippingRate' => 'int32',
        'orderReceivedTimestampIso' => 'date-time',
        'deliveryTimeExpiresIso' => 'date-time',
        'deliveryTimeMax' => 'int32',
        'deliveryTimeMin' => 'int32',
        'currency' => null,
        'storefront' => null,
        'unitCondition' => null,
        'note' => null,
        'revenueNet' => 'int32',
        'revenueGross' => 'int32',
        'idOffer' => null,
        'price' => 'int32',
        'status' => null,
        'tsUpdatedIso' => 'date-time',
        'isMarketplaceDeemedSupplier' => null,
        'tsCreatedIso' => 'date-time',
        'idOrder' => null,
        'idOrderUnit' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'kssEligible' => false,
        'tickets' => true,
        'vat' => true,
        'product' => true,
        'cancelReason' => true,
        'shippingRate' => false,
        'orderReceivedTimestampIso' => true,
        'deliveryTimeExpiresIso' => true,
        'deliveryTimeMax' => true,
        'deliveryTimeMin' => true,
        'currency' => false,
        'storefront' => false,
        'unitCondition' => true,
        'note' => true,
        'revenueNet' => false,
        'revenueGross' => false,
        'idOffer' => true,
        'price' => false,
        'status' => false,
        'tsUpdatedIso' => false,
        'isMarketplaceDeemedSupplier' => false,
        'tsCreatedIso' => false,
        'idOrder' => false,
        'idOrderUnit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kssEligible' => 'kss_eligible',
        'tickets' => 'tickets',
        'vat' => 'vat',
        'product' => 'product',
        'cancelReason' => 'cancel_reason',
        'shippingRate' => 'shipping_rate',
        'orderReceivedTimestampIso' => 'order_received_timestamp_iso',
        'deliveryTimeExpiresIso' => 'delivery_time_expires_iso',
        'deliveryTimeMax' => 'delivery_time_max',
        'deliveryTimeMin' => 'delivery_time_min',
        'currency' => 'currency',
        'storefront' => 'storefront',
        'unitCondition' => 'unit_condition',
        'note' => 'note',
        'revenueNet' => 'revenue_net',
        'revenueGross' => 'revenue_gross',
        'idOffer' => 'id_offer',
        'price' => 'price',
        'status' => 'status',
        'tsUpdatedIso' => 'ts_updated_iso',
        'isMarketplaceDeemedSupplier' => 'is_marketplace_deemed_supplier',
        'tsCreatedIso' => 'ts_created_iso',
        'idOrder' => 'id_order',
        'idOrderUnit' => 'id_order_unit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kssEligible' => 'setKssEligible',
        'tickets' => 'setTickets',
        'vat' => 'setVat',
        'product' => 'setProduct',
        'cancelReason' => 'setCancelReason',
        'shippingRate' => 'setShippingRate',
        'orderReceivedTimestampIso' => 'setOrderReceivedTimestampIso',
        'deliveryTimeExpiresIso' => 'setDeliveryTimeExpiresIso',
        'deliveryTimeMax' => 'setDeliveryTimeMax',
        'deliveryTimeMin' => 'setDeliveryTimeMin',
        'currency' => 'setCurrency',
        'storefront' => 'setStorefront',
        'unitCondition' => 'setUnitCondition',
        'note' => 'setNote',
        'revenueNet' => 'setRevenueNet',
        'revenueGross' => 'setRevenueGross',
        'idOffer' => 'setIdOffer',
        'price' => 'setPrice',
        'status' => 'setStatus',
        'tsUpdatedIso' => 'setTsUpdatedIso',
        'isMarketplaceDeemedSupplier' => 'setIsMarketplaceDeemedSupplier',
        'tsCreatedIso' => 'setTsCreatedIso',
        'idOrder' => 'setIdOrder',
        'idOrderUnit' => 'setIdOrderUnit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kssEligible' => 'getKssEligible',
        'tickets' => 'getTickets',
        'vat' => 'getVat',
        'product' => 'getProduct',
        'cancelReason' => 'getCancelReason',
        'shippingRate' => 'getShippingRate',
        'orderReceivedTimestampIso' => 'getOrderReceivedTimestampIso',
        'deliveryTimeExpiresIso' => 'getDeliveryTimeExpiresIso',
        'deliveryTimeMax' => 'getDeliveryTimeMax',
        'deliveryTimeMin' => 'getDeliveryTimeMin',
        'currency' => 'getCurrency',
        'storefront' => 'getStorefront',
        'unitCondition' => 'getUnitCondition',
        'note' => 'getNote',
        'revenueNet' => 'getRevenueNet',
        'revenueGross' => 'getRevenueGross',
        'idOffer' => 'getIdOffer',
        'price' => 'getPrice',
        'status' => 'getStatus',
        'tsUpdatedIso' => 'getTsUpdatedIso',
        'isMarketplaceDeemedSupplier' => 'getIsMarketplaceDeemedSupplier',
        'tsCreatedIso' => 'getTsCreatedIso',
        'idOrder' => 'getIdOrder',
        'idOrderUnit' => 'getIdOrderUnit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('kssEligible', $data ?? [], null);
        $this->setIfExists('tickets', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('cancelReason', $data ?? [], null);
        $this->setIfExists('shippingRate', $data ?? [], null);
        $this->setIfExists('orderReceivedTimestampIso', $data ?? [], null);
        $this->setIfExists('deliveryTimeExpiresIso', $data ?? [], null);
        $this->setIfExists('deliveryTimeMax', $data ?? [], null);
        $this->setIfExists('deliveryTimeMin', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('storefront', $data ?? [], null);
        $this->setIfExists('unitCondition', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('revenueNet', $data ?? [], null);
        $this->setIfExists('revenueGross', $data ?? [], null);
        $this->setIfExists('idOffer', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('tsUpdatedIso', $data ?? [], null);
        $this->setIfExists('isMarketplaceDeemedSupplier', $data ?? [], null);
        $this->setIfExists('tsCreatedIso', $data ?? [], null);
        $this->setIfExists('idOrder', $data ?? [], null);
        $this->setIfExists('idOrderUnit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tickets'] === null) {
            $invalidProperties[] = "'tickets' can't be null";
        }
        if ($this->container['vat'] === null) {
            $invalidProperties[] = "'vat' can't be null";
        }
        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if ($this->container['cancelReason'] === null) {
            $invalidProperties[] = "'cancelReason' can't be null";
        }
        if ($this->container['shippingRate'] === null) {
            $invalidProperties[] = "'shippingRate' can't be null";
        }
        if ($this->container['orderReceivedTimestampIso'] === null) {
            $invalidProperties[] = "'orderReceivedTimestampIso' can't be null";
        }
        if ($this->container['deliveryTimeExpiresIso'] === null) {
            $invalidProperties[] = "'deliveryTimeExpiresIso' can't be null";
        }
        if ($this->container['deliveryTimeMax'] === null) {
            $invalidProperties[] = "'deliveryTimeMax' can't be null";
        }
        if ($this->container['deliveryTimeMin'] === null) {
            $invalidProperties[] = "'deliveryTimeMin' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['storefront'] === null) {
            $invalidProperties[] = "'storefront' can't be null";
        }
        if ($this->container['unitCondition'] === null) {
            $invalidProperties[] = "'unitCondition' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalidProperties[] = "'note' can't be null";
        }
        if ($this->container['revenueNet'] === null) {
            $invalidProperties[] = "'revenueNet' can't be null";
        }
        if ($this->container['revenueGross'] === null) {
            $invalidProperties[] = "'revenueGross' can't be null";
        }
        if ($this->container['idOffer'] === null) {
            $invalidProperties[] = "'idOffer' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['tsUpdatedIso'] === null) {
            $invalidProperties[] = "'tsUpdatedIso' can't be null";
        }
        if ($this->container['isMarketplaceDeemedSupplier'] === null) {
            $invalidProperties[] = "'isMarketplaceDeemedSupplier' can't be null";
        }
        if ($this->container['tsCreatedIso'] === null) {
            $invalidProperties[] = "'tsCreatedIso' can't be null";
        }
        if ($this->container['idOrder'] === null) {
            $invalidProperties[] = "'idOrder' can't be null";
        }
        if ($this->container['idOrderUnit'] === null) {
            $invalidProperties[] = "'idOrderUnit' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kssEligible
     *
     * @return bool|null
     */
    public function getKssEligible()
    {
        return $this->container['kssEligible'];
    }

    /**
     * Sets kssEligible
     *
     * @param bool|null $kssEligible The attribute is only responded when explicitly requested as an embedded field
     *
     * @return self
     */
    public function setKssEligible($kssEligible)
    {
        if (is_null($kssEligible)) {
            throw new \InvalidArgumentException('non-nullable kssEligible cannot be null');
        }
        $this->container['kssEligible'] = $kssEligible;

        return $this;
    }

    /**
     * Gets tickets
     *
     * @return \OpenAPI\Client\Mirakl\Model\Ticket[]
     */
    public function getTickets()
    {
        return $this->container['tickets'];
    }

    /**
     * Sets tickets
     *
     * @param \OpenAPI\Client\Mirakl\Model\Ticket[] $tickets tickets
     *
     * @return self
     */
    public function setTickets($tickets)
    {
        if (is_null($tickets)) {
            array_push($this->openAPINullablesSetToNull, 'tickets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tickets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tickets'] = $tickets;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return float
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float $vat vat
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            array_push($this->openAPINullablesSetToNull, 'vat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \OpenAPI\Client\Mirakl\Model\Product
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \OpenAPI\Client\Mirakl\Model\Product $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            array_push($this->openAPINullablesSetToNull, 'product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets cancelReason
     *
     * @return string
     */
    public function getCancelReason()
    {
        return $this->container['cancelReason'];
    }

    /**
     * Sets cancelReason
     *
     * @param string $cancelReason cancelReason
     *
     * @return self
     */
    public function setCancelReason($cancelReason)
    {
        if (is_null($cancelReason)) {
            array_push($this->openAPINullablesSetToNull, 'cancelReason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancelReason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cancelReason'] = $cancelReason;

        return $this;
    }

    /**
     * Gets shippingRate
     *
     * @return int
     */
    public function getShippingRate()
    {
        return $this->container['shippingRate'];
    }

    /**
     * Sets shippingRate
     *
     * @param int $shippingRate shippingRate
     *
     * @return self
     */
    public function setShippingRate($shippingRate)
    {
        if (is_null($shippingRate)) {
            throw new \InvalidArgumentException('non-nullable shippingRate cannot be null');
        }
        $this->container['shippingRate'] = $shippingRate;

        return $this;
    }

    /**
     * Gets orderReceivedTimestampIso
     *
     * @return \DateTime
     */
    public function getOrderReceivedTimestampIso()
    {
        return $this->container['orderReceivedTimestampIso'];
    }

    /**
     * Sets orderReceivedTimestampIso
     *
     * @param \DateTime $orderReceivedTimestampIso orderReceivedTimestampIso
     *
     * @return self
     */
    public function setOrderReceivedTimestampIso($orderReceivedTimestampIso)
    {
        if (is_null($orderReceivedTimestampIso)) {
            array_push($this->openAPINullablesSetToNull, 'orderReceivedTimestampIso');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orderReceivedTimestampIso', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orderReceivedTimestampIso'] = $orderReceivedTimestampIso;

        return $this;
    }

    /**
     * Gets deliveryTimeExpiresIso
     *
     * @return \DateTime
     */
    public function getDeliveryTimeExpiresIso()
    {
        return $this->container['deliveryTimeExpiresIso'];
    }

    /**
     * Sets deliveryTimeExpiresIso
     *
     * @param \DateTime $deliveryTimeExpiresIso deliveryTimeExpiresIso
     *
     * @return self
     */
    public function setDeliveryTimeExpiresIso($deliveryTimeExpiresIso)
    {
        if (is_null($deliveryTimeExpiresIso)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryTimeExpiresIso');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryTimeExpiresIso', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryTimeExpiresIso'] = $deliveryTimeExpiresIso;

        return $this;
    }

    /**
     * Gets deliveryTimeMax
     *
     * @return int
     */
    public function getDeliveryTimeMax()
    {
        return $this->container['deliveryTimeMax'];
    }

    /**
     * Sets deliveryTimeMax
     *
     * @param int $deliveryTimeMax deliveryTimeMax
     *
     * @return self
     */
    public function setDeliveryTimeMax($deliveryTimeMax)
    {
        if (is_null($deliveryTimeMax)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryTimeMax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryTimeMax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryTimeMax'] = $deliveryTimeMax;

        return $this;
    }

    /**
     * Gets deliveryTimeMin
     *
     * @return int
     */
    public function getDeliveryTimeMin()
    {
        return $this->container['deliveryTimeMin'];
    }

    /**
     * Sets deliveryTimeMin
     *
     * @param int $deliveryTimeMin deliveryTimeMin
     *
     * @return self
     */
    public function setDeliveryTimeMin($deliveryTimeMin)
    {
        if (is_null($deliveryTimeMin)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryTimeMin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryTimeMin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryTimeMin'] = $deliveryTimeMin;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Mirakl\Model\Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Mirakl\Model\Currency $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets storefront
     *
     * @return \OpenAPI\Client\Mirakl\Model\Storefront
     */
    public function getStorefront()
    {
        return $this->container['storefront'];
    }

    /**
     * Sets storefront
     *
     * @param \OpenAPI\Client\Mirakl\Model\Storefront $storefront storefront
     *
     * @return self
     */
    public function setStorefront($storefront)
    {
        if (is_null($storefront)) {
            throw new \InvalidArgumentException('non-nullable storefront cannot be null');
        }
        $this->container['storefront'] = $storefront;

        return $this;
    }

    /**
     * Gets unitCondition
     *
     * @return string
     */
    public function getUnitCondition()
    {
        return $this->container['unitCondition'];
    }

    /**
     * Sets unitCondition
     *
     * @param string $unitCondition unitCondition
     *
     * @return self
     */
    public function setUnitCondition($unitCondition)
    {
        if (is_null($unitCondition)) {
            array_push($this->openAPINullablesSetToNull, 'unitCondition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unitCondition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unitCondition'] = $unitCondition;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets revenueNet
     *
     * @return int
     */
    public function getRevenueNet()
    {
        return $this->container['revenueNet'];
    }

    /**
     * Sets revenueNet
     *
     * @param int $revenueNet revenueNet
     *
     * @return self
     */
    public function setRevenueNet($revenueNet)
    {
        if (is_null($revenueNet)) {
            throw new \InvalidArgumentException('non-nullable revenueNet cannot be null');
        }
        $this->container['revenueNet'] = $revenueNet;

        return $this;
    }

    /**
     * Gets revenueGross
     *
     * @return int
     */
    public function getRevenueGross()
    {
        return $this->container['revenueGross'];
    }

    /**
     * Sets revenueGross
     *
     * @param int $revenueGross revenueGross
     *
     * @return self
     */
    public function setRevenueGross($revenueGross)
    {
        if (is_null($revenueGross)) {
            throw new \InvalidArgumentException('non-nullable revenueGross cannot be null');
        }
        $this->container['revenueGross'] = $revenueGross;

        return $this;
    }

    /**
     * Gets idOffer
     *
     * @return string
     */
    public function getIdOffer()
    {
        return $this->container['idOffer'];
    }

    /**
     * Sets idOffer
     *
     * @param string $idOffer idOffer
     *
     * @return self
     */
    public function setIdOffer($idOffer)
    {
        if (is_null($idOffer)) {
            array_push($this->openAPINullablesSetToNull, 'idOffer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idOffer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idOffer'] = $idOffer;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Mirakl\Model\OrderUnitStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Mirakl\Model\OrderUnitStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tsUpdatedIso
     *
     * @return \DateTime
     */
    public function getTsUpdatedIso()
    {
        return $this->container['tsUpdatedIso'];
    }

    /**
     * Sets tsUpdatedIso
     *
     * @param \DateTime $tsUpdatedIso tsUpdatedIso
     *
     * @return self
     */
    public function setTsUpdatedIso($tsUpdatedIso)
    {
        if (is_null($tsUpdatedIso)) {
            throw new \InvalidArgumentException('non-nullable tsUpdatedIso cannot be null');
        }
        $this->container['tsUpdatedIso'] = $tsUpdatedIso;

        return $this;
    }

    /**
     * Gets isMarketplaceDeemedSupplier
     *
     * @return bool
     */
    public function getIsMarketplaceDeemedSupplier()
    {
        return $this->container['isMarketplaceDeemedSupplier'];
    }

    /**
     * Sets isMarketplaceDeemedSupplier
     *
     * @param bool $isMarketplaceDeemedSupplier isMarketplaceDeemedSupplier
     *
     * @return self
     */
    public function setIsMarketplaceDeemedSupplier($isMarketplaceDeemedSupplier)
    {
        if (is_null($isMarketplaceDeemedSupplier)) {
            throw new \InvalidArgumentException('non-nullable isMarketplaceDeemedSupplier cannot be null');
        }
        $this->container['isMarketplaceDeemedSupplier'] = $isMarketplaceDeemedSupplier;

        return $this;
    }

    /**
     * Gets tsCreatedIso
     *
     * @return \DateTime
     */
    public function getTsCreatedIso()
    {
        return $this->container['tsCreatedIso'];
    }

    /**
     * Sets tsCreatedIso
     *
     * @param \DateTime $tsCreatedIso tsCreatedIso
     *
     * @return self
     */
    public function setTsCreatedIso($tsCreatedIso)
    {
        if (is_null($tsCreatedIso)) {
            throw new \InvalidArgumentException('non-nullable tsCreatedIso cannot be null');
        }
        $this->container['tsCreatedIso'] = $tsCreatedIso;

        return $this;
    }

    /**
     * Gets idOrder
     *
     * @return string
     */
    public function getIdOrder()
    {
        return $this->container['idOrder'];
    }

    /**
     * Sets idOrder
     *
     * @param string $idOrder idOrder
     *
     * @return self
     */
    public function setIdOrder($idOrder)
    {
        if (is_null($idOrder)) {
            throw new \InvalidArgumentException('non-nullable idOrder cannot be null');
        }
        $this->container['idOrder'] = $idOrder;

        return $this;
    }

    /**
     * Gets idOrderUnit
     *
     * @return int
     */
    public function getIdOrderUnit()
    {
        return $this->container['idOrderUnit'];
    }

    /**
     * Sets idOrderUnit
     *
     * @param int $idOrderUnit idOrderUnit
     *
     * @return self
     */
    public function setIdOrderUnit($idOrderUnit)
    {
        if (is_null($idOrderUnit)) {
            throw new \InvalidArgumentException('non-nullable idOrderUnit cannot be null');
        }
        $this->container['idOrderUnit'] = $idOrderUnit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


