<?php
/**
 * P11Response200ProductsOffers
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * P11Response200ProductsOffers Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class P11Response200ProductsOffers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'P11_Response_200_Products_Offers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'allPrices' => '\OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersAllPrices[]',
        'allowQuoteRequests' => 'bool',
        'applicablePricing' => '\OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersApplicablePricing',
        'currencyIsoCode' => 'string',
        'description' => 'string',
        'ecoContributions' => '\OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersEcoContributions[]',
        'inactivityReasons' => 'string[]',
        'isProfessional' => 'bool',
        'leadtimeToShip' => 'int',
        'minShippingPrice' => 'float',
        'minShippingPriceAdditional' => 'float',
        'minShippingType' => 'string',
        'minShippingZone' => 'string',
        'nbEvaluation' => 'int',
        'price' => 'float',
        'priceAdditionalInfo' => 'string',
        'shippingDeadline' => '\DateTime',
        'shippingTypes' => '\OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersShippingTypes[]',
        'shopGrade' => 'float',
        'shopName' => 'string',
        'stateCode' => 'string',
        'totalPrice' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'allPrices' => null,
        'allowQuoteRequests' => null,
        'applicablePricing' => null,
        'currencyIsoCode' => null,
        'description' => null,
        'ecoContributions' => null,
        'inactivityReasons' => null,
        'isProfessional' => null,
        'leadtimeToShip' => 'int32',
        'minShippingPrice' => null,
        'minShippingPriceAdditional' => null,
        'minShippingType' => null,
        'minShippingZone' => null,
        'nbEvaluation' => 'int64',
        'price' => null,
        'priceAdditionalInfo' => null,
        'shippingDeadline' => 'date-time',
        'shippingTypes' => null,
        'shopGrade' => null,
        'shopName' => null,
        'stateCode' => null,
        'totalPrice' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'active' => false,
        'allPrices' => false,
        'allowQuoteRequests' => false,
        'applicablePricing' => false,
        'currencyIsoCode' => false,
        'description' => false,
        'ecoContributions' => false,
        'inactivityReasons' => false,
        'isProfessional' => false,
        'leadtimeToShip' => false,
        'minShippingPrice' => false,
        'minShippingPriceAdditional' => false,
        'minShippingType' => false,
        'minShippingZone' => false,
        'nbEvaluation' => false,
        'price' => false,
        'priceAdditionalInfo' => false,
        'shippingDeadline' => false,
        'shippingTypes' => false,
        'shopGrade' => false,
        'shopName' => false,
        'stateCode' => false,
        'totalPrice' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'allPrices' => 'all_prices',
        'allowQuoteRequests' => 'allow_quote_requests',
        'applicablePricing' => 'applicable_pricing',
        'currencyIsoCode' => 'currency_iso_code',
        'description' => 'description',
        'ecoContributions' => 'eco_contributions',
        'inactivityReasons' => 'inactivity_reasons',
        'isProfessional' => 'is_professional',
        'leadtimeToShip' => 'leadtime_to_ship',
        'minShippingPrice' => 'min_shipping_price',
        'minShippingPriceAdditional' => 'min_shipping_price_additional',
        'minShippingType' => 'min_shipping_type',
        'minShippingZone' => 'min_shipping_zone',
        'nbEvaluation' => 'nb_evaluation',
        'price' => 'price',
        'priceAdditionalInfo' => 'price_additional_info',
        'shippingDeadline' => 'shipping_deadline',
        'shippingTypes' => 'shipping_types',
        'shopGrade' => 'shop_grade',
        'shopName' => 'shop_name',
        'stateCode' => 'state_code',
        'totalPrice' => 'total_price'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'allPrices' => 'setAllPrices',
        'allowQuoteRequests' => 'setAllowQuoteRequests',
        'applicablePricing' => 'setApplicablePricing',
        'currencyIsoCode' => 'setCurrencyIsoCode',
        'description' => 'setDescription',
        'ecoContributions' => 'setEcoContributions',
        'inactivityReasons' => 'setInactivityReasons',
        'isProfessional' => 'setIsProfessional',
        'leadtimeToShip' => 'setLeadtimeToShip',
        'minShippingPrice' => 'setMinShippingPrice',
        'minShippingPriceAdditional' => 'setMinShippingPriceAdditional',
        'minShippingType' => 'setMinShippingType',
        'minShippingZone' => 'setMinShippingZone',
        'nbEvaluation' => 'setNbEvaluation',
        'price' => 'setPrice',
        'priceAdditionalInfo' => 'setPriceAdditionalInfo',
        'shippingDeadline' => 'setShippingDeadline',
        'shippingTypes' => 'setShippingTypes',
        'shopGrade' => 'setShopGrade',
        'shopName' => 'setShopName',
        'stateCode' => 'setStateCode',
        'totalPrice' => 'setTotalPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'allPrices' => 'getAllPrices',
        'allowQuoteRequests' => 'getAllowQuoteRequests',
        'applicablePricing' => 'getApplicablePricing',
        'currencyIsoCode' => 'getCurrencyIsoCode',
        'description' => 'getDescription',
        'ecoContributions' => 'getEcoContributions',
        'inactivityReasons' => 'getInactivityReasons',
        'isProfessional' => 'getIsProfessional',
        'leadtimeToShip' => 'getLeadtimeToShip',
        'minShippingPrice' => 'getMinShippingPrice',
        'minShippingPriceAdditional' => 'getMinShippingPriceAdditional',
        'minShippingType' => 'getMinShippingType',
        'minShippingZone' => 'getMinShippingZone',
        'nbEvaluation' => 'getNbEvaluation',
        'price' => 'getPrice',
        'priceAdditionalInfo' => 'getPriceAdditionalInfo',
        'shippingDeadline' => 'getShippingDeadline',
        'shippingTypes' => 'getShippingTypes',
        'shopGrade' => 'getShopGrade',
        'shopName' => 'getShopName',
        'stateCode' => 'getStateCode',
        'totalPrice' => 'getTotalPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('allPrices', $data ?? [], null);
        $this->setIfExists('allowQuoteRequests', $data ?? [], null);
        $this->setIfExists('applicablePricing', $data ?? [], null);
        $this->setIfExists('currencyIsoCode', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('ecoContributions', $data ?? [], null);
        $this->setIfExists('inactivityReasons', $data ?? [], null);
        $this->setIfExists('isProfessional', $data ?? [], null);
        $this->setIfExists('leadtimeToShip', $data ?? [], null);
        $this->setIfExists('minShippingPrice', $data ?? [], null);
        $this->setIfExists('minShippingPriceAdditional', $data ?? [], null);
        $this->setIfExists('minShippingType', $data ?? [], null);
        $this->setIfExists('minShippingZone', $data ?? [], null);
        $this->setIfExists('nbEvaluation', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('priceAdditionalInfo', $data ?? [], null);
        $this->setIfExists('shippingDeadline', $data ?? [], null);
        $this->setIfExists('shippingTypes', $data ?? [], null);
        $this->setIfExists('shopGrade', $data ?? [], null);
        $this->setIfExists('shopName', $data ?? [], null);
        $this->setIfExists('stateCode', $data ?? [], null);
        $this->setIfExists('totalPrice', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['ecoContributions']) && (count($this->container['ecoContributions']) > 20)) {
            $invalidProperties[] = "invalid value for 'ecoContributions', number of items must be less than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Is the offer active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets allPrices
     *
     * @return \OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersAllPrices[]|null
     */
    public function getAllPrices()
    {
        return $this->container['allPrices'];
    }

    /**
     * Sets allPrices
     *
     * @param \OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersAllPrices[]|null $allPrices All prices for the offer <br/> For Dropship specifically: the list of purchasing prices of the offer, also referred to as costs or wholesale prices
     *
     * @return self
     */
    public function setAllPrices($allPrices)
    {
        if (is_null($allPrices)) {
            throw new \InvalidArgumentException('non-nullable allPrices cannot be null');
        }
        $this->container['allPrices'] = $allPrices;

        return $this;
    }

    /**
     * Gets allowQuoteRequests
     *
     * @return bool|null
     */
    public function getAllowQuoteRequests()
    {
        return $this->container['allowQuoteRequests'];
    }

    /**
     * Sets allowQuoteRequests
     *
     * @param bool|null $allowQuoteRequests Whether the offer is eligible for quotation
     *
     * @return self
     */
    public function setAllowQuoteRequests($allowQuoteRequests)
    {
        if (is_null($allowQuoteRequests)) {
            throw new \InvalidArgumentException('non-nullable allowQuoteRequests cannot be null');
        }
        $this->container['allowQuoteRequests'] = $allowQuoteRequests;

        return $this;
    }

    /**
     * Gets applicablePricing
     *
     * @return \OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersApplicablePricing|null
     */
    public function getApplicablePricing()
    {
        return $this->container['applicablePricing'];
    }

    /**
     * Sets applicablePricing
     *
     * @param \OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersApplicablePricing|null $applicablePricing applicablePricing
     *
     * @return self
     */
    public function setApplicablePricing($applicablePricing)
    {
        if (is_null($applicablePricing)) {
            throw new \InvalidArgumentException('non-nullable applicablePricing cannot be null');
        }
        $this->container['applicablePricing'] = $applicablePricing;

        return $this;
    }

    /**
     * Gets currencyIsoCode
     *
     * @return string|null
     */
    public function getCurrencyIsoCode()
    {
        return $this->container['currencyIsoCode'];
    }

    /**
     * Sets currencyIsoCode
     *
     * @param string|null $currencyIsoCode The currency of the shop (iso format)
     *
     * @return self
     */
    public function setCurrencyIsoCode($currencyIsoCode)
    {
        if (is_null($currencyIsoCode)) {
            throw new \InvalidArgumentException('non-nullable currencyIsoCode cannot be null');
        }
        $this->container['currencyIsoCode'] = $currencyIsoCode;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Offer description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ecoContributions
     *
     * @return \OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersEcoContributions[]|null
     */
    public function getEcoContributions()
    {
        return $this->container['ecoContributions'];
    }

    /**
     * Sets ecoContributions
     *
     * @param \OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersEcoContributions[]|null $ecoContributions Eco-contributions of the offer - only available if the operator setting <em>Activate data collection related to circular economy regulations</em> has been enabled.
     *
     * @return self
     */
    public function setEcoContributions($ecoContributions)
    {
        if (is_null($ecoContributions)) {
            throw new \InvalidArgumentException('non-nullable ecoContributions cannot be null');
        }

        if ((count($ecoContributions) > 20)) {
            throw new \InvalidArgumentException('invalid value for $ecoContributions when calling P11Response200ProductsOffers., number of items must be less than or equal to 20.');
        }
        $this->container['ecoContributions'] = $ecoContributions;

        return $this;
    }

    /**
     * Gets inactivityReasons
     *
     * @return string[]|null
     */
    public function getInactivityReasons()
    {
        return $this->container['inactivityReasons'];
    }

    /**
     * Sets inactivityReasons
     *
     * @param string[]|null $inactivityReasons Reasons for offers inactivity, mandatory if an offer is inactive
     *
     * @return self
     */
    public function setInactivityReasons($inactivityReasons)
    {
        if (is_null($inactivityReasons)) {
            throw new \InvalidArgumentException('non-nullable inactivityReasons cannot be null');
        }
        $this->container['inactivityReasons'] = $inactivityReasons;

        return $this;
    }

    /**
     * Gets isProfessional
     *
     * @return bool|null
     */
    public function getIsProfessional()
    {
        return $this->container['isProfessional'];
    }

    /**
     * Sets isProfessional
     *
     * @param bool|null $isProfessional Whether or not the shop is professional
     *
     * @return self
     */
    public function setIsProfessional($isProfessional)
    {
        if (is_null($isProfessional)) {
            throw new \InvalidArgumentException('non-nullable isProfessional cannot be null');
        }
        $this->container['isProfessional'] = $isProfessional;

        return $this;
    }

    /**
     * Gets leadtimeToShip
     *
     * @return int|null
     */
    public function getLeadtimeToShip()
    {
        return $this->container['leadtimeToShip'];
    }

    /**
     * Sets leadtimeToShip
     *
     * @param int|null $leadtimeToShip Offer's lead time to ship value. If this value has been set to 0, value is returned as 1 (unless platform's default lead time to ship value is also 0). If no lead time to ship was specified for the offer, platform's default value is returned.
     *
     * @return self
     */
    public function setLeadtimeToShip($leadtimeToShip)
    {
        if (is_null($leadtimeToShip)) {
            throw new \InvalidArgumentException('non-nullable leadtimeToShip cannot be null');
        }
        $this->container['leadtimeToShip'] = $leadtimeToShip;

        return $this;
    }

    /**
     * Gets minShippingPrice
     *
     * @return float|null
     */
    public function getMinShippingPrice()
    {
        return $this->container['minShippingPrice'];
    }

    /**
     * Sets minShippingPrice
     *
     * @param float|null $minShippingPrice Unit price of the minimum shipping rate
     *
     * @return self
     */
    public function setMinShippingPrice($minShippingPrice)
    {
        if (is_null($minShippingPrice)) {
            throw new \InvalidArgumentException('non-nullable minShippingPrice cannot be null');
        }
        $this->container['minShippingPrice'] = $minShippingPrice;

        return $this;
    }

    /**
     * Gets minShippingPriceAdditional
     *
     * @return float|null
     */
    public function getMinShippingPriceAdditional()
    {
        return $this->container['minShippingPriceAdditional'];
    }

    /**
     * Sets minShippingPriceAdditional
     *
     * @param float|null $minShippingPriceAdditional Additional unit price associated to the minimum shipping rate
     *
     * @return self
     */
    public function setMinShippingPriceAdditional($minShippingPriceAdditional)
    {
        if (is_null($minShippingPriceAdditional)) {
            throw new \InvalidArgumentException('non-nullable minShippingPriceAdditional cannot be null');
        }
        $this->container['minShippingPriceAdditional'] = $minShippingPriceAdditional;

        return $this;
    }

    /**
     * Gets minShippingType
     *
     * @return string|null
     */
    public function getMinShippingType()
    {
        return $this->container['minShippingType'];
    }

    /**
     * Sets minShippingType
     *
     * @param string|null $minShippingType Code of the shipping type associated to the minimum shipping rate
     *
     * @return self
     */
    public function setMinShippingType($minShippingType)
    {
        if (is_null($minShippingType)) {
            throw new \InvalidArgumentException('non-nullable minShippingType cannot be null');
        }
        $this->container['minShippingType'] = $minShippingType;

        return $this;
    }

    /**
     * Gets minShippingZone
     *
     * @return string|null
     */
    public function getMinShippingZone()
    {
        return $this->container['minShippingZone'];
    }

    /**
     * Sets minShippingZone
     *
     * @param string|null $minShippingZone Code of the shipping zone associated to the minimum shipping rate
     *
     * @return self
     */
    public function setMinShippingZone($minShippingZone)
    {
        if (is_null($minShippingZone)) {
            throw new \InvalidArgumentException('non-nullable minShippingZone cannot be null');
        }
        $this->container['minShippingZone'] = $minShippingZone;

        return $this;
    }

    /**
     * Gets nbEvaluation
     *
     * @return int|null
     */
    public function getNbEvaluation()
    {
        return $this->container['nbEvaluation'];
    }

    /**
     * Sets nbEvaluation
     *
     * @param int|null $nbEvaluation Number of customers evaluations
     *
     * @return self
     */
    public function setNbEvaluation($nbEvaluation)
    {
        if (is_null($nbEvaluation)) {
            throw new \InvalidArgumentException('non-nullable nbEvaluation cannot be null');
        }
        $this->container['nbEvaluation'] = $nbEvaluation;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Price of the offer <br/> For Dropship specifically: the purchasing price of the offer, also referred to as cost or wholesale price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets priceAdditionalInfo
     *
     * @return string|null
     */
    public function getPriceAdditionalInfo()
    {
        return $this->container['priceAdditionalInfo'];
    }

    /**
     * Sets priceAdditionalInfo
     *
     * @param string|null $priceAdditionalInfo Additional price information for the offer
     *
     * @return self
     */
    public function setPriceAdditionalInfo($priceAdditionalInfo)
    {
        if (is_null($priceAdditionalInfo)) {
            throw new \InvalidArgumentException('non-nullable priceAdditionalInfo cannot be null');
        }
        $this->container['priceAdditionalInfo'] = $priceAdditionalInfo;

        return $this;
    }

    /**
     * Gets shippingDeadline
     *
     * @return \DateTime|null
     */
    public function getShippingDeadline()
    {
        return $this->container['shippingDeadline'];
    }

    /**
     * Sets shippingDeadline
     *
     * @param \DateTime|null $shippingDeadline Estimated shipping date, that includes business closing days and cut-off configured on the platform. Add the earliest and latest delivery times to calculate the estimated delivery date to customers
     *
     * @return self
     */
    public function setShippingDeadline($shippingDeadline)
    {
        if (is_null($shippingDeadline)) {
            throw new \InvalidArgumentException('non-nullable shippingDeadline cannot be null');
        }
        $this->container['shippingDeadline'] = $shippingDeadline;

        return $this;
    }

    /**
     * Gets shippingTypes
     *
     * @return \OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersShippingTypes[]|null
     */
    public function getShippingTypes()
    {
        return $this->container['shippingTypes'];
    }

    /**
     * Sets shippingTypes
     *
     * @param \OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersShippingTypes[]|null $shippingTypes List of shipping types compatible with the given offer
     *
     * @return self
     */
    public function setShippingTypes($shippingTypes)
    {
        if (is_null($shippingTypes)) {
            throw new \InvalidArgumentException('non-nullable shippingTypes cannot be null');
        }
        $this->container['shippingTypes'] = $shippingTypes;

        return $this;
    }

    /**
     * Gets shopGrade
     *
     * @return float|null
     */
    public function getShopGrade()
    {
        return $this->container['shopGrade'];
    }

    /**
     * Sets shopGrade
     *
     * @param float|null $shopGrade Grade of the shop which proposes the offer
     *
     * @return self
     */
    public function setShopGrade($shopGrade)
    {
        if (is_null($shopGrade)) {
            throw new \InvalidArgumentException('non-nullable shopGrade cannot be null');
        }
        $this->container['shopGrade'] = $shopGrade;

        return $this;
    }

    /**
     * Gets shopName
     *
     * @return string|null
     */
    public function getShopName()
    {
        return $this->container['shopName'];
    }

    /**
     * Sets shopName
     *
     * @param string|null $shopName Name of the shop which proposes the offer
     *
     * @return self
     */
    public function setShopName($shopName)
    {
        if (is_null($shopName)) {
            throw new \InvalidArgumentException('non-nullable shopName cannot be null');
        }
        $this->container['shopName'] = $shopName;

        return $this;
    }

    /**
     * Gets stateCode
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['stateCode'];
    }

    /**
     * Sets stateCode
     *
     * @param string|null $stateCode Offer condition
     *
     * @return self
     */
    public function setStateCode($stateCode)
    {
        if (is_null($stateCode)) {
            throw new \InvalidArgumentException('non-nullable stateCode cannot be null');
        }
        $this->container['stateCode'] = $stateCode;

        return $this;
    }

    /**
     * Gets totalPrice
     *
     * @return float|null
     */
    public function getTotalPrice()
    {
        return $this->container['totalPrice'];
    }

    /**
     * Sets totalPrice
     *
     * @param float|null $totalPrice Total price of the offer (price + minimum shipping rate) <br/> For Dropship specifically: the purchasing price of the offer + minimum shipping rate
     *
     * @return self
     */
    public function setTotalPrice($totalPrice)
    {
        if (is_null($totalPrice)) {
            throw new \InvalidArgumentException('non-nullable totalPrice cannot be null');
        }
        $this->container['totalPrice'] = $totalPrice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


