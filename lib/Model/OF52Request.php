<?php
/**
 * OF52Request
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * OF52Request Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OF52Request implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OF52_Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channelCodes' => 'string[]',
        'exportType' => 'string',
        'includeFields' => 'string[]',
        'includeInactiveOffers' => 'bool',
        'itemsPerChunk' => 'int',
        'lastRequestDate' => '\DateTime',
        'megabytesPerChunk' => 'int',
        'renameFields' => 'array<string,string>',
        'shippingZones' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channelCodes' => null,
        'exportType' => null,
        'includeFields' => null,
        'includeInactiveOffers' => null,
        'itemsPerChunk' => 'int64',
        'lastRequestDate' => 'date-time',
        'megabytesPerChunk' => 'int64',
        'renameFields' => null,
        'shippingZones' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'channelCodes' => false,
        'exportType' => false,
        'includeFields' => false,
        'includeInactiveOffers' => false,
        'itemsPerChunk' => false,
        'lastRequestDate' => false,
        'megabytesPerChunk' => false,
        'renameFields' => false,
        'shippingZones' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channelCodes' => 'channel_codes',
        'exportType' => 'export_type',
        'includeFields' => 'include_fields',
        'includeInactiveOffers' => 'include_inactive_offers',
        'itemsPerChunk' => 'items_per_chunk',
        'lastRequestDate' => 'last_request_date',
        'megabytesPerChunk' => 'megabytes_per_chunk',
        'renameFields' => 'rename_fields',
        'shippingZones' => 'shipping_zones'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channelCodes' => 'setChannelCodes',
        'exportType' => 'setExportType',
        'includeFields' => 'setIncludeFields',
        'includeInactiveOffers' => 'setIncludeInactiveOffers',
        'itemsPerChunk' => 'setItemsPerChunk',
        'lastRequestDate' => 'setLastRequestDate',
        'megabytesPerChunk' => 'setMegabytesPerChunk',
        'renameFields' => 'setRenameFields',
        'shippingZones' => 'setShippingZones'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channelCodes' => 'getChannelCodes',
        'exportType' => 'getExportType',
        'includeFields' => 'getIncludeFields',
        'includeInactiveOffers' => 'getIncludeInactiveOffers',
        'itemsPerChunk' => 'getItemsPerChunk',
        'lastRequestDate' => 'getLastRequestDate',
        'megabytesPerChunk' => 'getMegabytesPerChunk',
        'renameFields' => 'getRenameFields',
        'shippingZones' => 'getShippingZones'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('channelCodes', $data ?? [], null);
        $this->setIfExists('exportType', $data ?? [], null);
        $this->setIfExists('includeFields', $data ?? [], null);
        $this->setIfExists('includeInactiveOffers', $data ?? [], false);
        $this->setIfExists('itemsPerChunk', $data ?? [], null);
        $this->setIfExists('lastRequestDate', $data ?? [], null);
        $this->setIfExists('megabytesPerChunk', $data ?? [], null);
        $this->setIfExists('renameFields', $data ?? [], null);
        $this->setIfExists('shippingZones', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['itemsPerChunk']) && ($this->container['itemsPerChunk'] > 1000000)) {
            $invalidProperties[] = "invalid value for 'itemsPerChunk', must be smaller than or equal to 1000000.";
        }

        if (!is_null($this->container['itemsPerChunk']) && ($this->container['itemsPerChunk'] < 10000)) {
            $invalidProperties[] = "invalid value for 'itemsPerChunk', must be bigger than or equal to 10000.";
        }

        if (!is_null($this->container['megabytesPerChunk']) && ($this->container['megabytesPerChunk'] > 1000)) {
            $invalidProperties[] = "invalid value for 'megabytesPerChunk', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['megabytesPerChunk']) && ($this->container['megabytesPerChunk'] < 10)) {
            $invalidProperties[] = "invalid value for 'megabytesPerChunk', must be bigger than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channelCodes
     *
     * @return string[]|null
     */
    public function getChannelCodes()
    {
        return $this->container['channelCodes'];
    }

    /**
     * Sets channelCodes
     *
     * @param string[]|null $channelCodes List of the channel codes to filter with. If specified, only offers that can be sold on the specified channel(s) will be returned. If not, offers will be returned regardless of their channels.
     *
     * @return self
     */
    public function setChannelCodes($channelCodes)
    {
        if (is_null($channelCodes)) {
            throw new \InvalidArgumentException('non-nullable channelCodes cannot be null');
        }
        $this->container['channelCodes'] = $channelCodes;

        return $this;
    }

    /**
     * Gets exportType
     *
     * @return string|null
     */
    public function getExportType()
    {
        return $this->container['exportType'];
    }

    /**
     * Sets exportType
     *
     * @param string|null $exportType Format of the generated files: CSV or JSON (value is either <code>text/csv</code> or <code>application/json</code>). Default to <code>text/csv</code>.
     *
     * @return self
     */
    public function setExportType($exportType)
    {
        if (is_null($exportType)) {
            throw new \InvalidArgumentException('non-nullable exportType cannot be null');
        }
        $this->container['exportType'] = $exportType;

        return $this;
    }

    /**
     * Gets includeFields
     *
     * @return string[]|null
     */
    public function getIncludeFields()
    {
        return $this->container['includeFields'];
    }

    /**
     * Sets includeFields
     *
     * @param string[]|null $includeFields Specify which columns (CSV) or fields (JSON) will be returned. If specified, only the listed columns/fields will be returned, otherwise all will be returned. If combined with <em>rename_fields</em>, <em>include_fields</em> must use the original header/field names.
     *
     * @return self
     */
    public function setIncludeFields($includeFields)
    {
        if (is_null($includeFields)) {
            throw new \InvalidArgumentException('non-nullable includeFields cannot be null');
        }
        $this->container['includeFields'] = $includeFields;

        return $this;
    }

    /**
     * Gets includeInactiveOffers
     *
     * @return bool|null
     */
    public function getIncludeInactiveOffers()
    {
        return $this->container['includeInactiveOffers'];
    }

    /**
     * Sets includeInactiveOffers
     *
     * @param bool|null $includeInactiveOffers When calling the API in full mode (i.e. when no <i>last_request_date</i> is provided), inactive offers are not returned. To retrieve both active and inactive offers, set this field to true.<br />When calling the API in differential mode (i.e. when the <i>last_request_date</i> is provided), both active and inactive offers are returned. This field cannot be used in differential mode otherwise the call fails.
     *
     * @return self
     */
    public function setIncludeInactiveOffers($includeInactiveOffers)
    {
        if (is_null($includeInactiveOffers)) {
            throw new \InvalidArgumentException('non-nullable includeInactiveOffers cannot be null');
        }
        $this->container['includeInactiveOffers'] = $includeInactiveOffers;

        return $this;
    }

    /**
     * Gets itemsPerChunk
     *
     * @return int|null
     */
    public function getItemsPerChunk()
    {
        return $this->container['itemsPerChunk'];
    }

    /**
     * Sets itemsPerChunk
     *
     * @param int|null $itemsPerChunk The maximum number of items per chunk
     *
     * @return self
     */
    public function setItemsPerChunk($itemsPerChunk)
    {
        if (is_null($itemsPerChunk)) {
            throw new \InvalidArgumentException('non-nullable itemsPerChunk cannot be null');
        }

        if (($itemsPerChunk > 1000000)) {
            throw new \InvalidArgumentException('invalid value for $itemsPerChunk when calling OF52Request., must be smaller than or equal to 1000000.');
        }
        if (($itemsPerChunk < 10000)) {
            throw new \InvalidArgumentException('invalid value for $itemsPerChunk when calling OF52Request., must be bigger than or equal to 10000.');
        }

        $this->container['itemsPerChunk'] = $itemsPerChunk;

        return $this;
    }

    /**
     * Gets lastRequestDate
     *
     * @return \DateTime|null
     */
    public function getLastRequestDate()
    {
        return $this->container['lastRequestDate'];
    }

    /**
     * Sets lastRequestDate
     *
     * @param \DateTime|null $lastRequestDate Date and time of your last request.<br />If provided, retrieves all offers updated since this date and time, including deleted and inactive offers.<br />If not provided, retrieves all active offers only, unless otherwise specified in the <i>include_inactive_offers</i> field.
     *
     * @return self
     */
    public function setLastRequestDate($lastRequestDate)
    {
        if (is_null($lastRequestDate)) {
            throw new \InvalidArgumentException('non-nullable lastRequestDate cannot be null');
        }
        $this->container['lastRequestDate'] = $lastRequestDate;

        return $this;
    }

    /**
     * Gets megabytesPerChunk
     *
     * @return int|null
     */
    public function getMegabytesPerChunk()
    {
        return $this->container['megabytesPerChunk'];
    }

    /**
     * Sets megabytesPerChunk
     *
     * @param int|null $megabytesPerChunk The maximum size in megabytes of a chunk
     *
     * @return self
     */
    public function setMegabytesPerChunk($megabytesPerChunk)
    {
        if (is_null($megabytesPerChunk)) {
            throw new \InvalidArgumentException('non-nullable megabytesPerChunk cannot be null');
        }

        if (($megabytesPerChunk > 1000)) {
            throw new \InvalidArgumentException('invalid value for $megabytesPerChunk when calling OF52Request., must be smaller than or equal to 1000.');
        }
        if (($megabytesPerChunk < 10)) {
            throw new \InvalidArgumentException('invalid value for $megabytesPerChunk when calling OF52Request., must be bigger than or equal to 10.');
        }

        $this->container['megabytesPerChunk'] = $megabytesPerChunk;

        return $this;
    }

    /**
     * Gets renameFields
     *
     * @return array<string,string>|null
     */
    public function getRenameFields()
    {
        return $this->container['renameFields'];
    }

    /**
     * Sets renameFields
     *
     * @param array<string,string>|null $renameFields This is only supported for CSV export. Can be used to modify the name of the CSV headers. The expected format is a JSON object with the original fields as keys and the substitute as value. <pre>{\"offer-id\": \"offerId\", \"shop-name\":\"shopName\"}</pre>
     *
     * @return self
     */
    public function setRenameFields($renameFields)
    {
        if (is_null($renameFields)) {
            throw new \InvalidArgumentException('non-nullable renameFields cannot be null');
        }
        $this->container['renameFields'] = $renameFields;

        return $this;
    }

    /**
     * Gets shippingZones
     *
     * @return string[]|null
     */
    public function getShippingZones()
    {
        return $this->container['shippingZones'];
    }

    /**
     * Sets shippingZones
     *
     * @param string[]|null $shippingZones If the setting <i>Export shipping charges and delivery times</i> has been enabled, list of the shipping zones codes to filter with. If specified, only shipping information linked to the given zones will be returned. Otherwise, all shipping information for all zones will be returned.
     *
     * @return self
     */
    public function setShippingZones($shippingZones)
    {
        if (is_null($shippingZones)) {
            throw new \InvalidArgumentException('non-nullable shippingZones cannot be null');
        }
        $this->container['shippingZones'] = $shippingZones;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


