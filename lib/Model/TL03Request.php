<?php
/**
 * TL03Request
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * TL03Request Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TL03Request implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TL03_Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountingDocumentId' => 'string',
        'accountingDocumentNumber' => 'string',
        'dateCreatedFrom' => '\DateTime',
        'dateCreatedTo' => '\DateTime',
        'itemsPerChunk' => 'int',
        'lastUpdatedFrom' => '\DateTime',
        'megabytesPerChunk' => 'int',
        'orderId' => 'string[]',
        'orderLineId' => 'string[]',
        'orderReferenceForCustomer' => 'string[]',
        'orderReferenceForSeller' => 'string[]',
        'paymentState' => 'string[]',
        'paymentVoucherNumber' => 'string',
        'shopDomain' => 'string[]',
        'shopId' => 'int',
        'shopModel' => 'string[]',
        'transactionDateFrom' => '\DateTime',
        'transactionDateTo' => '\DateTime',
        'transactionType' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accountingDocumentId' => null,
        'accountingDocumentNumber' => null,
        'dateCreatedFrom' => 'date-time',
        'dateCreatedTo' => 'date-time',
        'itemsPerChunk' => 'int64',
        'lastUpdatedFrom' => 'date-time',
        'megabytesPerChunk' => 'int64',
        'orderId' => null,
        'orderLineId' => null,
        'orderReferenceForCustomer' => null,
        'orderReferenceForSeller' => null,
        'paymentState' => null,
        'paymentVoucherNumber' => null,
        'shopDomain' => null,
        'shopId' => 'int64',
        'shopModel' => null,
        'transactionDateFrom' => 'date-time',
        'transactionDateTo' => 'date-time',
        'transactionType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accountingDocumentId' => false,
        'accountingDocumentNumber' => false,
        'dateCreatedFrom' => false,
        'dateCreatedTo' => false,
        'itemsPerChunk' => false,
        'lastUpdatedFrom' => false,
        'megabytesPerChunk' => false,
        'orderId' => false,
        'orderLineId' => false,
        'orderReferenceForCustomer' => false,
        'orderReferenceForSeller' => false,
        'paymentState' => false,
        'paymentVoucherNumber' => false,
        'shopDomain' => false,
        'shopId' => false,
        'shopModel' => false,
        'transactionDateFrom' => false,
        'transactionDateTo' => false,
        'transactionType' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountingDocumentId' => 'accounting_document_id',
        'accountingDocumentNumber' => 'accounting_document_number',
        'dateCreatedFrom' => 'date_created_from',
        'dateCreatedTo' => 'date_created_to',
        'itemsPerChunk' => 'items_per_chunk',
        'lastUpdatedFrom' => 'last_updated_from',
        'megabytesPerChunk' => 'megabytes_per_chunk',
        'orderId' => 'order_id',
        'orderLineId' => 'order_line_id',
        'orderReferenceForCustomer' => 'order_reference_for_customer',
        'orderReferenceForSeller' => 'order_reference_for_seller',
        'paymentState' => 'payment_state',
        'paymentVoucherNumber' => 'payment_voucher_number',
        'shopDomain' => 'shop_domain',
        'shopId' => 'shop_id',
        'shopModel' => 'shop_model',
        'transactionDateFrom' => 'transaction_date_from',
        'transactionDateTo' => 'transaction_date_to',
        'transactionType' => 'transaction_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountingDocumentId' => 'setAccountingDocumentId',
        'accountingDocumentNumber' => 'setAccountingDocumentNumber',
        'dateCreatedFrom' => 'setDateCreatedFrom',
        'dateCreatedTo' => 'setDateCreatedTo',
        'itemsPerChunk' => 'setItemsPerChunk',
        'lastUpdatedFrom' => 'setLastUpdatedFrom',
        'megabytesPerChunk' => 'setMegabytesPerChunk',
        'orderId' => 'setOrderId',
        'orderLineId' => 'setOrderLineId',
        'orderReferenceForCustomer' => 'setOrderReferenceForCustomer',
        'orderReferenceForSeller' => 'setOrderReferenceForSeller',
        'paymentState' => 'setPaymentState',
        'paymentVoucherNumber' => 'setPaymentVoucherNumber',
        'shopDomain' => 'setShopDomain',
        'shopId' => 'setShopId',
        'shopModel' => 'setShopModel',
        'transactionDateFrom' => 'setTransactionDateFrom',
        'transactionDateTo' => 'setTransactionDateTo',
        'transactionType' => 'setTransactionType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountingDocumentId' => 'getAccountingDocumentId',
        'accountingDocumentNumber' => 'getAccountingDocumentNumber',
        'dateCreatedFrom' => 'getDateCreatedFrom',
        'dateCreatedTo' => 'getDateCreatedTo',
        'itemsPerChunk' => 'getItemsPerChunk',
        'lastUpdatedFrom' => 'getLastUpdatedFrom',
        'megabytesPerChunk' => 'getMegabytesPerChunk',
        'orderId' => 'getOrderId',
        'orderLineId' => 'getOrderLineId',
        'orderReferenceForCustomer' => 'getOrderReferenceForCustomer',
        'orderReferenceForSeller' => 'getOrderReferenceForSeller',
        'paymentState' => 'getPaymentState',
        'paymentVoucherNumber' => 'getPaymentVoucherNumber',
        'shopDomain' => 'getShopDomain',
        'shopId' => 'getShopId',
        'shopModel' => 'getShopModel',
        'transactionDateFrom' => 'getTransactionDateFrom',
        'transactionDateTo' => 'getTransactionDateTo',
        'transactionType' => 'getTransactionType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('accountingDocumentId', $data ?? [], null);
        $this->setIfExists('accountingDocumentNumber', $data ?? [], null);
        $this->setIfExists('dateCreatedFrom', $data ?? [], null);
        $this->setIfExists('dateCreatedTo', $data ?? [], null);
        $this->setIfExists('itemsPerChunk', $data ?? [], null);
        $this->setIfExists('lastUpdatedFrom', $data ?? [], null);
        $this->setIfExists('megabytesPerChunk', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('orderLineId', $data ?? [], null);
        $this->setIfExists('orderReferenceForCustomer', $data ?? [], null);
        $this->setIfExists('orderReferenceForSeller', $data ?? [], null);
        $this->setIfExists('paymentState', $data ?? [], null);
        $this->setIfExists('paymentVoucherNumber', $data ?? [], null);
        $this->setIfExists('shopDomain', $data ?? [], null);
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('shopModel', $data ?? [], null);
        $this->setIfExists('transactionDateFrom', $data ?? [], null);
        $this->setIfExists('transactionDateTo', $data ?? [], null);
        $this->setIfExists('transactionType', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['orderId']) && (count($this->container['orderId']) > 100)) {
            $invalidProperties[] = "invalid value for 'orderId', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['orderId']) && (count($this->container['orderId']) < 0)) {
            $invalidProperties[] = "invalid value for 'orderId', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['orderLineId']) && (count($this->container['orderLineId']) > 100)) {
            $invalidProperties[] = "invalid value for 'orderLineId', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['orderLineId']) && (count($this->container['orderLineId']) < 0)) {
            $invalidProperties[] = "invalid value for 'orderLineId', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['orderReferenceForCustomer']) && (count($this->container['orderReferenceForCustomer']) > 100)) {
            $invalidProperties[] = "invalid value for 'orderReferenceForCustomer', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['orderReferenceForCustomer']) && (count($this->container['orderReferenceForCustomer']) < 0)) {
            $invalidProperties[] = "invalid value for 'orderReferenceForCustomer', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['orderReferenceForSeller']) && (count($this->container['orderReferenceForSeller']) > 100)) {
            $invalidProperties[] = "invalid value for 'orderReferenceForSeller', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['orderReferenceForSeller']) && (count($this->container['orderReferenceForSeller']) < 0)) {
            $invalidProperties[] = "invalid value for 'orderReferenceForSeller', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['paymentState']) && (count($this->container['paymentState']) > 100)) {
            $invalidProperties[] = "invalid value for 'paymentState', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['paymentState']) && (count($this->container['paymentState']) < 0)) {
            $invalidProperties[] = "invalid value for 'paymentState', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['shopDomain']) && (count($this->container['shopDomain']) > 100)) {
            $invalidProperties[] = "invalid value for 'shopDomain', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['shopDomain']) && (count($this->container['shopDomain']) < 0)) {
            $invalidProperties[] = "invalid value for 'shopDomain', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['transactionType']) && (count($this->container['transactionType']) > 100)) {
            $invalidProperties[] = "invalid value for 'transactionType', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['transactionType']) && (count($this->container['transactionType']) < 0)) {
            $invalidProperties[] = "invalid value for 'transactionType', number of items must be greater than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountingDocumentId
     *
     * @return string|null
     */
    public function getAccountingDocumentId()
    {
        return $this->container['accountingDocumentId'];
    }

    /**
     * Sets accountingDocumentId
     *
     * @param string|null $accountingDocumentId Accounting document id for filtering. This parameter only filter documents requests of the type: <code>SHOP_BILLING_CYCLE_PURCHASE_ORDER</code>.
     *
     * @return self
     */
    public function setAccountingDocumentId($accountingDocumentId)
    {
        if (is_null($accountingDocumentId)) {
            throw new \InvalidArgumentException('non-nullable accountingDocumentId cannot be null');
        }
        $this->container['accountingDocumentId'] = $accountingDocumentId;

        return $this;
    }

    /**
     * Gets accountingDocumentNumber
     *
     * @return string|null
     */
    public function getAccountingDocumentNumber()
    {
        return $this->container['accountingDocumentNumber'];
    }

    /**
     * Sets accountingDocumentNumber
     *
     * @param string|null $accountingDocumentNumber Accounting document number for filtering.
     *
     * @return self
     */
    public function setAccountingDocumentNumber($accountingDocumentNumber)
    {
        if (is_null($accountingDocumentNumber)) {
            throw new \InvalidArgumentException('non-nullable accountingDocumentNumber cannot be null');
        }
        $this->container['accountingDocumentNumber'] = $accountingDocumentNumber;

        return $this;
    }

    /**
     * Gets dateCreatedFrom
     *
     * @return \DateTime|null
     */
    public function getDateCreatedFrom()
    {
        return $this->container['dateCreatedFrom'];
    }

    /**
     * Sets dateCreatedFrom
     *
     * @param \DateTime|null $dateCreatedFrom Creation date for filtering
     *
     * @return self
     */
    public function setDateCreatedFrom($dateCreatedFrom)
    {
        if (is_null($dateCreatedFrom)) {
            throw new \InvalidArgumentException('non-nullable dateCreatedFrom cannot be null');
        }
        $this->container['dateCreatedFrom'] = $dateCreatedFrom;

        return $this;
    }

    /**
     * Gets dateCreatedTo
     *
     * @return \DateTime|null
     */
    public function getDateCreatedTo()
    {
        return $this->container['dateCreatedTo'];
    }

    /**
     * Sets dateCreatedTo
     *
     * @param \DateTime|null $dateCreatedTo Creation date for filtering
     *
     * @return self
     */
    public function setDateCreatedTo($dateCreatedTo)
    {
        if (is_null($dateCreatedTo)) {
            throw new \InvalidArgumentException('non-nullable dateCreatedTo cannot be null');
        }
        $this->container['dateCreatedTo'] = $dateCreatedTo;

        return $this;
    }

    /**
     * Gets itemsPerChunk
     *
     * @return int|null
     */
    public function getItemsPerChunk()
    {
        return $this->container['itemsPerChunk'];
    }

    /**
     * Sets itemsPerChunk
     *
     * @param int|null $itemsPerChunk The maximum number of items per chunk.
     *
     * @return self
     */
    public function setItemsPerChunk($itemsPerChunk)
    {
        if (is_null($itemsPerChunk)) {
            throw new \InvalidArgumentException('non-nullable itemsPerChunk cannot be null');
        }
        $this->container['itemsPerChunk'] = $itemsPerChunk;

        return $this;
    }

    /**
     * Gets lastUpdatedFrom
     *
     * @return \DateTime|null
     */
    public function getLastUpdatedFrom()
    {
        return $this->container['lastUpdatedFrom'];
    }

    /**
     * Sets lastUpdatedFrom
     *
     * @param \DateTime|null $lastUpdatedFrom Last updated date for filtering
     *
     * @return self
     */
    public function setLastUpdatedFrom($lastUpdatedFrom)
    {
        if (is_null($lastUpdatedFrom)) {
            throw new \InvalidArgumentException('non-nullable lastUpdatedFrom cannot be null');
        }
        $this->container['lastUpdatedFrom'] = $lastUpdatedFrom;

        return $this;
    }

    /**
     * Gets megabytesPerChunk
     *
     * @return int|null
     */
    public function getMegabytesPerChunk()
    {
        return $this->container['megabytesPerChunk'];
    }

    /**
     * Sets megabytesPerChunk
     *
     * @param int|null $megabytesPerChunk The maximum size in megabytes of a chunk.
     *
     * @return self
     */
    public function setMegabytesPerChunk($megabytesPerChunk)
    {
        if (is_null($megabytesPerChunk)) {
            throw new \InvalidArgumentException('non-nullable megabytesPerChunk cannot be null');
        }
        $this->container['megabytesPerChunk'] = $megabytesPerChunk;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string[]|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string[]|null $orderId Order id for filtering. This parameter can be supplied multiple times.
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }

        if ((count($orderId) > 100)) {
            throw new \InvalidArgumentException('invalid value for $orderId when calling TL03Request., number of items must be less than or equal to 100.');
        }
        if ((count($orderId) < 0)) {
            throw new \InvalidArgumentException('invalid length for $orderId when calling TL03Request., number of items must be greater than or equal to 0.');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets orderLineId
     *
     * @return string[]|null
     */
    public function getOrderLineId()
    {
        return $this->container['orderLineId'];
    }

    /**
     * Sets orderLineId
     *
     * @param string[]|null $orderLineId Order line id for filtering. This parameter can be supplied multiple times.
     *
     * @return self
     */
    public function setOrderLineId($orderLineId)
    {
        if (is_null($orderLineId)) {
            throw new \InvalidArgumentException('non-nullable orderLineId cannot be null');
        }

        if ((count($orderLineId) > 100)) {
            throw new \InvalidArgumentException('invalid value for $orderLineId when calling TL03Request., number of items must be less than or equal to 100.');
        }
        if ((count($orderLineId) < 0)) {
            throw new \InvalidArgumentException('invalid length for $orderLineId when calling TL03Request., number of items must be greater than or equal to 0.');
        }
        $this->container['orderLineId'] = $orderLineId;

        return $this;
    }

    /**
     * Gets orderReferenceForCustomer
     *
     * @return string[]|null
     */
    public function getOrderReferenceForCustomer()
    {
        return $this->container['orderReferenceForCustomer'];
    }

    /**
     * Sets orderReferenceForCustomer
     *
     * @param string[]|null $orderReferenceForCustomer A comma-separated list of order references for customer.
     *
     * @return self
     */
    public function setOrderReferenceForCustomer($orderReferenceForCustomer)
    {
        if (is_null($orderReferenceForCustomer)) {
            throw new \InvalidArgumentException('non-nullable orderReferenceForCustomer cannot be null');
        }

        if ((count($orderReferenceForCustomer) > 100)) {
            throw new \InvalidArgumentException('invalid value for $orderReferenceForCustomer when calling TL03Request., number of items must be less than or equal to 100.');
        }
        if ((count($orderReferenceForCustomer) < 0)) {
            throw new \InvalidArgumentException('invalid length for $orderReferenceForCustomer when calling TL03Request., number of items must be greater than or equal to 0.');
        }
        $this->container['orderReferenceForCustomer'] = $orderReferenceForCustomer;

        return $this;
    }

    /**
     * Gets orderReferenceForSeller
     *
     * @return string[]|null
     */
    public function getOrderReferenceForSeller()
    {
        return $this->container['orderReferenceForSeller'];
    }

    /**
     * Sets orderReferenceForSeller
     *
     * @param string[]|null $orderReferenceForSeller A comma-separated list of order references for seller.
     *
     * @return self
     */
    public function setOrderReferenceForSeller($orderReferenceForSeller)
    {
        if (is_null($orderReferenceForSeller)) {
            throw new \InvalidArgumentException('non-nullable orderReferenceForSeller cannot be null');
        }

        if ((count($orderReferenceForSeller) > 100)) {
            throw new \InvalidArgumentException('invalid value for $orderReferenceForSeller when calling TL03Request., number of items must be less than or equal to 100.');
        }
        if ((count($orderReferenceForSeller) < 0)) {
            throw new \InvalidArgumentException('invalid length for $orderReferenceForSeller when calling TL03Request., number of items must be greater than or equal to 0.');
        }
        $this->container['orderReferenceForSeller'] = $orderReferenceForSeller;

        return $this;
    }

    /**
     * Gets paymentState
     *
     * @return string[]|null
     */
    public function getPaymentState()
    {
        return $this->container['paymentState'];
    }

    /**
     * Sets paymentState
     *
     * @param string[]|null $paymentState Payment state for filtering. This parameter can be supplied multiple times.
     *
     * @return self
     */
    public function setPaymentState($paymentState)
    {
        if (is_null($paymentState)) {
            throw new \InvalidArgumentException('non-nullable paymentState cannot be null');
        }

        if ((count($paymentState) > 100)) {
            throw new \InvalidArgumentException('invalid value for $paymentState when calling TL03Request., number of items must be less than or equal to 100.');
        }
        if ((count($paymentState) < 0)) {
            throw new \InvalidArgumentException('invalid length for $paymentState when calling TL03Request., number of items must be greater than or equal to 0.');
        }
        $this->container['paymentState'] = $paymentState;

        return $this;
    }

    /**
     * Gets paymentVoucherNumber
     *
     * @return string|null
     */
    public function getPaymentVoucherNumber()
    {
        return $this->container['paymentVoucherNumber'];
    }

    /**
     * Sets paymentVoucherNumber
     *
     * @param string|null $paymentVoucherNumber Payment voucher for filtering
     *
     * @return self
     */
    public function setPaymentVoucherNumber($paymentVoucherNumber)
    {
        if (is_null($paymentVoucherNumber)) {
            throw new \InvalidArgumentException('non-nullable paymentVoucherNumber cannot be null');
        }
        $this->container['paymentVoucherNumber'] = $paymentVoucherNumber;

        return $this;
    }

    /**
     * Gets shopDomain
     *
     * @return string[]|null
     */
    public function getShopDomain()
    {
        return $this->container['shopDomain'];
    }

    /**
     * Sets shopDomain
     *
     * @param string[]|null $shopDomain A shop domain for filtering. This parameter can be supplied multiple times.
     *
     * @return self
     */
    public function setShopDomain($shopDomain)
    {
        if (is_null($shopDomain)) {
            throw new \InvalidArgumentException('non-nullable shopDomain cannot be null');
        }

        if ((count($shopDomain) > 100)) {
            throw new \InvalidArgumentException('invalid value for $shopDomain when calling TL03Request., number of items must be less than or equal to 100.');
        }
        if ((count($shopDomain) < 0)) {
            throw new \InvalidArgumentException('invalid length for $shopDomain when calling TL03Request., number of items must be greater than or equal to 0.');
        }
        $this->container['shopDomain'] = $shopDomain;

        return $this;
    }

    /**
     * Gets shopId
     *
     * @return int|null
     */
    public function getShopId()
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId
     *
     * @param int|null $shopId Shop identifier
     *
     * @return self
     */
    public function setShopId($shopId)
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets shopModel
     *
     * @return string[]|null
     */
    public function getShopModel()
    {
        return $this->container['shopModel'];
    }

    /**
     * Sets shopModel
     *
     * @param string[]|null $shopModel Shop model for filtering. This parameter can be supplied multiple times.
     *
     * @return self
     */
    public function setShopModel($shopModel)
    {
        if (is_null($shopModel)) {
            throw new \InvalidArgumentException('non-nullable shopModel cannot be null');
        }
        $this->container['shopModel'] = $shopModel;

        return $this;
    }

    /**
     * Gets transactionDateFrom
     *
     * @return \DateTime|null
     */
    public function getTransactionDateFrom()
    {
        return $this->container['transactionDateFrom'];
    }

    /**
     * Sets transactionDateFrom
     *
     * @param \DateTime|null $transactionDateFrom Transaction date for filtering
     *
     * @return self
     */
    public function setTransactionDateFrom($transactionDateFrom)
    {
        if (is_null($transactionDateFrom)) {
            throw new \InvalidArgumentException('non-nullable transactionDateFrom cannot be null');
        }
        $this->container['transactionDateFrom'] = $transactionDateFrom;

        return $this;
    }

    /**
     * Gets transactionDateTo
     *
     * @return \DateTime|null
     */
    public function getTransactionDateTo()
    {
        return $this->container['transactionDateTo'];
    }

    /**
     * Sets transactionDateTo
     *
     * @param \DateTime|null $transactionDateTo Transaction date for filtering
     *
     * @return self
     */
    public function setTransactionDateTo($transactionDateTo)
    {
        if (is_null($transactionDateTo)) {
            throw new \InvalidArgumentException('non-nullable transactionDateTo cannot be null');
        }
        $this->container['transactionDateTo'] = $transactionDateTo;

        return $this;
    }

    /**
     * Gets transactionType
     *
     * @return string[]|null
     */
    public function getTransactionType()
    {
        return $this->container['transactionType'];
    }

    /**
     * Sets transactionType
     *
     * @param string[]|null $transactionType Transaction type for filtering. This parameter can be supplied multiple times.
     *
     * @return self
     */
    public function setTransactionType($transactionType)
    {
        if (is_null($transactionType)) {
            throw new \InvalidArgumentException('non-nullable transactionType cannot be null');
        }

        if ((count($transactionType) > 100)) {
            throw new \InvalidArgumentException('invalid value for $transactionType when calling TL03Request., number of items must be less than or equal to 100.');
        }
        if ((count($transactionType) < 0)) {
            throw new \InvalidArgumentException('invalid length for $transactionType when calling TL03Request., number of items must be greater than or equal to 0.');
        }
        $this->container['transactionType'] = $transactionType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


