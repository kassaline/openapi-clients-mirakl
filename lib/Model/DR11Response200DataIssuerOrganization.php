<?php
/**
 * DR11Response200DataIssuerOrganization
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * DR11Response200DataIssuerOrganization Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DR11Response200DataIssuerOrganization implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DR11_Response_200_Data_Issuer_Organization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => '\OpenAPI\Client\Mirakl\Model\DR11Response200DataIssuerOrganizationAddress',
        'businessActivityCode' => 'string',
        'companyShareholders' => 'string',
        'fiscalRepresentative' => '\OpenAPI\Client\Mirakl\Model\DR11Response200DataIssuerOrganizationFiscalRepresentative',
        'identificationNumber' => 'string',
        'isInLiquidation' => 'bool',
        'legalForm' => 'string',
        'localTaxNumber' => 'string',
        'localTaxNumberCountry' => 'string',
        'name' => 'string',
        'personalInformation' => '\OpenAPI\Client\Mirakl\Model\DR11Response200DataIssuerOrganizationPersonalInformation',
        'shareCapital' => 'float',
        'shareCapitalCurrency' => 'string',
        'soleTrader' => 'bool',
        'taxIdentificationNumber' => 'string',
        'taxNumberCountry' => 'string',
        'tradeCompanyRegistrationLocation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'businessActivityCode' => null,
        'companyShareholders' => null,
        'fiscalRepresentative' => null,
        'identificationNumber' => null,
        'isInLiquidation' => null,
        'legalForm' => null,
        'localTaxNumber' => null,
        'localTaxNumberCountry' => null,
        'name' => null,
        'personalInformation' => null,
        'shareCapital' => null,
        'shareCapitalCurrency' => null,
        'soleTrader' => null,
        'taxIdentificationNumber' => null,
        'taxNumberCountry' => null,
        'tradeCompanyRegistrationLocation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address' => false,
        'businessActivityCode' => false,
        'companyShareholders' => false,
        'fiscalRepresentative' => false,
        'identificationNumber' => false,
        'isInLiquidation' => false,
        'legalForm' => false,
        'localTaxNumber' => false,
        'localTaxNumberCountry' => false,
        'name' => false,
        'personalInformation' => false,
        'shareCapital' => false,
        'shareCapitalCurrency' => false,
        'soleTrader' => false,
        'taxIdentificationNumber' => false,
        'taxNumberCountry' => false,
        'tradeCompanyRegistrationLocation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'businessActivityCode' => 'business_activity_code',
        'companyShareholders' => 'company_shareholders',
        'fiscalRepresentative' => 'fiscal_representative',
        'identificationNumber' => 'identification_number',
        'isInLiquidation' => 'is_in_liquidation',
        'legalForm' => 'legal_form',
        'localTaxNumber' => 'local_tax_number',
        'localTaxNumberCountry' => 'local_tax_number_country',
        'name' => 'name',
        'personalInformation' => 'personal_information',
        'shareCapital' => 'share_capital',
        'shareCapitalCurrency' => 'share_capital_currency',
        'soleTrader' => 'sole_trader',
        'taxIdentificationNumber' => 'tax_identification_number',
        'taxNumberCountry' => 'tax_number_country',
        'tradeCompanyRegistrationLocation' => 'trade_company_registration_location'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'businessActivityCode' => 'setBusinessActivityCode',
        'companyShareholders' => 'setCompanyShareholders',
        'fiscalRepresentative' => 'setFiscalRepresentative',
        'identificationNumber' => 'setIdentificationNumber',
        'isInLiquidation' => 'setIsInLiquidation',
        'legalForm' => 'setLegalForm',
        'localTaxNumber' => 'setLocalTaxNumber',
        'localTaxNumberCountry' => 'setLocalTaxNumberCountry',
        'name' => 'setName',
        'personalInformation' => 'setPersonalInformation',
        'shareCapital' => 'setShareCapital',
        'shareCapitalCurrency' => 'setShareCapitalCurrency',
        'soleTrader' => 'setSoleTrader',
        'taxIdentificationNumber' => 'setTaxIdentificationNumber',
        'taxNumberCountry' => 'setTaxNumberCountry',
        'tradeCompanyRegistrationLocation' => 'setTradeCompanyRegistrationLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'businessActivityCode' => 'getBusinessActivityCode',
        'companyShareholders' => 'getCompanyShareholders',
        'fiscalRepresentative' => 'getFiscalRepresentative',
        'identificationNumber' => 'getIdentificationNumber',
        'isInLiquidation' => 'getIsInLiquidation',
        'legalForm' => 'getLegalForm',
        'localTaxNumber' => 'getLocalTaxNumber',
        'localTaxNumberCountry' => 'getLocalTaxNumberCountry',
        'name' => 'getName',
        'personalInformation' => 'getPersonalInformation',
        'shareCapital' => 'getShareCapital',
        'shareCapitalCurrency' => 'getShareCapitalCurrency',
        'soleTrader' => 'getSoleTrader',
        'taxIdentificationNumber' => 'getTaxIdentificationNumber',
        'taxNumberCountry' => 'getTaxNumberCountry',
        'tradeCompanyRegistrationLocation' => 'getTradeCompanyRegistrationLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('businessActivityCode', $data ?? [], null);
        $this->setIfExists('companyShareholders', $data ?? [], null);
        $this->setIfExists('fiscalRepresentative', $data ?? [], null);
        $this->setIfExists('identificationNumber', $data ?? [], null);
        $this->setIfExists('isInLiquidation', $data ?? [], null);
        $this->setIfExists('legalForm', $data ?? [], null);
        $this->setIfExists('localTaxNumber', $data ?? [], null);
        $this->setIfExists('localTaxNumberCountry', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('personalInformation', $data ?? [], null);
        $this->setIfExists('shareCapital', $data ?? [], null);
        $this->setIfExists('shareCapitalCurrency', $data ?? [], null);
        $this->setIfExists('soleTrader', $data ?? [], null);
        $this->setIfExists('taxIdentificationNumber', $data ?? [], null);
        $this->setIfExists('taxNumberCountry', $data ?? [], null);
        $this->setIfExists('tradeCompanyRegistrationLocation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Mirakl\Model\DR11Response200DataIssuerOrganizationAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Mirakl\Model\DR11Response200DataIssuerOrganizationAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets businessActivityCode
     *
     * @return string|null
     */
    public function getBusinessActivityCode()
    {
        return $this->container['businessActivityCode'];
    }

    /**
     * Sets businessActivityCode
     *
     * @param string|null $businessActivityCode The business activity code of the organization.
     *
     * @return self
     */
    public function setBusinessActivityCode($businessActivityCode)
    {
        if (is_null($businessActivityCode)) {
            throw new \InvalidArgumentException('non-nullable businessActivityCode cannot be null');
        }
        $this->container['businessActivityCode'] = $businessActivityCode;

        return $this;
    }

    /**
     * Gets companyShareholders
     *
     * @return string|null
     */
    public function getCompanyShareholders()
    {
        return $this->container['companyShareholders'];
    }

    /**
     * Sets companyShareholders
     *
     * @param string|null $companyShareholders Indicates if there is a single shareholder or several shareholders.
     *
     * @return self
     */
    public function setCompanyShareholders($companyShareholders)
    {
        if (is_null($companyShareholders)) {
            throw new \InvalidArgumentException('non-nullable companyShareholders cannot be null');
        }
        $this->container['companyShareholders'] = $companyShareholders;

        return $this;
    }

    /**
     * Gets fiscalRepresentative
     *
     * @return \OpenAPI\Client\Mirakl\Model\DR11Response200DataIssuerOrganizationFiscalRepresentative|null
     */
    public function getFiscalRepresentative()
    {
        return $this->container['fiscalRepresentative'];
    }

    /**
     * Sets fiscalRepresentative
     *
     * @param \OpenAPI\Client\Mirakl\Model\DR11Response200DataIssuerOrganizationFiscalRepresentative|null $fiscalRepresentative fiscalRepresentative
     *
     * @return self
     */
    public function setFiscalRepresentative($fiscalRepresentative)
    {
        if (is_null($fiscalRepresentative)) {
            throw new \InvalidArgumentException('non-nullable fiscalRepresentative cannot be null');
        }
        $this->container['fiscalRepresentative'] = $fiscalRepresentative;

        return $this;
    }

    /**
     * Gets identificationNumber
     *
     * @return string|null
     */
    public function getIdentificationNumber()
    {
        return $this->container['identificationNumber'];
    }

    /**
     * Sets identificationNumber
     *
     * @param string|null $identificationNumber The identification number of the organization.
     *
     * @return self
     */
    public function setIdentificationNumber($identificationNumber)
    {
        if (is_null($identificationNumber)) {
            throw new \InvalidArgumentException('non-nullable identificationNumber cannot be null');
        }
        $this->container['identificationNumber'] = $identificationNumber;

        return $this;
    }

    /**
     * Gets isInLiquidation
     *
     * @return bool|null
     */
    public function getIsInLiquidation()
    {
        return $this->container['isInLiquidation'];
    }

    /**
     * Sets isInLiquidation
     *
     * @param bool|null $isInLiquidation Indicates whether the company is in liquidation or not.
     *
     * @return self
     */
    public function setIsInLiquidation($isInLiquidation)
    {
        if (is_null($isInLiquidation)) {
            throw new \InvalidArgumentException('non-nullable isInLiquidation cannot be null');
        }
        $this->container['isInLiquidation'] = $isInLiquidation;

        return $this;
    }

    /**
     * Gets legalForm
     *
     * @return string|null
     */
    public function getLegalForm()
    {
        return $this->container['legalForm'];
    }

    /**
     * Sets legalForm
     *
     * @param string|null $legalForm The legal form of the organization.
     *
     * @return self
     */
    public function setLegalForm($legalForm)
    {
        if (is_null($legalForm)) {
            throw new \InvalidArgumentException('non-nullable legalForm cannot be null');
        }
        $this->container['legalForm'] = $legalForm;

        return $this;
    }

    /**
     * Gets localTaxNumber
     *
     * @return string|null
     */
    public function getLocalTaxNumber()
    {
        return $this->container['localTaxNumber'];
    }

    /**
     * Sets localTaxNumber
     *
     * @param string|null $localTaxNumber The VAT/GST number.
     *
     * @return self
     */
    public function setLocalTaxNumber($localTaxNumber)
    {
        if (is_null($localTaxNumber)) {
            throw new \InvalidArgumentException('non-nullable localTaxNumber cannot be null');
        }
        $this->container['localTaxNumber'] = $localTaxNumber;

        return $this;
    }

    /**
     * Gets localTaxNumberCountry
     *
     * @return string|null
     */
    public function getLocalTaxNumberCountry()
    {
        return $this->container['localTaxNumberCountry'];
    }

    /**
     * Sets localTaxNumberCountry
     *
     * @param string|null $localTaxNumberCountry The local tax number country of the organization.
     *
     * @return self
     */
    public function setLocalTaxNumberCountry($localTaxNumberCountry)
    {
        if (is_null($localTaxNumberCountry)) {
            throw new \InvalidArgumentException('non-nullable localTaxNumberCountry cannot be null');
        }
        $this->container['localTaxNumberCountry'] = $localTaxNumberCountry;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The organization name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets personalInformation
     *
     * @return \OpenAPI\Client\Mirakl\Model\DR11Response200DataIssuerOrganizationPersonalInformation|null
     */
    public function getPersonalInformation()
    {
        return $this->container['personalInformation'];
    }

    /**
     * Sets personalInformation
     *
     * @param \OpenAPI\Client\Mirakl\Model\DR11Response200DataIssuerOrganizationPersonalInformation|null $personalInformation personalInformation
     *
     * @return self
     */
    public function setPersonalInformation($personalInformation)
    {
        if (is_null($personalInformation)) {
            throw new \InvalidArgumentException('non-nullable personalInformation cannot be null');
        }
        $this->container['personalInformation'] = $personalInformation;

        return $this;
    }

    /**
     * Gets shareCapital
     *
     * @return float|null
     */
    public function getShareCapital()
    {
        return $this->container['shareCapital'];
    }

    /**
     * Sets shareCapital
     *
     * @param float|null $shareCapital The share capital of the organization.
     *
     * @return self
     */
    public function setShareCapital($shareCapital)
    {
        if (is_null($shareCapital)) {
            throw new \InvalidArgumentException('non-nullable shareCapital cannot be null');
        }
        $this->container['shareCapital'] = $shareCapital;

        return $this;
    }

    /**
     * Gets shareCapitalCurrency
     *
     * @return string|null
     */
    public function getShareCapitalCurrency()
    {
        return $this->container['shareCapitalCurrency'];
    }

    /**
     * Sets shareCapitalCurrency
     *
     * @param string|null $shareCapitalCurrency The share capital currency of the organization.
     *
     * @return self
     */
    public function setShareCapitalCurrency($shareCapitalCurrency)
    {
        if (is_null($shareCapitalCurrency)) {
            throw new \InvalidArgumentException('non-nullable shareCapitalCurrency cannot be null');
        }
        $this->container['shareCapitalCurrency'] = $shareCapitalCurrency;

        return $this;
    }

    /**
     * Gets soleTrader
     *
     * @return bool|null
     */
    public function getSoleTrader()
    {
        return $this->container['soleTrader'];
    }

    /**
     * Sets soleTrader
     *
     * @param bool|null $soleTrader Indicates if the organization is a sole trader.
     *
     * @return self
     */
    public function setSoleTrader($soleTrader)
    {
        if (is_null($soleTrader)) {
            throw new \InvalidArgumentException('non-nullable soleTrader cannot be null');
        }
        $this->container['soleTrader'] = $soleTrader;

        return $this;
    }

    /**
     * Gets taxIdentificationNumber
     *
     * @return string|null
     */
    public function getTaxIdentificationNumber()
    {
        return $this->container['taxIdentificationNumber'];
    }

    /**
     * Sets taxIdentificationNumber
     *
     * @param string|null $taxIdentificationNumber The tax identification number of the organization.
     *
     * @return self
     */
    public function setTaxIdentificationNumber($taxIdentificationNumber)
    {
        if (is_null($taxIdentificationNumber)) {
            throw new \InvalidArgumentException('non-nullable taxIdentificationNumber cannot be null');
        }
        $this->container['taxIdentificationNumber'] = $taxIdentificationNumber;

        return $this;
    }

    /**
     * Gets taxNumberCountry
     *
     * @return string|null
     */
    public function getTaxNumberCountry()
    {
        return $this->container['taxNumberCountry'];
    }

    /**
     * Sets taxNumberCountry
     *
     * @param string|null $taxNumberCountry The tax number country of the organization.
     *
     * @return self
     */
    public function setTaxNumberCountry($taxNumberCountry)
    {
        if (is_null($taxNumberCountry)) {
            throw new \InvalidArgumentException('non-nullable taxNumberCountry cannot be null');
        }
        $this->container['taxNumberCountry'] = $taxNumberCountry;

        return $this;
    }

    /**
     * Gets tradeCompanyRegistrationLocation
     *
     * @return string|null
     */
    public function getTradeCompanyRegistrationLocation()
    {
        return $this->container['tradeCompanyRegistrationLocation'];
    }

    /**
     * Sets tradeCompanyRegistrationLocation
     *
     * @param string|null $tradeCompanyRegistrationLocation The trade company registration location of the organization.
     *
     * @return self
     */
    public function setTradeCompanyRegistrationLocation($tradeCompanyRegistrationLocation)
    {
        if (is_null($tradeCompanyRegistrationLocation)) {
            throw new \InvalidArgumentException('non-nullable tradeCompanyRegistrationLocation cannot be null');
        }
        $this->container['tradeCompanyRegistrationLocation'] = $tradeCompanyRegistrationLocation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


