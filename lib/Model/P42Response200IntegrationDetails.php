<?php
/**
 * P42Response200IntegrationDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * P42Response200IntegrationDetails Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class P42Response200IntegrationDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'P42_Response_200_IntegrationDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invalidProducts' => 'int',
        'productsNotAcceptedInTime' => 'int',
        'productsNotSynchronizedInTime' => 'int',
        'productsReimported' => 'int',
        'productsSuccessfullySynchronized' => 'int',
        'productsWithSynchronizationIssues' => 'int',
        'productsWithWrongIdentifiers' => 'int',
        'rejectedProducts' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'invalidProducts' => 'int64',
        'productsNotAcceptedInTime' => 'int64',
        'productsNotSynchronizedInTime' => 'int64',
        'productsReimported' => 'int64',
        'productsSuccessfullySynchronized' => 'int64',
        'productsWithSynchronizationIssues' => 'int64',
        'productsWithWrongIdentifiers' => 'int64',
        'rejectedProducts' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'invalidProducts' => false,
        'productsNotAcceptedInTime' => false,
        'productsNotSynchronizedInTime' => false,
        'productsReimported' => false,
        'productsSuccessfullySynchronized' => false,
        'productsWithSynchronizationIssues' => false,
        'productsWithWrongIdentifiers' => false,
        'rejectedProducts' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invalidProducts' => 'invalid_products',
        'productsNotAcceptedInTime' => 'products_not_accepted_in_time',
        'productsNotSynchronizedInTime' => 'products_not_synchronized_in_time',
        'productsReimported' => 'products_reimported',
        'productsSuccessfullySynchronized' => 'products_successfully_synchronized',
        'productsWithSynchronizationIssues' => 'products_with_synchronization_issues',
        'productsWithWrongIdentifiers' => 'products_with_wrong_identifiers',
        'rejectedProducts' => 'rejected_products'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invalidProducts' => 'setInvalidProducts',
        'productsNotAcceptedInTime' => 'setProductsNotAcceptedInTime',
        'productsNotSynchronizedInTime' => 'setProductsNotSynchronizedInTime',
        'productsReimported' => 'setProductsReimported',
        'productsSuccessfullySynchronized' => 'setProductsSuccessfullySynchronized',
        'productsWithSynchronizationIssues' => 'setProductsWithSynchronizationIssues',
        'productsWithWrongIdentifiers' => 'setProductsWithWrongIdentifiers',
        'rejectedProducts' => 'setRejectedProducts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invalidProducts' => 'getInvalidProducts',
        'productsNotAcceptedInTime' => 'getProductsNotAcceptedInTime',
        'productsNotSynchronizedInTime' => 'getProductsNotSynchronizedInTime',
        'productsReimported' => 'getProductsReimported',
        'productsSuccessfullySynchronized' => 'getProductsSuccessfullySynchronized',
        'productsWithSynchronizationIssues' => 'getProductsWithSynchronizationIssues',
        'productsWithWrongIdentifiers' => 'getProductsWithWrongIdentifiers',
        'rejectedProducts' => 'getRejectedProducts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('invalidProducts', $data ?? [], null);
        $this->setIfExists('productsNotAcceptedInTime', $data ?? [], null);
        $this->setIfExists('productsNotSynchronizedInTime', $data ?? [], null);
        $this->setIfExists('productsReimported', $data ?? [], null);
        $this->setIfExists('productsSuccessfullySynchronized', $data ?? [], null);
        $this->setIfExists('productsWithSynchronizationIssues', $data ?? [], null);
        $this->setIfExists('productsWithWrongIdentifiers', $data ?? [], null);
        $this->setIfExists('rejectedProducts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invalidProducts
     *
     * @return int|null
     */
    public function getInvalidProducts()
    {
        return $this->container['invalidProducts'];
    }

    /**
     * Sets invalidProducts
     *
     * @param int|null $invalidProducts Number of invalid products
     *
     * @return self
     */
    public function setInvalidProducts($invalidProducts)
    {
        if (is_null($invalidProducts)) {
            throw new \InvalidArgumentException('non-nullable invalidProducts cannot be null');
        }
        $this->container['invalidProducts'] = $invalidProducts;

        return $this;
    }

    /**
     * Gets productsNotAcceptedInTime
     *
     * @return int|null
     */
    public function getProductsNotAcceptedInTime()
    {
        return $this->container['productsNotAcceptedInTime'];
    }

    /**
     * Sets productsNotAcceptedInTime
     *
     * @param int|null $productsNotAcceptedInTime Number of products that haven't been accepted in the required time
     *
     * @return self
     */
    public function setProductsNotAcceptedInTime($productsNotAcceptedInTime)
    {
        if (is_null($productsNotAcceptedInTime)) {
            throw new \InvalidArgumentException('non-nullable productsNotAcceptedInTime cannot be null');
        }
        $this->container['productsNotAcceptedInTime'] = $productsNotAcceptedInTime;

        return $this;
    }

    /**
     * Gets productsNotSynchronizedInTime
     *
     * @return int|null
     */
    public function getProductsNotSynchronizedInTime()
    {
        return $this->container['productsNotSynchronizedInTime'];
    }

    /**
     * Sets productsNotSynchronizedInTime
     *
     * @param int|null $productsNotSynchronizedInTime Number of products that haven't been synchronized in the required time
     *
     * @return self
     */
    public function setProductsNotSynchronizedInTime($productsNotSynchronizedInTime)
    {
        if (is_null($productsNotSynchronizedInTime)) {
            throw new \InvalidArgumentException('non-nullable productsNotSynchronizedInTime cannot be null');
        }
        $this->container['productsNotSynchronizedInTime'] = $productsNotSynchronizedInTime;

        return $this;
    }

    /**
     * Gets productsReimported
     *
     * @return int|null
     */
    public function getProductsReimported()
    {
        return $this->container['productsReimported'];
    }

    /**
     * Sets productsReimported
     *
     * @param int|null $productsReimported Number of products that have been reimported in a more recent file
     *
     * @return self
     */
    public function setProductsReimported($productsReimported)
    {
        if (is_null($productsReimported)) {
            throw new \InvalidArgumentException('non-nullable productsReimported cannot be null');
        }
        $this->container['productsReimported'] = $productsReimported;

        return $this;
    }

    /**
     * Gets productsSuccessfullySynchronized
     *
     * @return int|null
     */
    public function getProductsSuccessfullySynchronized()
    {
        return $this->container['productsSuccessfullySynchronized'];
    }

    /**
     * Sets productsSuccessfullySynchronized
     *
     * @param int|null $productsSuccessfullySynchronized Number of products successfully synchronized on operator system
     *
     * @return self
     */
    public function setProductsSuccessfullySynchronized($productsSuccessfullySynchronized)
    {
        if (is_null($productsSuccessfullySynchronized)) {
            throw new \InvalidArgumentException('non-nullable productsSuccessfullySynchronized cannot be null');
        }
        $this->container['productsSuccessfullySynchronized'] = $productsSuccessfullySynchronized;

        return $this;
    }

    /**
     * Gets productsWithSynchronizationIssues
     *
     * @return int|null
     */
    public function getProductsWithSynchronizationIssues()
    {
        return $this->container['productsWithSynchronizationIssues'];
    }

    /**
     * Sets productsWithSynchronizationIssues
     *
     * @param int|null $productsWithSynchronizationIssues Number of products having synchronization issues with operator system
     *
     * @return self
     */
    public function setProductsWithSynchronizationIssues($productsWithSynchronizationIssues)
    {
        if (is_null($productsWithSynchronizationIssues)) {
            throw new \InvalidArgumentException('non-nullable productsWithSynchronizationIssues cannot be null');
        }
        $this->container['productsWithSynchronizationIssues'] = $productsWithSynchronizationIssues;

        return $this;
    }

    /**
     * Gets productsWithWrongIdentifiers
     *
     * @return int|null
     */
    public function getProductsWithWrongIdentifiers()
    {
        return $this->container['productsWithWrongIdentifiers'];
    }

    /**
     * Sets productsWithWrongIdentifiers
     *
     * @param int|null $productsWithWrongIdentifiers Number of products having wrong identifiers
     *
     * @return self
     */
    public function setProductsWithWrongIdentifiers($productsWithWrongIdentifiers)
    {
        if (is_null($productsWithWrongIdentifiers)) {
            throw new \InvalidArgumentException('non-nullable productsWithWrongIdentifiers cannot be null');
        }
        $this->container['productsWithWrongIdentifiers'] = $productsWithWrongIdentifiers;

        return $this;
    }

    /**
     * Gets rejectedProducts
     *
     * @return int|null
     */
    public function getRejectedProducts()
    {
        return $this->container['rejectedProducts'];
    }

    /**
     * Sets rejectedProducts
     *
     * @param int|null $rejectedProducts Number of rejected products by operator system
     *
     * @return self
     */
    public function setRejectedProducts($rejectedProducts)
    {
        if (is_null($rejectedProducts)) {
            throw new \InvalidArgumentException('non-nullable rejectedProducts cannot be null');
        }
        $this->container['rejectedProducts'] = $rejectedProducts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


