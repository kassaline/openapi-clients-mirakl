<?php
/**
 * ProductUnitEmbedded
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * The version of the OpenAPI document: 2.18.3
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * ProductUnitEmbedded Class Doc Comment
 *
 * @category Class
 * @description Used only for swagger documentation. Actual response comes from the shop api response
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductUnitEmbedded implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductUnitEmbedded';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'idUnit' => 'int',
        'idProduct' => 'int',
        'condition' => '\OpenAPI\Client\Mirakl\Model\UnitCondition',
        'location' => 'string',
        'warehouse' => 'string',
        'amount' => 'int',
        'price' => 'int',
        'deliveryTimeMin' => 'int',
        'deliveryTimeMax' => 'int',
        'shippingGroup' => 'string',
        'note' => 'string',
        'seller' => '\OpenAPI\Client\Mirakl\Model\ProductUnitEmbeddedSeller',
        'referencePrice' => 'int',
        'shippingRate' => 'int',
        'dateInserted' => '\DateTime',
        'dateLastchange' => '\DateTime',
        'fulfillmentType' => '\OpenAPI\Client\Mirakl\Model\FulfillmentType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'idUnit' => 'int64',
        'idProduct' => 'int64',
        'condition' => null,
        'location' => null,
        'warehouse' => null,
        'amount' => 'int32',
        'price' => 'int32',
        'deliveryTimeMin' => 'int32',
        'deliveryTimeMax' => 'int32',
        'shippingGroup' => null,
        'note' => null,
        'seller' => null,
        'referencePrice' => 'int32',
        'shippingRate' => 'int32',
        'dateInserted' => 'date-time',
        'dateLastchange' => 'date-time',
        'fulfillmentType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'idUnit' => false,
        'idProduct' => false,
        'condition' => false,
        'location' => true,
        'warehouse' => true,
        'amount' => false,
        'price' => false,
        'deliveryTimeMin' => false,
        'deliveryTimeMax' => false,
        'shippingGroup' => true,
        'note' => true,
        'seller' => true,
        'referencePrice' => true,
        'shippingRate' => false,
        'dateInserted' => false,
        'dateLastchange' => true,
        'fulfillmentType' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'idUnit' => 'id_unit',
        'idProduct' => 'id_product',
        'condition' => 'condition',
        'location' => 'location',
        'warehouse' => 'warehouse',
        'amount' => 'amount',
        'price' => 'price',
        'deliveryTimeMin' => 'delivery_time_min',
        'deliveryTimeMax' => 'delivery_time_max',
        'shippingGroup' => 'shipping_group',
        'note' => 'note',
        'seller' => 'seller',
        'referencePrice' => 'reference_price',
        'shippingRate' => 'shipping_rate',
        'dateInserted' => 'date_inserted',
        'dateLastchange' => 'date_lastchange',
        'fulfillmentType' => 'fulfillment_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'idUnit' => 'setIdUnit',
        'idProduct' => 'setIdProduct',
        'condition' => 'setCondition',
        'location' => 'setLocation',
        'warehouse' => 'setWarehouse',
        'amount' => 'setAmount',
        'price' => 'setPrice',
        'deliveryTimeMin' => 'setDeliveryTimeMin',
        'deliveryTimeMax' => 'setDeliveryTimeMax',
        'shippingGroup' => 'setShippingGroup',
        'note' => 'setNote',
        'seller' => 'setSeller',
        'referencePrice' => 'setReferencePrice',
        'shippingRate' => 'setShippingRate',
        'dateInserted' => 'setDateInserted',
        'dateLastchange' => 'setDateLastchange',
        'fulfillmentType' => 'setFulfillmentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'idUnit' => 'getIdUnit',
        'idProduct' => 'getIdProduct',
        'condition' => 'getCondition',
        'location' => 'getLocation',
        'warehouse' => 'getWarehouse',
        'amount' => 'getAmount',
        'price' => 'getPrice',
        'deliveryTimeMin' => 'getDeliveryTimeMin',
        'deliveryTimeMax' => 'getDeliveryTimeMax',
        'shippingGroup' => 'getShippingGroup',
        'note' => 'getNote',
        'seller' => 'getSeller',
        'referencePrice' => 'getReferencePrice',
        'shippingRate' => 'getShippingRate',
        'dateInserted' => 'getDateInserted',
        'dateLastchange' => 'getDateLastchange',
        'fulfillmentType' => 'getFulfillmentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('idUnit', $data ?? [], null);
        $this->setIfExists('idProduct', $data ?? [], null);
        $this->setIfExists('condition', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('warehouse', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('deliveryTimeMin', $data ?? [], null);
        $this->setIfExists('deliveryTimeMax', $data ?? [], null);
        $this->setIfExists('shippingGroup', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('seller', $data ?? [], null);
        $this->setIfExists('referencePrice', $data ?? [], null);
        $this->setIfExists('shippingRate', $data ?? [], null);
        $this->setIfExists('dateInserted', $data ?? [], null);
        $this->setIfExists('dateLastchange', $data ?? [], null);
        $this->setIfExists('fulfillmentType', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['idUnit'] === null) {
            $invalidProperties[] = "'idUnit' can't be null";
        }
        if (($this->container['idUnit'] < 1)) {
            $invalidProperties[] = "invalid value for 'idUnit', must be bigger than or equal to 1.";
        }

        if ($this->container['idProduct'] === null) {
            $invalidProperties[] = "'idProduct' can't be null";
        }
        if (($this->container['idProduct'] < 1)) {
            $invalidProperties[] = "invalid value for 'idProduct', must be bigger than or equal to 1.";
        }

        if ($this->container['condition'] === null) {
            $invalidProperties[] = "'condition' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['warehouse'] === null) {
            $invalidProperties[] = "'warehouse' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if (($this->container['price'] < 1)) {
            $invalidProperties[] = "invalid value for 'price', must be bigger than or equal to 1.";
        }

        if ($this->container['deliveryTimeMin'] === null) {
            $invalidProperties[] = "'deliveryTimeMin' can't be null";
        }
        if (($this->container['deliveryTimeMin'] < 1)) {
            $invalidProperties[] = "invalid value for 'deliveryTimeMin', must be bigger than or equal to 1.";
        }

        if ($this->container['deliveryTimeMax'] === null) {
            $invalidProperties[] = "'deliveryTimeMax' can't be null";
        }
        if (($this->container['deliveryTimeMax'] < 1)) {
            $invalidProperties[] = "invalid value for 'deliveryTimeMax', must be bigger than or equal to 1.";
        }

        if ($this->container['shippingGroup'] === null) {
            $invalidProperties[] = "'shippingGroup' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalidProperties[] = "'note' can't be null";
        }
        if ($this->container['seller'] === null) {
            $invalidProperties[] = "'seller' can't be null";
        }
        if ($this->container['referencePrice'] === null) {
            $invalidProperties[] = "'referencePrice' can't be null";
        }
        if (($this->container['referencePrice'] < 1)) {
            $invalidProperties[] = "invalid value for 'referencePrice', must be bigger than or equal to 1.";
        }

        if ($this->container['shippingRate'] === null) {
            $invalidProperties[] = "'shippingRate' can't be null";
        }
        if (($this->container['shippingRate'] < 0)) {
            $invalidProperties[] = "invalid value for 'shippingRate', must be bigger than or equal to 0.";
        }

        if ($this->container['dateInserted'] === null) {
            $invalidProperties[] = "'dateInserted' can't be null";
        }
        if ($this->container['dateLastchange'] === null) {
            $invalidProperties[] = "'dateLastchange' can't be null";
        }
        if ($this->container['fulfillmentType'] === null) {
            $invalidProperties[] = "'fulfillmentType' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets idUnit
     *
     * @return int
     */
    public function getIdUnit()
    {
        return $this->container['idUnit'];
    }

    /**
     * Sets idUnit
     *
     * @param int $idUnit idUnit
     *
     * @return self
     */
    public function setIdUnit($idUnit)
    {
        if (is_null($idUnit)) {
            throw new \InvalidArgumentException('non-nullable idUnit cannot be null');
        }

        if (($idUnit < 1)) {
            throw new \InvalidArgumentException('invalid value for $idUnit when calling ProductUnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['idUnit'] = $idUnit;

        return $this;
    }

    /**
     * Gets idProduct
     *
     * @return int
     */
    public function getIdProduct()
    {
        return $this->container['idProduct'];
    }

    /**
     * Sets idProduct
     *
     * @param int $idProduct idProduct
     *
     * @return self
     */
    public function setIdProduct($idProduct)
    {
        if (is_null($idProduct)) {
            throw new \InvalidArgumentException('non-nullable idProduct cannot be null');
        }

        if (($idProduct < 1)) {
            throw new \InvalidArgumentException('invalid value for $idProduct when calling ProductUnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['idProduct'] = $idProduct;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return \OpenAPI\Client\Mirakl\Model\UnitCondition
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param \OpenAPI\Client\Mirakl\Model\UnitCondition $condition condition
     *
     * @return self
     */
    public function setCondition($condition)
    {
        if (is_null($condition)) {
            throw new \InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location Warehouse location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return string
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param string $warehouse Warehouse name
     *
     * @return self
     */
    public function setWarehouse($warehouse)
    {
        if (is_null($warehouse)) {
            array_push($this->openAPINullablesSetToNull, 'warehouse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warehouse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling ProductUnitEmbedded., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int $price Price at which this unit will be offered on Kaufland.de
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }

        if (($price < 1)) {
            throw new \InvalidArgumentException('invalid value for $price when calling ProductUnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets deliveryTimeMin
     *
     * @return int
     */
    public function getDeliveryTimeMin()
    {
        return $this->container['deliveryTimeMin'];
    }

    /**
     * Sets deliveryTimeMin
     *
     * @param int $deliveryTimeMin deliveryTimeMin
     *
     * @return self
     */
    public function setDeliveryTimeMin($deliveryTimeMin)
    {
        if (is_null($deliveryTimeMin)) {
            throw new \InvalidArgumentException('non-nullable deliveryTimeMin cannot be null');
        }

        if (($deliveryTimeMin < 1)) {
            throw new \InvalidArgumentException('invalid value for $deliveryTimeMin when calling ProductUnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['deliveryTimeMin'] = $deliveryTimeMin;

        return $this;
    }

    /**
     * Gets deliveryTimeMax
     *
     * @return int
     */
    public function getDeliveryTimeMax()
    {
        return $this->container['deliveryTimeMax'];
    }

    /**
     * Sets deliveryTimeMax
     *
     * @param int $deliveryTimeMax deliveryTimeMax
     *
     * @return self
     */
    public function setDeliveryTimeMax($deliveryTimeMax)
    {
        if (is_null($deliveryTimeMax)) {
            throw new \InvalidArgumentException('non-nullable deliveryTimeMax cannot be null');
        }

        if (($deliveryTimeMax < 1)) {
            throw new \InvalidArgumentException('invalid value for $deliveryTimeMax when calling ProductUnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['deliveryTimeMax'] = $deliveryTimeMax;

        return $this;
    }

    /**
     * Gets shippingGroup
     *
     * @return string
     */
    public function getShippingGroup()
    {
        return $this->container['shippingGroup'];
    }

    /**
     * Sets shippingGroup
     *
     * @param string $shippingGroup Shipping group name
     *
     * @return self
     */
    public function setShippingGroup($shippingGroup)
    {
        if (is_null($shippingGroup)) {
            array_push($this->openAPINullablesSetToNull, 'shippingGroup');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shippingGroup', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shippingGroup'] = $shippingGroup;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note A note for this unit
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \OpenAPI\Client\Mirakl\Model\ProductUnitEmbeddedSeller
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \OpenAPI\Client\Mirakl\Model\ProductUnitEmbeddedSeller $seller Seller pseudonym for the unit
     *
     * @return self
     */
    public function setSeller($seller)
    {
        if (is_null($seller)) {
            array_push($this->openAPINullablesSetToNull, 'seller');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('seller', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets referencePrice
     *
     * @return int
     */
    public function getReferencePrice()
    {
        return $this->container['referencePrice'];
    }

    /**
     * Sets referencePrice
     *
     * @param int $referencePrice referencePrice
     *
     * @return self
     */
    public function setReferencePrice($referencePrice)
    {
        if (is_null($referencePrice)) {
            array_push($this->openAPINullablesSetToNull, 'referencePrice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referencePrice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($referencePrice) && ($referencePrice < 1)) {
            throw new \InvalidArgumentException('invalid value for $referencePrice when calling ProductUnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['referencePrice'] = $referencePrice;

        return $this;
    }

    /**
     * Gets shippingRate
     *
     * @return int
     */
    public function getShippingRate()
    {
        return $this->container['shippingRate'];
    }

    /**
     * Sets shippingRate
     *
     * @param int $shippingRate shippingRate
     *
     * @return self
     */
    public function setShippingRate($shippingRate)
    {
        if (is_null($shippingRate)) {
            throw new \InvalidArgumentException('non-nullable shippingRate cannot be null');
        }

        if (($shippingRate < 0)) {
            throw new \InvalidArgumentException('invalid value for $shippingRate when calling ProductUnitEmbedded., must be bigger than or equal to 0.');
        }

        $this->container['shippingRate'] = $shippingRate;

        return $this;
    }

    /**
     * Gets dateInserted
     *
     * @return \DateTime
     */
    public function getDateInserted()
    {
        return $this->container['dateInserted'];
    }

    /**
     * Sets dateInserted
     *
     * @param \DateTime $dateInserted dateInserted
     *
     * @return self
     */
    public function setDateInserted($dateInserted)
    {
        if (is_null($dateInserted)) {
            throw new \InvalidArgumentException('non-nullable dateInserted cannot be null');
        }
        $this->container['dateInserted'] = $dateInserted;

        return $this;
    }

    /**
     * Gets dateLastchange
     *
     * @return \DateTime
     */
    public function getDateLastchange()
    {
        return $this->container['dateLastchange'];
    }

    /**
     * Sets dateLastchange
     *
     * @param \DateTime $dateLastchange dateLastchange
     *
     * @return self
     */
    public function setDateLastchange($dateLastchange)
    {
        if (is_null($dateLastchange)) {
            array_push($this->openAPINullablesSetToNull, 'dateLastchange');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dateLastchange', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dateLastchange'] = $dateLastchange;

        return $this;
    }

    /**
     * Gets fulfillmentType
     *
     * @return \OpenAPI\Client\Mirakl\Model\FulfillmentType
     */
    public function getFulfillmentType()
    {
        return $this->container['fulfillmentType'];
    }

    /**
     * Sets fulfillmentType
     *
     * @param \OpenAPI\Client\Mirakl\Model\FulfillmentType $fulfillmentType fulfillmentType
     *
     * @return self
     */
    public function setFulfillmentType($fulfillmentType)
    {
        if (is_null($fulfillmentType)) {
            throw new \InvalidArgumentException('non-nullable fulfillmentType cannot be null');
        }
        $this->container['fulfillmentType'] = $fulfillmentType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


