<?php
/**
 * ST01Response201ShipmentSuccess
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * ST01Response201ShipmentSuccess Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ST01Response201ShipmentSuccess implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ST01_Response_201_ShipmentSuccess';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'createdDate' => '\DateTime',
        'id' => 'string',
        'invoiceReference' => 'string',
        'lastUpdatedDate' => '\DateTime',
        'orderId' => 'string',
        'paymentDetails' => '\OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessPaymentDetails',
        'shipmentAdditionalInformation' => '\OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessShipmentAdditionalInformation[]',
        'shipmentLines' => '\OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessShipmentLines[]',
        'shippedDate' => '\DateTime',
        'shippingFrom' => '\OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessShippingFrom',
        'status' => 'string',
        'statusCustomerDebit' => 'string',
        'tracking' => '\OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessTracking'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'createdDate' => 'date-time',
        'id' => null,
        'invoiceReference' => null,
        'lastUpdatedDate' => 'date-time',
        'orderId' => null,
        'paymentDetails' => null,
        'shipmentAdditionalInformation' => null,
        'shipmentLines' => null,
        'shippedDate' => 'date-time',
        'shippingFrom' => null,
        'status' => null,
        'statusCustomerDebit' => null,
        'tracking' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'createdDate' => false,
        'id' => false,
        'invoiceReference' => false,
        'lastUpdatedDate' => false,
        'orderId' => false,
        'paymentDetails' => false,
        'shipmentAdditionalInformation' => false,
        'shipmentLines' => false,
        'shippedDate' => false,
        'shippingFrom' => false,
        'status' => false,
        'statusCustomerDebit' => false,
        'tracking' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'createdDate' => 'created_date',
        'id' => 'id',
        'invoiceReference' => 'invoice_reference',
        'lastUpdatedDate' => 'last_updated_date',
        'orderId' => 'order_id',
        'paymentDetails' => 'payment_details',
        'shipmentAdditionalInformation' => 'shipment_additional_information',
        'shipmentLines' => 'shipment_lines',
        'shippedDate' => 'shipped_date',
        'shippingFrom' => 'shipping_from',
        'status' => 'status',
        'statusCustomerDebit' => 'status_customer_debit',
        'tracking' => 'tracking'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'createdDate' => 'setCreatedDate',
        'id' => 'setId',
        'invoiceReference' => 'setInvoiceReference',
        'lastUpdatedDate' => 'setLastUpdatedDate',
        'orderId' => 'setOrderId',
        'paymentDetails' => 'setPaymentDetails',
        'shipmentAdditionalInformation' => 'setShipmentAdditionalInformation',
        'shipmentLines' => 'setShipmentLines',
        'shippedDate' => 'setShippedDate',
        'shippingFrom' => 'setShippingFrom',
        'status' => 'setStatus',
        'statusCustomerDebit' => 'setStatusCustomerDebit',
        'tracking' => 'setTracking'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'createdDate' => 'getCreatedDate',
        'id' => 'getId',
        'invoiceReference' => 'getInvoiceReference',
        'lastUpdatedDate' => 'getLastUpdatedDate',
        'orderId' => 'getOrderId',
        'paymentDetails' => 'getPaymentDetails',
        'shipmentAdditionalInformation' => 'getShipmentAdditionalInformation',
        'shipmentLines' => 'getShipmentLines',
        'shippedDate' => 'getShippedDate',
        'shippingFrom' => 'getShippingFrom',
        'status' => 'getStatus',
        'statusCustomerDebit' => 'getStatusCustomerDebit',
        'tracking' => 'getTracking'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('createdDate', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('invoiceReference', $data ?? [], null);
        $this->setIfExists('lastUpdatedDate', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('paymentDetails', $data ?? [], null);
        $this->setIfExists('shipmentAdditionalInformation', $data ?? [], null);
        $this->setIfExists('shipmentLines', $data ?? [], null);
        $this->setIfExists('shippedDate', $data ?? [], null);
        $this->setIfExists('shippingFrom', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('statusCustomerDebit', $data ?? [], null);
        $this->setIfExists('tracking', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets createdDate
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime|null $createdDate Shipment's creation date
     *
     * @return self
     */
    public function setCreatedDate($createdDate)
    {
        if (is_null($createdDate)) {
            throw new \InvalidArgumentException('non-nullable createdDate cannot be null');
        }
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Shipment id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoiceReference
     *
     * @return string|null
     */
    public function getInvoiceReference()
    {
        return $this->container['invoiceReference'];
    }

    /**
     * Sets invoiceReference
     *
     * @param string|null $invoiceReference Shipment's invoice reference
     *
     * @return self
     */
    public function setInvoiceReference($invoiceReference)
    {
        if (is_null($invoiceReference)) {
            throw new \InvalidArgumentException('non-nullable invoiceReference cannot be null');
        }
        $this->container['invoiceReference'] = $invoiceReference;

        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \DateTime|null
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \DateTime|null $lastUpdatedDate Shipment's last updated date
     *
     * @return self
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        if (is_null($lastUpdatedDate)) {
            throw new \InvalidArgumentException('non-nullable lastUpdatedDate cannot be null');
        }
        $this->container['lastUpdatedDate'] = $lastUpdatedDate;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string|null $orderId Order id
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets paymentDetails
     *
     * @return \OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessPaymentDetails|null
     */
    public function getPaymentDetails()
    {
        return $this->container['paymentDetails'];
    }

    /**
     * Sets paymentDetails
     *
     * @param \OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessPaymentDetails|null $paymentDetails paymentDetails
     *
     * @return self
     */
    public function setPaymentDetails($paymentDetails)
    {
        if (is_null($paymentDetails)) {
            throw new \InvalidArgumentException('non-nullable paymentDetails cannot be null');
        }
        $this->container['paymentDetails'] = $paymentDetails;

        return $this;
    }

    /**
     * Gets shipmentAdditionalInformation
     *
     * @return \OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessShipmentAdditionalInformation[]|null
     */
    public function getShipmentAdditionalInformation()
    {
        return $this->container['shipmentAdditionalInformation'];
    }

    /**
     * Sets shipmentAdditionalInformation
     *
     * @param \OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessShipmentAdditionalInformation[]|null $shipmentAdditionalInformation Shipment's additional information
     *
     * @return self
     */
    public function setShipmentAdditionalInformation($shipmentAdditionalInformation)
    {
        if (is_null($shipmentAdditionalInformation)) {
            throw new \InvalidArgumentException('non-nullable shipmentAdditionalInformation cannot be null');
        }
        $this->container['shipmentAdditionalInformation'] = $shipmentAdditionalInformation;

        return $this;
    }

    /**
     * Gets shipmentLines
     *
     * @return \OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessShipmentLines[]|null
     */
    public function getShipmentLines()
    {
        return $this->container['shipmentLines'];
    }

    /**
     * Sets shipmentLines
     *
     * @param \OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessShipmentLines[]|null $shipmentLines Shipment lines
     *
     * @return self
     */
    public function setShipmentLines($shipmentLines)
    {
        if (is_null($shipmentLines)) {
            throw new \InvalidArgumentException('non-nullable shipmentLines cannot be null');
        }
        $this->container['shipmentLines'] = $shipmentLines;

        return $this;
    }

    /**
     * Gets shippedDate
     *
     * @return \DateTime|null
     */
    public function getShippedDate()
    {
        return $this->container['shippedDate'];
    }

    /**
     * Sets shippedDate
     *
     * @param \DateTime|null $shippedDate Shipment's shipped date.
     *
     * @return self
     */
    public function setShippedDate($shippedDate)
    {
        if (is_null($shippedDate)) {
            throw new \InvalidArgumentException('non-nullable shippedDate cannot be null');
        }
        $this->container['shippedDate'] = $shippedDate;

        return $this;
    }

    /**
     * Gets shippingFrom
     *
     * @return \OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessShippingFrom|null
     */
    public function getShippingFrom()
    {
        return $this->container['shippingFrom'];
    }

    /**
     * Sets shippingFrom
     *
     * @param \OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessShippingFrom|null $shippingFrom shippingFrom
     *
     * @return self
     */
    public function setShippingFrom($shippingFrom)
    {
        if (is_null($shippingFrom)) {
            throw new \InvalidArgumentException('non-nullable shippingFrom cannot be null');
        }
        $this->container['shippingFrom'] = $shippingFrom;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Shipment status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusCustomerDebit
     *
     * @return string|null
     */
    public function getStatusCustomerDebit()
    {
        return $this->container['statusCustomerDebit'];
    }

    /**
     * Sets statusCustomerDebit
     *
     * @param string|null $statusCustomerDebit Shipment debit status
     *
     * @return self
     */
    public function setStatusCustomerDebit($statusCustomerDebit)
    {
        if (is_null($statusCustomerDebit)) {
            throw new \InvalidArgumentException('non-nullable statusCustomerDebit cannot be null');
        }
        $this->container['statusCustomerDebit'] = $statusCustomerDebit;

        return $this;
    }

    /**
     * Gets tracking
     *
     * @return \OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessTracking|null
     */
    public function getTracking()
    {
        return $this->container['tracking'];
    }

    /**
     * Sets tracking
     *
     * @param \OpenAPI\Client\Mirakl\Model\ST01Response201ShipmentSuccessTracking|null $tracking tracking
     *
     * @return self
     */
    public function setTracking($tracking)
    {
        if (is_null($tracking)) {
            throw new \InvalidArgumentException('non-nullable tracking cannot be null');
        }
        $this->container['tracking'] = $tracking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


