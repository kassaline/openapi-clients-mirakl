<?php
/**
 * P11Response200ProductsOffersShippingTypes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * P11Response200ProductsOffersShippingTypes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class P11Response200ProductsOffersShippingTypes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'P11_Response_200_Products_Offers_ShippingTypes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'cutOffNextDate' => '\DateTime',
        'cutOffTime' => 'string',
        'deliveryTime' => '\OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersShippingTypesDeliveryTime',
        'label' => 'string',
        'shippingDeadline' => '\DateTime',
        'shippingPriceUnit' => 'float',
        'shippingZoneCode' => 'string',
        'shippingZoneLabel' => 'string',
        'standardCode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'cutOffNextDate' => 'date-time',
        'cutOffTime' => 'time',
        'deliveryTime' => null,
        'label' => null,
        'shippingDeadline' => 'date-time',
        'shippingPriceUnit' => null,
        'shippingZoneCode' => null,
        'shippingZoneLabel' => null,
        'standardCode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'code' => false,
        'cutOffNextDate' => false,
        'cutOffTime' => false,
        'deliveryTime' => false,
        'label' => false,
        'shippingDeadline' => false,
        'shippingPriceUnit' => false,
        'shippingZoneCode' => false,
        'shippingZoneLabel' => false,
        'standardCode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'cutOffNextDate' => 'cut_off_next_date',
        'cutOffTime' => 'cut_off_time',
        'deliveryTime' => 'delivery_time',
        'label' => 'label',
        'shippingDeadline' => 'shipping_deadline',
        'shippingPriceUnit' => 'shipping_price_unit',
        'shippingZoneCode' => 'shipping_zone_code',
        'shippingZoneLabel' => 'shipping_zone_label',
        'standardCode' => 'standard_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'cutOffNextDate' => 'setCutOffNextDate',
        'cutOffTime' => 'setCutOffTime',
        'deliveryTime' => 'setDeliveryTime',
        'label' => 'setLabel',
        'shippingDeadline' => 'setShippingDeadline',
        'shippingPriceUnit' => 'setShippingPriceUnit',
        'shippingZoneCode' => 'setShippingZoneCode',
        'shippingZoneLabel' => 'setShippingZoneLabel',
        'standardCode' => 'setStandardCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'cutOffNextDate' => 'getCutOffNextDate',
        'cutOffTime' => 'getCutOffTime',
        'deliveryTime' => 'getDeliveryTime',
        'label' => 'getLabel',
        'shippingDeadline' => 'getShippingDeadline',
        'shippingPriceUnit' => 'getShippingPriceUnit',
        'shippingZoneCode' => 'getShippingZoneCode',
        'shippingZoneLabel' => 'getShippingZoneLabel',
        'standardCode' => 'getStandardCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('cutOffNextDate', $data ?? [], null);
        $this->setIfExists('cutOffTime', $data ?? [], null);
        $this->setIfExists('deliveryTime', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('shippingDeadline', $data ?? [], null);
        $this->setIfExists('shippingPriceUnit', $data ?? [], null);
        $this->setIfExists('shippingZoneCode', $data ?? [], null);
        $this->setIfExists('shippingZoneLabel', $data ?? [], null);
        $this->setIfExists('standardCode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Shipping type code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets cutOffNextDate
     *
     * @return \DateTime|null
     */
    public function getCutOffNextDate()
    {
        return $this->container['cutOffNextDate'];
    }

    /**
     * Sets cutOffNextDate
     *
     * @param \DateTime|null $cutOffNextDate Next cutoff date
     *
     * @return self
     */
    public function setCutOffNextDate($cutOffNextDate)
    {
        if (is_null($cutOffNextDate)) {
            throw new \InvalidArgumentException('non-nullable cutOffNextDate cannot be null');
        }
        $this->container['cutOffNextDate'] = $cutOffNextDate;

        return $this;
    }

    /**
     * Gets cutOffTime
     *
     * @return string|null
     */
    public function getCutOffTime()
    {
        return $this->container['cutOffTime'];
    }

    /**
     * Sets cutOffTime
     *
     * @param string|null $cutOffTime Shipping type Cutoff time
     *
     * @return self
     */
    public function setCutOffTime($cutOffTime)
    {
        if (is_null($cutOffTime)) {
            throw new \InvalidArgumentException('non-nullable cutOffTime cannot be null');
        }
        $this->container['cutOffTime'] = $cutOffTime;

        return $this;
    }

    /**
     * Gets deliveryTime
     *
     * @return \OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersShippingTypesDeliveryTime|null
     */
    public function getDeliveryTime()
    {
        return $this->container['deliveryTime'];
    }

    /**
     * Sets deliveryTime
     *
     * @param \OpenAPI\Client\Mirakl\Model\P11Response200ProductsOffersShippingTypesDeliveryTime|null $deliveryTime deliveryTime
     *
     * @return self
     */
    public function setDeliveryTime($deliveryTime)
    {
        if (is_null($deliveryTime)) {
            throw new \InvalidArgumentException('non-nullable deliveryTime cannot be null');
        }
        $this->container['deliveryTime'] = $deliveryTime;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Shipping type label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets shippingDeadline
     *
     * @return \DateTime|null
     */
    public function getShippingDeadline()
    {
        return $this->container['shippingDeadline'];
    }

    /**
     * Sets shippingDeadline
     *
     * @param \DateTime|null $shippingDeadline Estimated shipping date, that includes business closing days and cut-off configured on the platform. Add the earliest and latest delivery times to calculate the estimated delivery date to customers
     *
     * @return self
     */
    public function setShippingDeadline($shippingDeadline)
    {
        if (is_null($shippingDeadline)) {
            throw new \InvalidArgumentException('non-nullable shippingDeadline cannot be null');
        }
        $this->container['shippingDeadline'] = $shippingDeadline;

        return $this;
    }

    /**
     * Gets shippingPriceUnit
     *
     * @return float|null
     */
    public function getShippingPriceUnit()
    {
        return $this->container['shippingPriceUnit'];
    }

    /**
     * Sets shippingPriceUnit
     *
     * @param float|null $shippingPriceUnit Shipping price of the offer
     *
     * @return self
     */
    public function setShippingPriceUnit($shippingPriceUnit)
    {
        if (is_null($shippingPriceUnit)) {
            throw new \InvalidArgumentException('non-nullable shippingPriceUnit cannot be null');
        }
        $this->container['shippingPriceUnit'] = $shippingPriceUnit;

        return $this;
    }

    /**
     * Gets shippingZoneCode
     *
     * @return string|null
     */
    public function getShippingZoneCode()
    {
        return $this->container['shippingZoneCode'];
    }

    /**
     * Sets shippingZoneCode
     *
     * @param string|null $shippingZoneCode Shipping zone code
     *
     * @return self
     */
    public function setShippingZoneCode($shippingZoneCode)
    {
        if (is_null($shippingZoneCode)) {
            throw new \InvalidArgumentException('non-nullable shippingZoneCode cannot be null');
        }
        $this->container['shippingZoneCode'] = $shippingZoneCode;

        return $this;
    }

    /**
     * Gets shippingZoneLabel
     *
     * @return string|null
     */
    public function getShippingZoneLabel()
    {
        return $this->container['shippingZoneLabel'];
    }

    /**
     * Sets shippingZoneLabel
     *
     * @param string|null $shippingZoneLabel Shipping zone label
     *
     * @return self
     */
    public function setShippingZoneLabel($shippingZoneLabel)
    {
        if (is_null($shippingZoneLabel)) {
            throw new \InvalidArgumentException('non-nullable shippingZoneLabel cannot be null');
        }
        $this->container['shippingZoneLabel'] = $shippingZoneLabel;

        return $this;
    }

    /**
     * Gets standardCode
     *
     * @return string|null
     */
    public function getStandardCode()
    {
        return $this->container['standardCode'];
    }

    /**
     * Sets standardCode
     *
     * @param string|null $standardCode Shipping type standard code
     *
     * @return self
     */
    public function setStandardCode($standardCode)
    {
        if (is_null($standardCode)) {
            throw new \InvalidArgumentException('non-nullable standardCode cannot be null');
        }
        $this->container['standardCode'] = $standardCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


