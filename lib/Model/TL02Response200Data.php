<?php
/**
 * TL02Response200Data
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * TL02Response200Data Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TL02Response200Data implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TL02_Response_200_Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountingDocumentCreationDate' => '\DateTime',
        'accountingDocumentId' => 'string',
        'accountingDocumentNumber' => 'string',
        'amount' => 'int',
        'amountCredited' => 'int',
        'amountDebited' => 'int',
        'balance' => 'int',
        'currencyIsoCode' => 'string',
        'dateCreated' => '\DateTime',
        'entities' => '\OpenAPI\Client\Mirakl\Model\TL02Response200DataEntities',
        'id' => 'string',
        'lastUpdated' => '\DateTime',
        'paymentState' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accountingDocumentCreationDate' => 'date-time',
        'accountingDocumentId' => null,
        'accountingDocumentNumber' => null,
        'amount' => 'int64',
        'amountCredited' => 'int64',
        'amountDebited' => 'int64',
        'balance' => 'int64',
        'currencyIsoCode' => null,
        'dateCreated' => 'date-time',
        'entities' => null,
        'id' => null,
        'lastUpdated' => 'date-time',
        'paymentState' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accountingDocumentCreationDate' => false,
        'accountingDocumentId' => false,
        'accountingDocumentNumber' => false,
        'amount' => false,
        'amountCredited' => false,
        'amountDebited' => false,
        'balance' => false,
        'currencyIsoCode' => false,
        'dateCreated' => false,
        'entities' => false,
        'id' => false,
        'lastUpdated' => false,
        'paymentState' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountingDocumentCreationDate' => 'accounting_document_creation_date',
        'accountingDocumentId' => 'accounting_document_id',
        'accountingDocumentNumber' => 'accounting_document_number',
        'amount' => 'amount',
        'amountCredited' => 'amount_credited',
        'amountDebited' => 'amount_debited',
        'balance' => 'balance',
        'currencyIsoCode' => 'currency_iso_code',
        'dateCreated' => 'date_created',
        'entities' => 'entities',
        'id' => 'id',
        'lastUpdated' => 'last_updated',
        'paymentState' => 'payment_state',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountingDocumentCreationDate' => 'setAccountingDocumentCreationDate',
        'accountingDocumentId' => 'setAccountingDocumentId',
        'accountingDocumentNumber' => 'setAccountingDocumentNumber',
        'amount' => 'setAmount',
        'amountCredited' => 'setAmountCredited',
        'amountDebited' => 'setAmountDebited',
        'balance' => 'setBalance',
        'currencyIsoCode' => 'setCurrencyIsoCode',
        'dateCreated' => 'setDateCreated',
        'entities' => 'setEntities',
        'id' => 'setId',
        'lastUpdated' => 'setLastUpdated',
        'paymentState' => 'setPaymentState',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountingDocumentCreationDate' => 'getAccountingDocumentCreationDate',
        'accountingDocumentId' => 'getAccountingDocumentId',
        'accountingDocumentNumber' => 'getAccountingDocumentNumber',
        'amount' => 'getAmount',
        'amountCredited' => 'getAmountCredited',
        'amountDebited' => 'getAmountDebited',
        'balance' => 'getBalance',
        'currencyIsoCode' => 'getCurrencyIsoCode',
        'dateCreated' => 'getDateCreated',
        'entities' => 'getEntities',
        'id' => 'getId',
        'lastUpdated' => 'getLastUpdated',
        'paymentState' => 'getPaymentState',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('accountingDocumentCreationDate', $data ?? [], null);
        $this->setIfExists('accountingDocumentId', $data ?? [], null);
        $this->setIfExists('accountingDocumentNumber', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amountCredited', $data ?? [], null);
        $this->setIfExists('amountDebited', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('currencyIsoCode', $data ?? [], null);
        $this->setIfExists('dateCreated', $data ?? [], null);
        $this->setIfExists('entities', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('lastUpdated', $data ?? [], null);
        $this->setIfExists('paymentState', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountingDocumentCreationDate
     *
     * @return \DateTime|null
     */
    public function getAccountingDocumentCreationDate()
    {
        return $this->container['accountingDocumentCreationDate'];
    }

    /**
     * Sets accountingDocumentCreationDate
     *
     * @param \DateTime|null $accountingDocumentCreationDate The billing cycle's accounting document creation date
     *
     * @return self
     */
    public function setAccountingDocumentCreationDate($accountingDocumentCreationDate)
    {
        if (is_null($accountingDocumentCreationDate)) {
            throw new \InvalidArgumentException('non-nullable accountingDocumentCreationDate cannot be null');
        }
        $this->container['accountingDocumentCreationDate'] = $accountingDocumentCreationDate;

        return $this;
    }

    /**
     * Gets accountingDocumentId
     *
     * @return string|null
     */
    public function getAccountingDocumentId()
    {
        return $this->container['accountingDocumentId'];
    }

    /**
     * Sets accountingDocumentId
     *
     * @param string|null $accountingDocumentId The billing cycle's accounting document id. This field is only available for documents requests of the type: <code>SHOP_BILLING_CYCLE_PURCHASE_ORDER</code>.
     *
     * @return self
     */
    public function setAccountingDocumentId($accountingDocumentId)
    {
        if (is_null($accountingDocumentId)) {
            throw new \InvalidArgumentException('non-nullable accountingDocumentId cannot be null');
        }
        $this->container['accountingDocumentId'] = $accountingDocumentId;

        return $this;
    }

    /**
     * Gets accountingDocumentNumber
     *
     * @return string|null
     */
    public function getAccountingDocumentNumber()
    {
        return $this->container['accountingDocumentNumber'];
    }

    /**
     * Sets accountingDocumentNumber
     *
     * @param string|null $accountingDocumentNumber The billing cycle's accounting document number
     *
     * @return self
     */
    public function setAccountingDocumentNumber($accountingDocumentNumber)
    {
        if (is_null($accountingDocumentNumber)) {
            throw new \InvalidArgumentException('non-nullable accountingDocumentNumber cannot be null');
        }
        $this->container['accountingDocumentNumber'] = $accountingDocumentNumber;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount The amount.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amountCredited
     *
     * @return int|null
     */
    public function getAmountCredited()
    {
        return $this->container['amountCredited'];
    }

    /**
     * Sets amountCredited
     *
     * @param int|null $amountCredited The amount credited.
     *
     * @return self
     */
    public function setAmountCredited($amountCredited)
    {
        if (is_null($amountCredited)) {
            throw new \InvalidArgumentException('non-nullable amountCredited cannot be null');
        }
        $this->container['amountCredited'] = $amountCredited;

        return $this;
    }

    /**
     * Gets amountDebited
     *
     * @return int|null
     */
    public function getAmountDebited()
    {
        return $this->container['amountDebited'];
    }

    /**
     * Sets amountDebited
     *
     * @param int|null $amountDebited The amount debited.
     *
     * @return self
     */
    public function setAmountDebited($amountDebited)
    {
        if (is_null($amountDebited)) {
            throw new \InvalidArgumentException('non-nullable amountDebited cannot be null');
        }
        $this->container['amountDebited'] = $amountDebited;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int|null $balance The balance of the transaction.
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets currencyIsoCode
     *
     * @return string|null
     */
    public function getCurrencyIsoCode()
    {
        return $this->container['currencyIsoCode'];
    }

    /**
     * Sets currencyIsoCode
     *
     * @param string|null $currencyIsoCode The currency of the shop (iso format)
     *
     * @return self
     */
    public function setCurrencyIsoCode($currencyIsoCode)
    {
        if (is_null($currencyIsoCode)) {
            throw new \InvalidArgumentException('non-nullable currencyIsoCode cannot be null');
        }
        $this->container['currencyIsoCode'] = $currencyIsoCode;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime|null $dateCreated Creation date of the transaction line
     *
     * @return self
     */
    public function setDateCreated($dateCreated)
    {
        if (is_null($dateCreated)) {
            throw new \InvalidArgumentException('non-nullable dateCreated cannot be null');
        }
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets entities
     *
     * @return \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntities|null
     */
    public function getEntities()
    {
        return $this->container['entities'];
    }

    /**
     * Sets entities
     *
     * @param \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntities|null $entities entities
     *
     * @return self
     */
    public function setEntities($entities)
    {
        if (is_null($entities)) {
            throw new \InvalidArgumentException('non-nullable entities cannot be null');
        }
        $this->container['entities'] = $entities;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Identifier of the transaction
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lastUpdated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['lastUpdated'];
    }

    /**
     * Sets lastUpdated
     *
     * @param \DateTime|null $lastUpdated Date of last update of the transaction line
     *
     * @return self
     */
    public function setLastUpdated($lastUpdated)
    {
        if (is_null($lastUpdated)) {
            throw new \InvalidArgumentException('non-nullable lastUpdated cannot be null');
        }
        $this->container['lastUpdated'] = $lastUpdated;

        return $this;
    }

    /**
     * Gets paymentState
     *
     * @return string|null
     */
    public function getPaymentState()
    {
        return $this->container['paymentState'];
    }

    /**
     * Sets paymentState
     *
     * @param string|null $paymentState The payment state of the transaction.
     *
     * @return self
     */
    public function setPaymentState($paymentState)
    {
        if (is_null($paymentState)) {
            throw new \InvalidArgumentException('non-nullable paymentState cannot be null');
        }
        $this->container['paymentState'] = $paymentState;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of transaction (refund, transaction fee, etc ...)
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


