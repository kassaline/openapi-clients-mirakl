<?php
/**
 * OR11Response200OrdersOrderLines
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * OR11Response200OrdersOrderLines Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OR11Response200OrdersOrderLines implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OR11_Response_200_Orders_OrderLines';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canRefund' => 'bool',
        'cancelations' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesCancelations[]',
        'categoryCode' => 'string',
        'categoryLabel' => 'string',
        'commissionFee' => 'float',
        'commissionTaxes' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesCommissionTaxes[]',
        'createdDate' => '\DateTime',
        'debitedDate' => '\DateTime',
        'description' => 'string',
        'ecoContributions' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesEcoContributions[]',
        'fees' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesFees[]',
        'lastUpdatedDate' => '\DateTime',
        'measurement' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesMeasurement',
        'offerId' => 'int',
        'offerSku' => 'string',
        'offerStateCode' => 'string',
        'orderLineAdditionalFields' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesOrderLineAdditionalFields[]',
        'orderLineId' => 'string',
        'orderLineIndex' => 'int',
        'orderLineState' => 'string',
        'orderLineStateReasonCode' => 'string',
        'orderLineStateReasonLabel' => 'string',
        'originUnitPrice' => 'float',
        'price' => 'float',
        'priceAdditionalInfo' => 'string',
        'priceAmountBreakdown' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesPriceAmountBreakdown',
        'priceUnit' => 'float',
        'productMedias' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesProductMedias[]',
        'productShopSku' => 'string',
        'productSku' => 'string',
        'productTitle' => 'string',
        'promotions' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesPromotions[]',
        'purchaseInformation' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesPurchaseInformation',
        'quantity' => 'int',
        'receivedDate' => '\DateTime',
        'refunds' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefunds[]',
        'shippedDate' => '\DateTime',
        'shippingFrom' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesShippingFrom',
        'shippingPrice' => 'float',
        'shippingPriceAmountBreakdown' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesShippingPriceAmountBreakdown',
        'shippingTaxes' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesShippingTaxes[]',
        'taxLegalNotice' => 'string',
        'taxes' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesTaxes[]',
        'totalCommission' => 'float',
        'totalPrice' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'canRefund' => null,
        'cancelations' => null,
        'categoryCode' => null,
        'categoryLabel' => null,
        'commissionFee' => null,
        'commissionTaxes' => null,
        'createdDate' => 'date-time',
        'debitedDate' => 'date-time',
        'description' => null,
        'ecoContributions' => null,
        'fees' => null,
        'lastUpdatedDate' => 'date-time',
        'measurement' => null,
        'offerId' => 'int64',
        'offerSku' => null,
        'offerStateCode' => null,
        'orderLineAdditionalFields' => null,
        'orderLineId' => null,
        'orderLineIndex' => 'int32',
        'orderLineState' => null,
        'orderLineStateReasonCode' => null,
        'orderLineStateReasonLabel' => null,
        'originUnitPrice' => null,
        'price' => null,
        'priceAdditionalInfo' => null,
        'priceAmountBreakdown' => null,
        'priceUnit' => null,
        'productMedias' => null,
        'productShopSku' => null,
        'productSku' => null,
        'productTitle' => null,
        'promotions' => null,
        'purchaseInformation' => null,
        'quantity' => 'int32',
        'receivedDate' => 'date-time',
        'refunds' => null,
        'shippedDate' => 'date-time',
        'shippingFrom' => null,
        'shippingPrice' => null,
        'shippingPriceAmountBreakdown' => null,
        'shippingTaxes' => null,
        'taxLegalNotice' => null,
        'taxes' => null,
        'totalCommission' => null,
        'totalPrice' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'canRefund' => false,
        'cancelations' => false,
        'categoryCode' => false,
        'categoryLabel' => false,
        'commissionFee' => false,
        'commissionTaxes' => false,
        'createdDate' => false,
        'debitedDate' => false,
        'description' => false,
        'ecoContributions' => false,
        'fees' => false,
        'lastUpdatedDate' => false,
        'measurement' => false,
        'offerId' => false,
        'offerSku' => false,
        'offerStateCode' => false,
        'orderLineAdditionalFields' => false,
        'orderLineId' => false,
        'orderLineIndex' => false,
        'orderLineState' => false,
        'orderLineStateReasonCode' => false,
        'orderLineStateReasonLabel' => false,
        'originUnitPrice' => false,
        'price' => false,
        'priceAdditionalInfo' => false,
        'priceAmountBreakdown' => false,
        'priceUnit' => false,
        'productMedias' => false,
        'productShopSku' => false,
        'productSku' => false,
        'productTitle' => false,
        'promotions' => false,
        'purchaseInformation' => false,
        'quantity' => false,
        'receivedDate' => false,
        'refunds' => false,
        'shippedDate' => false,
        'shippingFrom' => false,
        'shippingPrice' => false,
        'shippingPriceAmountBreakdown' => false,
        'shippingTaxes' => false,
        'taxLegalNotice' => false,
        'taxes' => false,
        'totalCommission' => false,
        'totalPrice' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canRefund' => 'can_refund',
        'cancelations' => 'cancelations',
        'categoryCode' => 'category_code',
        'categoryLabel' => 'category_label',
        'commissionFee' => 'commission_fee',
        'commissionTaxes' => 'commission_taxes',
        'createdDate' => 'created_date',
        'debitedDate' => 'debited_date',
        'description' => 'description',
        'ecoContributions' => 'eco_contributions',
        'fees' => 'fees',
        'lastUpdatedDate' => 'last_updated_date',
        'measurement' => 'measurement',
        'offerId' => 'offer_id',
        'offerSku' => 'offer_sku',
        'offerStateCode' => 'offer_state_code',
        'orderLineAdditionalFields' => 'order_line_additional_fields',
        'orderLineId' => 'order_line_id',
        'orderLineIndex' => 'order_line_index',
        'orderLineState' => 'order_line_state',
        'orderLineStateReasonCode' => 'order_line_state_reason_code',
        'orderLineStateReasonLabel' => 'order_line_state_reason_label',
        'originUnitPrice' => 'origin_unit_price',
        'price' => 'price',
        'priceAdditionalInfo' => 'price_additional_info',
        'priceAmountBreakdown' => 'price_amount_breakdown',
        'priceUnit' => 'price_unit',
        'productMedias' => 'product_medias',
        'productShopSku' => 'product_shop_sku',
        'productSku' => 'product_sku',
        'productTitle' => 'product_title',
        'promotions' => 'promotions',
        'purchaseInformation' => 'purchase_information',
        'quantity' => 'quantity',
        'receivedDate' => 'received_date',
        'refunds' => 'refunds',
        'shippedDate' => 'shipped_date',
        'shippingFrom' => 'shipping_from',
        'shippingPrice' => 'shipping_price',
        'shippingPriceAmountBreakdown' => 'shipping_price_amount_breakdown',
        'shippingTaxes' => 'shipping_taxes',
        'taxLegalNotice' => 'tax_legal_notice',
        'taxes' => 'taxes',
        'totalCommission' => 'total_commission',
        'totalPrice' => 'total_price'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canRefund' => 'setCanRefund',
        'cancelations' => 'setCancelations',
        'categoryCode' => 'setCategoryCode',
        'categoryLabel' => 'setCategoryLabel',
        'commissionFee' => 'setCommissionFee',
        'commissionTaxes' => 'setCommissionTaxes',
        'createdDate' => 'setCreatedDate',
        'debitedDate' => 'setDebitedDate',
        'description' => 'setDescription',
        'ecoContributions' => 'setEcoContributions',
        'fees' => 'setFees',
        'lastUpdatedDate' => 'setLastUpdatedDate',
        'measurement' => 'setMeasurement',
        'offerId' => 'setOfferId',
        'offerSku' => 'setOfferSku',
        'offerStateCode' => 'setOfferStateCode',
        'orderLineAdditionalFields' => 'setOrderLineAdditionalFields',
        'orderLineId' => 'setOrderLineId',
        'orderLineIndex' => 'setOrderLineIndex',
        'orderLineState' => 'setOrderLineState',
        'orderLineStateReasonCode' => 'setOrderLineStateReasonCode',
        'orderLineStateReasonLabel' => 'setOrderLineStateReasonLabel',
        'originUnitPrice' => 'setOriginUnitPrice',
        'price' => 'setPrice',
        'priceAdditionalInfo' => 'setPriceAdditionalInfo',
        'priceAmountBreakdown' => 'setPriceAmountBreakdown',
        'priceUnit' => 'setPriceUnit',
        'productMedias' => 'setProductMedias',
        'productShopSku' => 'setProductShopSku',
        'productSku' => 'setProductSku',
        'productTitle' => 'setProductTitle',
        'promotions' => 'setPromotions',
        'purchaseInformation' => 'setPurchaseInformation',
        'quantity' => 'setQuantity',
        'receivedDate' => 'setReceivedDate',
        'refunds' => 'setRefunds',
        'shippedDate' => 'setShippedDate',
        'shippingFrom' => 'setShippingFrom',
        'shippingPrice' => 'setShippingPrice',
        'shippingPriceAmountBreakdown' => 'setShippingPriceAmountBreakdown',
        'shippingTaxes' => 'setShippingTaxes',
        'taxLegalNotice' => 'setTaxLegalNotice',
        'taxes' => 'setTaxes',
        'totalCommission' => 'setTotalCommission',
        'totalPrice' => 'setTotalPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canRefund' => 'getCanRefund',
        'cancelations' => 'getCancelations',
        'categoryCode' => 'getCategoryCode',
        'categoryLabel' => 'getCategoryLabel',
        'commissionFee' => 'getCommissionFee',
        'commissionTaxes' => 'getCommissionTaxes',
        'createdDate' => 'getCreatedDate',
        'debitedDate' => 'getDebitedDate',
        'description' => 'getDescription',
        'ecoContributions' => 'getEcoContributions',
        'fees' => 'getFees',
        'lastUpdatedDate' => 'getLastUpdatedDate',
        'measurement' => 'getMeasurement',
        'offerId' => 'getOfferId',
        'offerSku' => 'getOfferSku',
        'offerStateCode' => 'getOfferStateCode',
        'orderLineAdditionalFields' => 'getOrderLineAdditionalFields',
        'orderLineId' => 'getOrderLineId',
        'orderLineIndex' => 'getOrderLineIndex',
        'orderLineState' => 'getOrderLineState',
        'orderLineStateReasonCode' => 'getOrderLineStateReasonCode',
        'orderLineStateReasonLabel' => 'getOrderLineStateReasonLabel',
        'originUnitPrice' => 'getOriginUnitPrice',
        'price' => 'getPrice',
        'priceAdditionalInfo' => 'getPriceAdditionalInfo',
        'priceAmountBreakdown' => 'getPriceAmountBreakdown',
        'priceUnit' => 'getPriceUnit',
        'productMedias' => 'getProductMedias',
        'productShopSku' => 'getProductShopSku',
        'productSku' => 'getProductSku',
        'productTitle' => 'getProductTitle',
        'promotions' => 'getPromotions',
        'purchaseInformation' => 'getPurchaseInformation',
        'quantity' => 'getQuantity',
        'receivedDate' => 'getReceivedDate',
        'refunds' => 'getRefunds',
        'shippedDate' => 'getShippedDate',
        'shippingFrom' => 'getShippingFrom',
        'shippingPrice' => 'getShippingPrice',
        'shippingPriceAmountBreakdown' => 'getShippingPriceAmountBreakdown',
        'shippingTaxes' => 'getShippingTaxes',
        'taxLegalNotice' => 'getTaxLegalNotice',
        'taxes' => 'getTaxes',
        'totalCommission' => 'getTotalCommission',
        'totalPrice' => 'getTotalPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('canRefund', $data ?? [], null);
        $this->setIfExists('cancelations', $data ?? [], null);
        $this->setIfExists('categoryCode', $data ?? [], null);
        $this->setIfExists('categoryLabel', $data ?? [], null);
        $this->setIfExists('commissionFee', $data ?? [], null);
        $this->setIfExists('commissionTaxes', $data ?? [], null);
        $this->setIfExists('createdDate', $data ?? [], null);
        $this->setIfExists('debitedDate', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('ecoContributions', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('lastUpdatedDate', $data ?? [], null);
        $this->setIfExists('measurement', $data ?? [], null);
        $this->setIfExists('offerId', $data ?? [], null);
        $this->setIfExists('offerSku', $data ?? [], null);
        $this->setIfExists('offerStateCode', $data ?? [], null);
        $this->setIfExists('orderLineAdditionalFields', $data ?? [], null);
        $this->setIfExists('orderLineId', $data ?? [], null);
        $this->setIfExists('orderLineIndex', $data ?? [], null);
        $this->setIfExists('orderLineState', $data ?? [], null);
        $this->setIfExists('orderLineStateReasonCode', $data ?? [], null);
        $this->setIfExists('orderLineStateReasonLabel', $data ?? [], null);
        $this->setIfExists('originUnitPrice', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('priceAdditionalInfo', $data ?? [], null);
        $this->setIfExists('priceAmountBreakdown', $data ?? [], null);
        $this->setIfExists('priceUnit', $data ?? [], null);
        $this->setIfExists('productMedias', $data ?? [], null);
        $this->setIfExists('productShopSku', $data ?? [], null);
        $this->setIfExists('productSku', $data ?? [], null);
        $this->setIfExists('productTitle', $data ?? [], null);
        $this->setIfExists('promotions', $data ?? [], null);
        $this->setIfExists('purchaseInformation', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('receivedDate', $data ?? [], null);
        $this->setIfExists('refunds', $data ?? [], null);
        $this->setIfExists('shippedDate', $data ?? [], null);
        $this->setIfExists('shippingFrom', $data ?? [], null);
        $this->setIfExists('shippingPrice', $data ?? [], null);
        $this->setIfExists('shippingPriceAmountBreakdown', $data ?? [], null);
        $this->setIfExists('shippingTaxes', $data ?? [], null);
        $this->setIfExists('taxLegalNotice', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('totalCommission', $data ?? [], null);
        $this->setIfExists('totalPrice', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canRefund
     *
     * @return bool|null
     */
    public function getCanRefund()
    {
        return $this->container['canRefund'];
    }

    /**
     * Sets canRefund
     *
     * @param bool|null $canRefund Indicate whether the order line full amount can be refunded
     *
     * @return self
     */
    public function setCanRefund($canRefund)
    {
        if (is_null($canRefund)) {
            throw new \InvalidArgumentException('non-nullable canRefund cannot be null');
        }
        $this->container['canRefund'] = $canRefund;

        return $this;
    }

    /**
     * Gets cancelations
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesCancelations[]|null
     */
    public function getCancelations()
    {
        return $this->container['cancelations'];
    }

    /**
     * Sets cancelations
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesCancelations[]|null $cancelations List of the cancellations
     *
     * @return self
     */
    public function setCancelations($cancelations)
    {
        if (is_null($cancelations)) {
            throw new \InvalidArgumentException('non-nullable cancelations cannot be null');
        }
        $this->container['cancelations'] = $cancelations;

        return $this;
    }

    /**
     * Gets categoryCode
     *
     * @return string|null
     */
    public function getCategoryCode()
    {
        return $this->container['categoryCode'];
    }

    /**
     * Sets categoryCode
     *
     * @param string|null $categoryCode Category code of the product associated with the order line
     *
     * @return self
     */
    public function setCategoryCode($categoryCode)
    {
        if (is_null($categoryCode)) {
            throw new \InvalidArgumentException('non-nullable categoryCode cannot be null');
        }
        $this->container['categoryCode'] = $categoryCode;

        return $this;
    }

    /**
     * Gets categoryLabel
     *
     * @return string|null
     */
    public function getCategoryLabel()
    {
        return $this->container['categoryLabel'];
    }

    /**
     * Sets categoryLabel
     *
     * @param string|null $categoryLabel Category label of the product associated with the order line
     *
     * @return self
     */
    public function setCategoryLabel($categoryLabel)
    {
        if (is_null($categoryLabel)) {
            throw new \InvalidArgumentException('non-nullable categoryLabel cannot be null');
        }
        $this->container['categoryLabel'] = $categoryLabel;

        return $this;
    }

    /**
     * Gets commissionFee
     *
     * @return float|null
     */
    public function getCommissionFee()
    {
        return $this->container['commissionFee'];
    }

    /**
     * Sets commissionFee
     *
     * @param float|null $commissionFee Order line's commission fee
     *
     * @return self
     */
    public function setCommissionFee($commissionFee)
    {
        if (is_null($commissionFee)) {
            throw new \InvalidArgumentException('non-nullable commissionFee cannot be null');
        }
        $this->container['commissionFee'] = $commissionFee;

        return $this;
    }

    /**
     * Gets commissionTaxes
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesCommissionTaxes[]|null
     */
    public function getCommissionTaxes()
    {
        return $this->container['commissionTaxes'];
    }

    /**
     * Sets commissionTaxes
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesCommissionTaxes[]|null $commissionTaxes Commission taxes
     *
     * @return self
     */
    public function setCommissionTaxes($commissionTaxes)
    {
        if (is_null($commissionTaxes)) {
            throw new \InvalidArgumentException('non-nullable commissionTaxes cannot be null');
        }
        $this->container['commissionTaxes'] = $commissionTaxes;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime|null $createdDate Order line's creation date
     *
     * @return self
     */
    public function setCreatedDate($createdDate)
    {
        if (is_null($createdDate)) {
            throw new \InvalidArgumentException('non-nullable createdDate cannot be null');
        }
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets debitedDate
     *
     * @return \DateTime|null
     */
    public function getDebitedDate()
    {
        return $this->container['debitedDate'];
    }

    /**
     * Sets debitedDate
     *
     * @param \DateTime|null $debitedDate Order line's debited date
     *
     * @return self
     */
    public function setDebitedDate($debitedDate)
    {
        if (is_null($debitedDate)) {
            throw new \InvalidArgumentException('non-nullable debitedDate cannot be null');
        }
        $this->container['debitedDate'] = $debitedDate;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Order line's description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ecoContributions
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesEcoContributions[]|null
     */
    public function getEcoContributions()
    {
        return $this->container['ecoContributions'];
    }

    /**
     * Sets ecoContributions
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesEcoContributions[]|null $ecoContributions List of eco-contribution amounts and corresponding producer identifiers, if applicable<br/> Only available if the operator activates the circular economy information collection.
     *
     * @return self
     */
    public function setEcoContributions($ecoContributions)
    {
        if (is_null($ecoContributions)) {
            throw new \InvalidArgumentException('non-nullable ecoContributions cannot be null');
        }
        $this->container['ecoContributions'] = $ecoContributions;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesFees[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesFees[]|null $fees List of fees applied on the order line
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            throw new \InvalidArgumentException('non-nullable fees cannot be null');
        }
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \DateTime|null
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \DateTime|null $lastUpdatedDate Order line's last updated date
     *
     * @return self
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        if (is_null($lastUpdatedDate)) {
            throw new \InvalidArgumentException('non-nullable lastUpdatedDate cannot be null');
        }
        $this->container['lastUpdatedDate'] = $lastUpdatedDate;

        return $this;
    }

    /**
     * Gets measurement
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesMeasurement|null
     */
    public function getMeasurement()
    {
        return $this->container['measurement'];
    }

    /**
     * Sets measurement
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesMeasurement|null $measurement measurement
     *
     * @return self
     */
    public function setMeasurement($measurement)
    {
        if (is_null($measurement)) {
            throw new \InvalidArgumentException('non-nullable measurement cannot be null');
        }
        $this->container['measurement'] = $measurement;

        return $this;
    }

    /**
     * Gets offerId
     *
     * @return int|null
     */
    public function getOfferId()
    {
        return $this->container['offerId'];
    }

    /**
     * Sets offerId
     *
     * @param int|null $offerId Associated offer's id
     *
     * @return self
     */
    public function setOfferId($offerId)
    {
        if (is_null($offerId)) {
            throw new \InvalidArgumentException('non-nullable offerId cannot be null');
        }
        $this->container['offerId'] = $offerId;

        return $this;
    }

    /**
     * Gets offerSku
     *
     * @return string|null
     */
    public function getOfferSku()
    {
        return $this->container['offerSku'];
    }

    /**
     * Sets offerSku
     *
     * @param string|null $offerSku Associated offer sku (this is the sku of the offer defined by the shop)
     *
     * @return self
     */
    public function setOfferSku($offerSku)
    {
        if (is_null($offerSku)) {
            throw new \InvalidArgumentException('non-nullable offerSku cannot be null');
        }
        $this->container['offerSku'] = $offerSku;

        return $this;
    }

    /**
     * Gets offerStateCode
     *
     * @return string|null
     */
    public function getOfferStateCode()
    {
        return $this->container['offerStateCode'];
    }

    /**
     * Sets offerStateCode
     *
     * @param string|null $offerStateCode State of the offer associated with the order line
     *
     * @return self
     */
    public function setOfferStateCode($offerStateCode)
    {
        if (is_null($offerStateCode)) {
            throw new \InvalidArgumentException('non-nullable offerStateCode cannot be null');
        }
        $this->container['offerStateCode'] = $offerStateCode;

        return $this;
    }

    /**
     * Gets orderLineAdditionalFields
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesOrderLineAdditionalFields[]|null
     */
    public function getOrderLineAdditionalFields()
    {
        return $this->container['orderLineAdditionalFields'];
    }

    /**
     * Sets orderLineAdditionalFields
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesOrderLineAdditionalFields[]|null $orderLineAdditionalFields List of custom fields
     *
     * @return self
     */
    public function setOrderLineAdditionalFields($orderLineAdditionalFields)
    {
        if (is_null($orderLineAdditionalFields)) {
            throw new \InvalidArgumentException('non-nullable orderLineAdditionalFields cannot be null');
        }
        $this->container['orderLineAdditionalFields'] = $orderLineAdditionalFields;

        return $this;
    }

    /**
     * Gets orderLineId
     *
     * @return string|null
     */
    public function getOrderLineId()
    {
        return $this->container['orderLineId'];
    }

    /**
     * Sets orderLineId
     *
     * @param string|null $orderLineId Order line's identifier
     *
     * @return self
     */
    public function setOrderLineId($orderLineId)
    {
        if (is_null($orderLineId)) {
            throw new \InvalidArgumentException('non-nullable orderLineId cannot be null');
        }
        $this->container['orderLineId'] = $orderLineId;

        return $this;
    }

    /**
     * Gets orderLineIndex
     *
     * @return int|null
     */
    public function getOrderLineIndex()
    {
        return $this->container['orderLineIndex'];
    }

    /**
     * Sets orderLineIndex
     *
     * @param int|null $orderLineIndex Order line's index in the order
     *
     * @return self
     */
    public function setOrderLineIndex($orderLineIndex)
    {
        if (is_null($orderLineIndex)) {
            throw new \InvalidArgumentException('non-nullable orderLineIndex cannot be null');
        }
        $this->container['orderLineIndex'] = $orderLineIndex;

        return $this;
    }

    /**
     * Gets orderLineState
     *
     * @return string|null
     */
    public function getOrderLineState()
    {
        return $this->container['orderLineState'];
    }

    /**
     * Sets orderLineState
     *
     * @param string|null $orderLineState Order line's state
     *
     * @return self
     */
    public function setOrderLineState($orderLineState)
    {
        if (is_null($orderLineState)) {
            throw new \InvalidArgumentException('non-nullable orderLineState cannot be null');
        }
        $this->container['orderLineState'] = $orderLineState;

        return $this;
    }

    /**
     * Gets orderLineStateReasonCode
     *
     * @return string|null
     */
    public function getOrderLineStateReasonCode()
    {
        return $this->container['orderLineStateReasonCode'];
    }

    /**
     * Sets orderLineStateReasonCode
     *
     * @param string|null $orderLineStateReasonCode Reason's code of the order line's state
     *
     * @return self
     */
    public function setOrderLineStateReasonCode($orderLineStateReasonCode)
    {
        if (is_null($orderLineStateReasonCode)) {
            throw new \InvalidArgumentException('non-nullable orderLineStateReasonCode cannot be null');
        }
        $this->container['orderLineStateReasonCode'] = $orderLineStateReasonCode;

        return $this;
    }

    /**
     * Gets orderLineStateReasonLabel
     *
     * @return string|null
     */
    public function getOrderLineStateReasonLabel()
    {
        return $this->container['orderLineStateReasonLabel'];
    }

    /**
     * Sets orderLineStateReasonLabel
     *
     * @param string|null $orderLineStateReasonLabel Reason's label of the order line's state
     *
     * @return self
     */
    public function setOrderLineStateReasonLabel($orderLineStateReasonLabel)
    {
        if (is_null($orderLineStateReasonLabel)) {
            throw new \InvalidArgumentException('non-nullable orderLineStateReasonLabel cannot be null');
        }
        $this->container['orderLineStateReasonLabel'] = $orderLineStateReasonLabel;

        return $this;
    }

    /**
     * Gets originUnitPrice
     *
     * @return float|null
     */
    public function getOriginUnitPrice()
    {
        return $this->container['originUnitPrice'];
    }

    /**
     * Sets originUnitPrice
     *
     * @param float|null $originUnitPrice The original unit price of the offer associated with the order line
     *
     * @return self
     */
    public function setOriginUnitPrice($originUnitPrice)
    {
        if (is_null($originUnitPrice)) {
            throw new \InvalidArgumentException('non-nullable originUnitPrice cannot be null');
        }
        $this->container['originUnitPrice'] = $originUnitPrice;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Order line's price without shipping price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets priceAdditionalInfo
     *
     * @return string|null
     */
    public function getPriceAdditionalInfo()
    {
        return $this->container['priceAdditionalInfo'];
    }

    /**
     * Sets priceAdditionalInfo
     *
     * @param string|null $priceAdditionalInfo Price's additional information of the offer
     *
     * @return self
     */
    public function setPriceAdditionalInfo($priceAdditionalInfo)
    {
        if (is_null($priceAdditionalInfo)) {
            throw new \InvalidArgumentException('non-nullable priceAdditionalInfo cannot be null');
        }
        $this->container['priceAdditionalInfo'] = $priceAdditionalInfo;

        return $this;
    }

    /**
     * Gets priceAmountBreakdown
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesPriceAmountBreakdown|null
     */
    public function getPriceAmountBreakdown()
    {
        return $this->container['priceAmountBreakdown'];
    }

    /**
     * Sets priceAmountBreakdown
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesPriceAmountBreakdown|null $priceAmountBreakdown priceAmountBreakdown
     *
     * @return self
     */
    public function setPriceAmountBreakdown($priceAmountBreakdown)
    {
        if (is_null($priceAmountBreakdown)) {
            throw new \InvalidArgumentException('non-nullable priceAmountBreakdown cannot be null');
        }
        $this->container['priceAmountBreakdown'] = $priceAmountBreakdown;

        return $this;
    }

    /**
     * Gets priceUnit
     *
     * @return float|null
     */
    public function getPriceUnit()
    {
        return $this->container['priceUnit'];
    }

    /**
     * Sets priceUnit
     *
     * @param float|null $priceUnit Unit price for the offer associated with the order line
     *
     * @return self
     */
    public function setPriceUnit($priceUnit)
    {
        if (is_null($priceUnit)) {
            throw new \InvalidArgumentException('non-nullable priceUnit cannot be null');
        }
        $this->container['priceUnit'] = $priceUnit;

        return $this;
    }

    /**
     * Gets productMedias
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesProductMedias[]|null
     */
    public function getProductMedias()
    {
        return $this->container['productMedias'];
    }

    /**
     * Sets productMedias
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesProductMedias[]|null $productMedias List of all product's media associated to the order line
     *
     * @return self
     */
    public function setProductMedias($productMedias)
    {
        if (is_null($productMedias)) {
            throw new \InvalidArgumentException('non-nullable productMedias cannot be null');
        }
        $this->container['productMedias'] = $productMedias;

        return $this;
    }

    /**
     * Gets productShopSku
     *
     * @return string|null
     */
    public function getProductShopSku()
    {
        return $this->container['productShopSku'];
    }

    /**
     * Sets productShopSku
     *
     * @param string|null $productShopSku Shop SKU of the product associated with the order line
     *
     * @return self
     */
    public function setProductShopSku($productShopSku)
    {
        if (is_null($productShopSku)) {
            throw new \InvalidArgumentException('non-nullable productShopSku cannot be null');
        }
        $this->container['productShopSku'] = $productShopSku;

        return $this;
    }

    /**
     * Gets productSku
     *
     * @return string|null
     */
    public function getProductSku()
    {
        return $this->container['productSku'];
    }

    /**
     * Sets productSku
     *
     * @param string|null $productSku SKU of the product associated with the order line
     *
     * @return self
     */
    public function setProductSku($productSku)
    {
        if (is_null($productSku)) {
            throw new \InvalidArgumentException('non-nullable productSku cannot be null');
        }
        $this->container['productSku'] = $productSku;

        return $this;
    }

    /**
     * Gets productTitle
     *
     * @return string|null
     */
    public function getProductTitle()
    {
        return $this->container['productTitle'];
    }

    /**
     * Sets productTitle
     *
     * @param string|null $productTitle Title of the product associated with the order line
     *
     * @return self
     */
    public function setProductTitle($productTitle)
    {
        if (is_null($productTitle)) {
            throw new \InvalidArgumentException('non-nullable productTitle cannot be null');
        }
        $this->container['productTitle'] = $productTitle;

        return $this;
    }

    /**
     * Gets promotions
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesPromotions[]|null
     */
    public function getPromotions()
    {
        return $this->container['promotions'];
    }

    /**
     * Sets promotions
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesPromotions[]|null $promotions List of promotions
     *
     * @return self
     */
    public function setPromotions($promotions)
    {
        if (is_null($promotions)) {
            throw new \InvalidArgumentException('non-nullable promotions cannot be null');
        }
        $this->container['promotions'] = $promotions;

        return $this;
    }

    /**
     * Gets purchaseInformation
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesPurchaseInformation|null
     */
    public function getPurchaseInformation()
    {
        return $this->container['purchaseInformation'];
    }

    /**
     * Sets purchaseInformation
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesPurchaseInformation|null $purchaseInformation purchaseInformation
     *
     * @return self
     */
    public function setPurchaseInformation($purchaseInformation)
    {
        if (is_null($purchaseInformation)) {
            throw new \InvalidArgumentException('non-nullable purchaseInformation cannot be null');
        }
        $this->container['purchaseInformation'] = $purchaseInformation;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Product's quantity for the order line
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets receivedDate
     *
     * @return \DateTime|null
     */
    public function getReceivedDate()
    {
        return $this->container['receivedDate'];
    }

    /**
     * Sets receivedDate
     *
     * @param \DateTime|null $receivedDate Product's date of receipt
     *
     * @return self
     */
    public function setReceivedDate($receivedDate)
    {
        if (is_null($receivedDate)) {
            throw new \InvalidArgumentException('non-nullable receivedDate cannot be null');
        }
        $this->container['receivedDate'] = $receivedDate;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefunds[]|null
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefunds[]|null $refunds List of the refunds
     *
     * @return self
     */
    public function setRefunds($refunds)
    {
        if (is_null($refunds)) {
            throw new \InvalidArgumentException('non-nullable refunds cannot be null');
        }
        $this->container['refunds'] = $refunds;

        return $this;
    }

    /**
     * Gets shippedDate
     *
     * @return \DateTime|null
     */
    public function getShippedDate()
    {
        return $this->container['shippedDate'];
    }

    /**
     * Sets shippedDate
     *
     * @param \DateTime|null $shippedDate Order line's shipped date
     *
     * @return self
     */
    public function setShippedDate($shippedDate)
    {
        if (is_null($shippedDate)) {
            throw new \InvalidArgumentException('non-nullable shippedDate cannot be null');
        }
        $this->container['shippedDate'] = $shippedDate;

        return $this;
    }

    /**
     * Gets shippingFrom
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesShippingFrom|null
     */
    public function getShippingFrom()
    {
        return $this->container['shippingFrom'];
    }

    /**
     * Sets shippingFrom
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesShippingFrom|null $shippingFrom shippingFrom
     *
     * @return self
     */
    public function setShippingFrom($shippingFrom)
    {
        if (is_null($shippingFrom)) {
            throw new \InvalidArgumentException('non-nullable shippingFrom cannot be null');
        }
        $this->container['shippingFrom'] = $shippingFrom;

        return $this;
    }

    /**
     * Gets shippingPrice
     *
     * @return float|null
     */
    public function getShippingPrice()
    {
        return $this->container['shippingPrice'];
    }

    /**
     * Sets shippingPrice
     *
     * @param float|null $shippingPrice Total price of the order line's shipping price
     *
     * @return self
     */
    public function setShippingPrice($shippingPrice)
    {
        if (is_null($shippingPrice)) {
            throw new \InvalidArgumentException('non-nullable shippingPrice cannot be null');
        }
        $this->container['shippingPrice'] = $shippingPrice;

        return $this;
    }

    /**
     * Gets shippingPriceAmountBreakdown
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesShippingPriceAmountBreakdown|null
     */
    public function getShippingPriceAmountBreakdown()
    {
        return $this->container['shippingPriceAmountBreakdown'];
    }

    /**
     * Sets shippingPriceAmountBreakdown
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesShippingPriceAmountBreakdown|null $shippingPriceAmountBreakdown shippingPriceAmountBreakdown
     *
     * @return self
     */
    public function setShippingPriceAmountBreakdown($shippingPriceAmountBreakdown)
    {
        if (is_null($shippingPriceAmountBreakdown)) {
            throw new \InvalidArgumentException('non-nullable shippingPriceAmountBreakdown cannot be null');
        }
        $this->container['shippingPriceAmountBreakdown'] = $shippingPriceAmountBreakdown;

        return $this;
    }

    /**
     * Gets shippingTaxes
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesShippingTaxes[]|null
     */
    public function getShippingTaxes()
    {
        return $this->container['shippingTaxes'];
    }

    /**
     * Sets shippingTaxes
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesShippingTaxes[]|null $shippingTaxes List of taxes applied on shipping charges
     *
     * @return self
     */
    public function setShippingTaxes($shippingTaxes)
    {
        if (is_null($shippingTaxes)) {
            throw new \InvalidArgumentException('non-nullable shippingTaxes cannot be null');
        }
        $this->container['shippingTaxes'] = $shippingTaxes;

        return $this;
    }

    /**
     * Gets taxLegalNotice
     *
     * @return string|null
     */
    public function getTaxLegalNotice()
    {
        return $this->container['taxLegalNotice'];
    }

    /**
     * Sets taxLegalNotice
     *
     * @param string|null $taxLegalNotice The legal notice applying to the order line’s taxes
     *
     * @return self
     */
    public function setTaxLegalNotice($taxLegalNotice)
    {
        if (is_null($taxLegalNotice)) {
            throw new \InvalidArgumentException('non-nullable taxLegalNotice cannot be null');
        }
        $this->container['taxLegalNotice'] = $taxLegalNotice;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesTaxes[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesTaxes[]|null $taxes List of taxes applied on product price
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets totalCommission
     *
     * @return float|null
     */
    public function getTotalCommission()
    {
        return $this->container['totalCommission'];
    }

    /**
     * Sets totalCommission
     *
     * @param float|null $totalCommission Order line's total commission (sum of the commission fee and the commission vat)
     *
     * @return self
     */
    public function setTotalCommission($totalCommission)
    {
        if (is_null($totalCommission)) {
            throw new \InvalidArgumentException('non-nullable totalCommission cannot be null');
        }
        $this->container['totalCommission'] = $totalCommission;

        return $this;
    }

    /**
     * Gets totalPrice
     *
     * @return float|null
     */
    public function getTotalPrice()
    {
        return $this->container['totalPrice'];
    }

    /**
     * Sets totalPrice
     *
     * @param float|null $totalPrice Order line's price with shipping price and fees.
     *
     * @return self
     */
    public function setTotalPrice($totalPrice)
    {
        if (is_null($totalPrice)) {
            throw new \InvalidArgumentException('non-nullable totalPrice cannot be null');
        }
        $this->container['totalPrice'] = $totalPrice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


