<?php
/**
 * OR11Response200OrdersOrderLinesRefunds
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * OR11Response200OrdersOrderLinesRefunds Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OR11Response200OrdersOrderLinesRefunds implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OR11_Response_200_Orders_OrderLines_Refunds';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'amountBreakdown' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsAmountBreakdown',
        'commissionAmount' => 'float',
        'commissionTaxes' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsCommissionTaxes[]',
        'commissionTotalAmount' => 'float',
        'createdDate' => '\DateTime',
        'ecoContributions' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsEcoContributions[]',
        'fees' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsFees[]',
        'id' => 'string',
        'orderRefundId' => 'string',
        'purchaseInformation' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsPurchaseInformation',
        'quantity' => 'int',
        'reasonCode' => 'string',
        'refundState' => 'string',
        'shippingAmount' => 'float',
        'shippingAmountBreakdown' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsShippingAmountBreakdown',
        'shippingTaxes' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsShippingTaxes[]',
        'state' => 'string',
        'taxLegalNotice' => 'string',
        'taxes' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsTaxes[]',
        'transactionDate' => '\DateTime',
        'transactionNumber' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'amountBreakdown' => null,
        'commissionAmount' => null,
        'commissionTaxes' => null,
        'commissionTotalAmount' => null,
        'createdDate' => 'date-time',
        'ecoContributions' => null,
        'fees' => null,
        'id' => null,
        'orderRefundId' => null,
        'purchaseInformation' => null,
        'quantity' => 'int32',
        'reasonCode' => null,
        'refundState' => null,
        'shippingAmount' => null,
        'shippingAmountBreakdown' => null,
        'shippingTaxes' => null,
        'state' => null,
        'taxLegalNotice' => null,
        'taxes' => null,
        'transactionDate' => 'date-time',
        'transactionNumber' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'amountBreakdown' => false,
        'commissionAmount' => false,
        'commissionTaxes' => false,
        'commissionTotalAmount' => false,
        'createdDate' => false,
        'ecoContributions' => false,
        'fees' => false,
        'id' => false,
        'orderRefundId' => false,
        'purchaseInformation' => false,
        'quantity' => false,
        'reasonCode' => false,
        'refundState' => false,
        'shippingAmount' => false,
        'shippingAmountBreakdown' => false,
        'shippingTaxes' => false,
        'state' => false,
        'taxLegalNotice' => false,
        'taxes' => false,
        'transactionDate' => false,
        'transactionNumber' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'amountBreakdown' => 'amount_breakdown',
        'commissionAmount' => 'commission_amount',
        'commissionTaxes' => 'commission_taxes',
        'commissionTotalAmount' => 'commission_total_amount',
        'createdDate' => 'created_date',
        'ecoContributions' => 'eco_contributions',
        'fees' => 'fees',
        'id' => 'id',
        'orderRefundId' => 'order_refund_id',
        'purchaseInformation' => 'purchase_information',
        'quantity' => 'quantity',
        'reasonCode' => 'reason_code',
        'refundState' => 'refund_state',
        'shippingAmount' => 'shipping_amount',
        'shippingAmountBreakdown' => 'shipping_amount_breakdown',
        'shippingTaxes' => 'shipping_taxes',
        'state' => 'state',
        'taxLegalNotice' => 'tax_legal_notice',
        'taxes' => 'taxes',
        'transactionDate' => 'transaction_date',
        'transactionNumber' => 'transaction_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'amountBreakdown' => 'setAmountBreakdown',
        'commissionAmount' => 'setCommissionAmount',
        'commissionTaxes' => 'setCommissionTaxes',
        'commissionTotalAmount' => 'setCommissionTotalAmount',
        'createdDate' => 'setCreatedDate',
        'ecoContributions' => 'setEcoContributions',
        'fees' => 'setFees',
        'id' => 'setId',
        'orderRefundId' => 'setOrderRefundId',
        'purchaseInformation' => 'setPurchaseInformation',
        'quantity' => 'setQuantity',
        'reasonCode' => 'setReasonCode',
        'refundState' => 'setRefundState',
        'shippingAmount' => 'setShippingAmount',
        'shippingAmountBreakdown' => 'setShippingAmountBreakdown',
        'shippingTaxes' => 'setShippingTaxes',
        'state' => 'setState',
        'taxLegalNotice' => 'setTaxLegalNotice',
        'taxes' => 'setTaxes',
        'transactionDate' => 'setTransactionDate',
        'transactionNumber' => 'setTransactionNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'amountBreakdown' => 'getAmountBreakdown',
        'commissionAmount' => 'getCommissionAmount',
        'commissionTaxes' => 'getCommissionTaxes',
        'commissionTotalAmount' => 'getCommissionTotalAmount',
        'createdDate' => 'getCreatedDate',
        'ecoContributions' => 'getEcoContributions',
        'fees' => 'getFees',
        'id' => 'getId',
        'orderRefundId' => 'getOrderRefundId',
        'purchaseInformation' => 'getPurchaseInformation',
        'quantity' => 'getQuantity',
        'reasonCode' => 'getReasonCode',
        'refundState' => 'getRefundState',
        'shippingAmount' => 'getShippingAmount',
        'shippingAmountBreakdown' => 'getShippingAmountBreakdown',
        'shippingTaxes' => 'getShippingTaxes',
        'state' => 'getState',
        'taxLegalNotice' => 'getTaxLegalNotice',
        'taxes' => 'getTaxes',
        'transactionDate' => 'getTransactionDate',
        'transactionNumber' => 'getTransactionNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amountBreakdown', $data ?? [], null);
        $this->setIfExists('commissionAmount', $data ?? [], null);
        $this->setIfExists('commissionTaxes', $data ?? [], null);
        $this->setIfExists('commissionTotalAmount', $data ?? [], null);
        $this->setIfExists('createdDate', $data ?? [], null);
        $this->setIfExists('ecoContributions', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('orderRefundId', $data ?? [], null);
        $this->setIfExists('purchaseInformation', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('reasonCode', $data ?? [], null);
        $this->setIfExists('refundState', $data ?? [], null);
        $this->setIfExists('shippingAmount', $data ?? [], null);
        $this->setIfExists('shippingAmountBreakdown', $data ?? [], null);
        $this->setIfExists('shippingTaxes', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('taxLegalNotice', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('transactionDate', $data ?? [], null);
        $this->setIfExists('transactionNumber', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount Refund's amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amountBreakdown
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsAmountBreakdown|null
     */
    public function getAmountBreakdown()
    {
        return $this->container['amountBreakdown'];
    }

    /**
     * Sets amountBreakdown
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsAmountBreakdown|null $amountBreakdown amountBreakdown
     *
     * @return self
     */
    public function setAmountBreakdown($amountBreakdown)
    {
        if (is_null($amountBreakdown)) {
            throw new \InvalidArgumentException('non-nullable amountBreakdown cannot be null');
        }
        $this->container['amountBreakdown'] = $amountBreakdown;

        return $this;
    }

    /**
     * Gets commissionAmount
     *
     * @return float|null
     */
    public function getCommissionAmount()
    {
        return $this->container['commissionAmount'];
    }

    /**
     * Sets commissionAmount
     *
     * @param float|null $commissionAmount Refund's commission amount
     *
     * @return self
     */
    public function setCommissionAmount($commissionAmount)
    {
        if (is_null($commissionAmount)) {
            throw new \InvalidArgumentException('non-nullable commissionAmount cannot be null');
        }
        $this->container['commissionAmount'] = $commissionAmount;

        return $this;
    }

    /**
     * Gets commissionTaxes
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsCommissionTaxes[]|null
     */
    public function getCommissionTaxes()
    {
        return $this->container['commissionTaxes'];
    }

    /**
     * Sets commissionTaxes
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsCommissionTaxes[]|null $commissionTaxes Refund's commission taxes
     *
     * @return self
     */
    public function setCommissionTaxes($commissionTaxes)
    {
        if (is_null($commissionTaxes)) {
            throw new \InvalidArgumentException('non-nullable commissionTaxes cannot be null');
        }
        $this->container['commissionTaxes'] = $commissionTaxes;

        return $this;
    }

    /**
     * Gets commissionTotalAmount
     *
     * @return float|null
     */
    public function getCommissionTotalAmount()
    {
        return $this->container['commissionTotalAmount'];
    }

    /**
     * Sets commissionTotalAmount
     *
     * @param float|null $commissionTotalAmount The total commission amount of the refund (commission amount + commission taxes)
     *
     * @return self
     */
    public function setCommissionTotalAmount($commissionTotalAmount)
    {
        if (is_null($commissionTotalAmount)) {
            throw new \InvalidArgumentException('non-nullable commissionTotalAmount cannot be null');
        }
        $this->container['commissionTotalAmount'] = $commissionTotalAmount;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime|null $createdDate Refund's creation date
     *
     * @return self
     */
    public function setCreatedDate($createdDate)
    {
        if (is_null($createdDate)) {
            throw new \InvalidArgumentException('non-nullable createdDate cannot be null');
        }
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets ecoContributions
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsEcoContributions[]|null
     */
    public function getEcoContributions()
    {
        return $this->container['ecoContributions'];
    }

    /**
     * Sets ecoContributions
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsEcoContributions[]|null $ecoContributions List of eco-contribution amounts and corresponding producer identifiers, if applicable<br/> Only available if the operator activates the circular economy information collection.
     *
     * @return self
     */
    public function setEcoContributions($ecoContributions)
    {
        if (is_null($ecoContributions)) {
            throw new \InvalidArgumentException('non-nullable ecoContributions cannot be null');
        }
        $this->container['ecoContributions'] = $ecoContributions;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsFees[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsFees[]|null $fees List of fees refunded on the order line
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            throw new \InvalidArgumentException('non-nullable fees cannot be null');
        }
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Refund's id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets orderRefundId
     *
     * @return string|null
     */
    public function getOrderRefundId()
    {
        return $this->container['orderRefundId'];
    }

    /**
     * Sets orderRefundId
     *
     * @param string|null $orderRefundId The group identifier of the refunds created at the same time on the order
     *
     * @return self
     */
    public function setOrderRefundId($orderRefundId)
    {
        if (is_null($orderRefundId)) {
            throw new \InvalidArgumentException('non-nullable orderRefundId cannot be null');
        }
        $this->container['orderRefundId'] = $orderRefundId;

        return $this;
    }

    /**
     * Gets purchaseInformation
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsPurchaseInformation|null
     */
    public function getPurchaseInformation()
    {
        return $this->container['purchaseInformation'];
    }

    /**
     * Sets purchaseInformation
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsPurchaseInformation|null $purchaseInformation purchaseInformation
     *
     * @return self
     */
    public function setPurchaseInformation($purchaseInformation)
    {
        if (is_null($purchaseInformation)) {
            throw new \InvalidArgumentException('non-nullable purchaseInformation cannot be null');
        }
        $this->container['purchaseInformation'] = $purchaseInformation;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity The quantity of products refunded (This quantity is informative only).
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets reasonCode
     *
     * @return string|null
     */
    public function getReasonCode()
    {
        return $this->container['reasonCode'];
    }

    /**
     * Sets reasonCode
     *
     * @param string|null $reasonCode Reason's code of the refund
     *
     * @return self
     */
    public function setReasonCode($reasonCode)
    {
        if (is_null($reasonCode)) {
            throw new \InvalidArgumentException('non-nullable reasonCode cannot be null');
        }
        $this->container['reasonCode'] = $reasonCode;

        return $this;
    }

    /**
     * Gets refundState
     *
     * @return string|null
     */
    public function getRefundState()
    {
        return $this->container['refundState'];
    }

    /**
     * Sets refundState
     *
     * @param string|null $refundState Refund's state
     *
     * @return self
     */
    public function setRefundState($refundState)
    {
        if (is_null($refundState)) {
            throw new \InvalidArgumentException('non-nullable refundState cannot be null');
        }
        $this->container['refundState'] = $refundState;

        return $this;
    }

    /**
     * Gets shippingAmount
     *
     * @return float|null
     */
    public function getShippingAmount()
    {
        return $this->container['shippingAmount'];
    }

    /**
     * Sets shippingAmount
     *
     * @param float|null $shippingAmount Refund's shipping amount
     *
     * @return self
     */
    public function setShippingAmount($shippingAmount)
    {
        if (is_null($shippingAmount)) {
            throw new \InvalidArgumentException('non-nullable shippingAmount cannot be null');
        }
        $this->container['shippingAmount'] = $shippingAmount;

        return $this;
    }

    /**
     * Gets shippingAmountBreakdown
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsShippingAmountBreakdown|null
     */
    public function getShippingAmountBreakdown()
    {
        return $this->container['shippingAmountBreakdown'];
    }

    /**
     * Sets shippingAmountBreakdown
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsShippingAmountBreakdown|null $shippingAmountBreakdown shippingAmountBreakdown
     *
     * @return self
     */
    public function setShippingAmountBreakdown($shippingAmountBreakdown)
    {
        if (is_null($shippingAmountBreakdown)) {
            throw new \InvalidArgumentException('non-nullable shippingAmountBreakdown cannot be null');
        }
        $this->container['shippingAmountBreakdown'] = $shippingAmountBreakdown;

        return $this;
    }

    /**
     * Gets shippingTaxes
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsShippingTaxes[]|null
     */
    public function getShippingTaxes()
    {
        return $this->container['shippingTaxes'];
    }

    /**
     * Sets shippingTaxes
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsShippingTaxes[]|null $shippingTaxes The taxes on the shipping price
     *
     * @return self
     */
    public function setShippingTaxes($shippingTaxes)
    {
        if (is_null($shippingTaxes)) {
            throw new \InvalidArgumentException('non-nullable shippingTaxes cannot be null');
        }
        $this->container['shippingTaxes'] = $shippingTaxes;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     * @deprecated
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state Refund's state
     *
     * @return self
     * @deprecated
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets taxLegalNotice
     *
     * @return string|null
     */
    public function getTaxLegalNotice()
    {
        return $this->container['taxLegalNotice'];
    }

    /**
     * Sets taxLegalNotice
     *
     * @param string|null $taxLegalNotice The legal notice applying to the refunded order line’s taxes
     *
     * @return self
     */
    public function setTaxLegalNotice($taxLegalNotice)
    {
        if (is_null($taxLegalNotice)) {
            throw new \InvalidArgumentException('non-nullable taxLegalNotice cannot be null');
        }
        $this->container['taxLegalNotice'] = $taxLegalNotice;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsTaxes[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLinesRefundsTaxes[]|null $taxes The taxes on the price
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets transactionDate
     *
     * @return \DateTime|null
     */
    public function getTransactionDate()
    {
        return $this->container['transactionDate'];
    }

    /**
     * Sets transactionDate
     *
     * @param \DateTime|null $transactionDate The transaction date of the refund payment
     *
     * @return self
     */
    public function setTransactionDate($transactionDate)
    {
        if (is_null($transactionDate)) {
            throw new \InvalidArgumentException('non-nullable transactionDate cannot be null');
        }
        $this->container['transactionDate'] = $transactionDate;

        return $this;
    }

    /**
     * Gets transactionNumber
     *
     * @return string|null
     */
    public function getTransactionNumber()
    {
        return $this->container['transactionNumber'];
    }

    /**
     * Sets transactionNumber
     *
     * @param string|null $transactionNumber The transaction number of the refund payment
     *
     * @return self
     */
    public function setTransactionNumber($transactionNumber)
    {
        if (is_null($transactionNumber)) {
            throw new \InvalidArgumentException('non-nullable transactionNumber cannot be null');
        }
        $this->container['transactionNumber'] = $transactionNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


