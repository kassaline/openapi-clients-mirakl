<?php
/**
 * P51Response200ProductImportTrackings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * P51Response200ProductImportTrackings Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class P51Response200ProductImportTrackings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'P51_Response_200_ProductImportTrackings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'conversionOptions' => '\OpenAPI\Client\Mirakl\Model\P51Response200ProductImportTrackingsConversionOptions',
        'conversionType' => 'string',
        'dateCreated' => '\DateTime',
        'hasErrorReport' => 'bool',
        'hasNewProductReport' => 'bool',
        'hasTransformationErrorReport' => 'bool',
        'hasTransformedFile' => 'bool',
        'importId' => 'int',
        'importStatus' => 'string',
        'integrationDetails' => '\OpenAPI\Client\Mirakl\Model\P51Response200ProductImportTrackingsIntegrationDetails',
        'reasonStatus' => 'string',
        'shopId' => 'int',
        'transformLinesInError' => 'int',
        'transformLinesInSuccess' => 'int',
        'transformLinesRead' => 'int',
        'transformLinesWithWarning' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'conversionOptions' => null,
        'conversionType' => null,
        'dateCreated' => 'date-time',
        'hasErrorReport' => null,
        'hasNewProductReport' => null,
        'hasTransformationErrorReport' => null,
        'hasTransformedFile' => null,
        'importId' => 'int64',
        'importStatus' => null,
        'integrationDetails' => null,
        'reasonStatus' => null,
        'shopId' => 'int64',
        'transformLinesInError' => 'int64',
        'transformLinesInSuccess' => 'int64',
        'transformLinesRead' => 'int64',
        'transformLinesWithWarning' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'conversionOptions' => false,
        'conversionType' => false,
        'dateCreated' => false,
        'hasErrorReport' => false,
        'hasNewProductReport' => false,
        'hasTransformationErrorReport' => false,
        'hasTransformedFile' => false,
        'importId' => false,
        'importStatus' => false,
        'integrationDetails' => false,
        'reasonStatus' => false,
        'shopId' => false,
        'transformLinesInError' => false,
        'transformLinesInSuccess' => false,
        'transformLinesRead' => false,
        'transformLinesWithWarning' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conversionOptions' => 'conversion_options',
        'conversionType' => 'conversion_type',
        'dateCreated' => 'date_created',
        'hasErrorReport' => 'has_error_report',
        'hasNewProductReport' => 'has_new_product_report',
        'hasTransformationErrorReport' => 'has_transformation_error_report',
        'hasTransformedFile' => 'has_transformed_file',
        'importId' => 'import_id',
        'importStatus' => 'import_status',
        'integrationDetails' => 'integration_details',
        'reasonStatus' => 'reason_status',
        'shopId' => 'shop_id',
        'transformLinesInError' => 'transform_lines_in_error',
        'transformLinesInSuccess' => 'transform_lines_in_success',
        'transformLinesRead' => 'transform_lines_read',
        'transformLinesWithWarning' => 'transform_lines_with_warning'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conversionOptions' => 'setConversionOptions',
        'conversionType' => 'setConversionType',
        'dateCreated' => 'setDateCreated',
        'hasErrorReport' => 'setHasErrorReport',
        'hasNewProductReport' => 'setHasNewProductReport',
        'hasTransformationErrorReport' => 'setHasTransformationErrorReport',
        'hasTransformedFile' => 'setHasTransformedFile',
        'importId' => 'setImportId',
        'importStatus' => 'setImportStatus',
        'integrationDetails' => 'setIntegrationDetails',
        'reasonStatus' => 'setReasonStatus',
        'shopId' => 'setShopId',
        'transformLinesInError' => 'setTransformLinesInError',
        'transformLinesInSuccess' => 'setTransformLinesInSuccess',
        'transformLinesRead' => 'setTransformLinesRead',
        'transformLinesWithWarning' => 'setTransformLinesWithWarning'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conversionOptions' => 'getConversionOptions',
        'conversionType' => 'getConversionType',
        'dateCreated' => 'getDateCreated',
        'hasErrorReport' => 'getHasErrorReport',
        'hasNewProductReport' => 'getHasNewProductReport',
        'hasTransformationErrorReport' => 'getHasTransformationErrorReport',
        'hasTransformedFile' => 'getHasTransformedFile',
        'importId' => 'getImportId',
        'importStatus' => 'getImportStatus',
        'integrationDetails' => 'getIntegrationDetails',
        'reasonStatus' => 'getReasonStatus',
        'shopId' => 'getShopId',
        'transformLinesInError' => 'getTransformLinesInError',
        'transformLinesInSuccess' => 'getTransformLinesInSuccess',
        'transformLinesRead' => 'getTransformLinesRead',
        'transformLinesWithWarning' => 'getTransformLinesWithWarning'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('conversionOptions', $data ?? [], null);
        $this->setIfExists('conversionType', $data ?? [], null);
        $this->setIfExists('dateCreated', $data ?? [], null);
        $this->setIfExists('hasErrorReport', $data ?? [], null);
        $this->setIfExists('hasNewProductReport', $data ?? [], null);
        $this->setIfExists('hasTransformationErrorReport', $data ?? [], null);
        $this->setIfExists('hasTransformedFile', $data ?? [], null);
        $this->setIfExists('importId', $data ?? [], null);
        $this->setIfExists('importStatus', $data ?? [], null);
        $this->setIfExists('integrationDetails', $data ?? [], null);
        $this->setIfExists('reasonStatus', $data ?? [], null);
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('transformLinesInError', $data ?? [], null);
        $this->setIfExists('transformLinesInSuccess', $data ?? [], null);
        $this->setIfExists('transformLinesRead', $data ?? [], null);
        $this->setIfExists('transformLinesWithWarning', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conversionOptions
     *
     * @return \OpenAPI\Client\Mirakl\Model\P51Response200ProductImportTrackingsConversionOptions|null
     */
    public function getConversionOptions()
    {
        return $this->container['conversionOptions'];
    }

    /**
     * Sets conversionOptions
     *
     * @param \OpenAPI\Client\Mirakl\Model\P51Response200ProductImportTrackingsConversionOptions|null $conversionOptions conversionOptions
     *
     * @return self
     */
    public function setConversionOptions($conversionOptions)
    {
        if (is_null($conversionOptions)) {
            throw new \InvalidArgumentException('non-nullable conversionOptions cannot be null');
        }
        $this->container['conversionOptions'] = $conversionOptions;

        return $this;
    }

    /**
     * Gets conversionType
     *
     * @return string|null
     */
    public function getConversionType()
    {
        return $this->container['conversionType'];
    }

    /**
     * Sets conversionType
     *
     * @param string|null $conversionType Type of conversion applied on products
     *
     * @return self
     */
    public function setConversionType($conversionType)
    {
        if (is_null($conversionType)) {
            throw new \InvalidArgumentException('non-nullable conversionType cannot be null');
        }
        $this->container['conversionType'] = $conversionType;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime|null $dateCreated Import creation date
     *
     * @return self
     */
    public function setDateCreated($dateCreated)
    {
        if (is_null($dateCreated)) {
            throw new \InvalidArgumentException('non-nullable dateCreated cannot be null');
        }
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets hasErrorReport
     *
     * @return bool|null
     */
    public function getHasErrorReport()
    {
        return $this->container['hasErrorReport'];
    }

    /**
     * Sets hasErrorReport
     *
     * @param bool|null $hasErrorReport Returns true if error report is available. Value is filled when the import is completed
     *
     * @return self
     */
    public function setHasErrorReport($hasErrorReport)
    {
        if (is_null($hasErrorReport)) {
            throw new \InvalidArgumentException('non-nullable hasErrorReport cannot be null');
        }
        $this->container['hasErrorReport'] = $hasErrorReport;

        return $this;
    }

    /**
     * Gets hasNewProductReport
     *
     * @return bool|null
     */
    public function getHasNewProductReport()
    {
        return $this->container['hasNewProductReport'];
    }

    /**
     * Sets hasNewProductReport
     *
     * @param bool|null $hasNewProductReport Returns true if new product report is available. Value is filled when the import is completed
     *
     * @return self
     */
    public function setHasNewProductReport($hasNewProductReport)
    {
        if (is_null($hasNewProductReport)) {
            throw new \InvalidArgumentException('non-nullable hasNewProductReport cannot be null');
        }
        $this->container['hasNewProductReport'] = $hasNewProductReport;

        return $this;
    }

    /**
     * Gets hasTransformationErrorReport
     *
     * @return bool|null
     */
    public function getHasTransformationErrorReport()
    {
        return $this->container['hasTransformationErrorReport'];
    }

    /**
     * Sets hasTransformationErrorReport
     *
     * @param bool|null $hasTransformationErrorReport Returns true if transformation error report is available. Value is filled when the import is completed
     *
     * @return self
     */
    public function setHasTransformationErrorReport($hasTransformationErrorReport)
    {
        if (is_null($hasTransformationErrorReport)) {
            throw new \InvalidArgumentException('non-nullable hasTransformationErrorReport cannot be null');
        }
        $this->container['hasTransformationErrorReport'] = $hasTransformationErrorReport;

        return $this;
    }

    /**
     * Gets hasTransformedFile
     *
     * @return bool|null
     */
    public function getHasTransformedFile()
    {
        return $this->container['hasTransformedFile'];
    }

    /**
     * Sets hasTransformedFile
     *
     * @param bool|null $hasTransformedFile Returns true if transformed file is available. Value is filled when the import is completed
     *
     * @return self
     */
    public function setHasTransformedFile($hasTransformedFile)
    {
        if (is_null($hasTransformedFile)) {
            throw new \InvalidArgumentException('non-nullable hasTransformedFile cannot be null');
        }
        $this->container['hasTransformedFile'] = $hasTransformedFile;

        return $this;
    }

    /**
     * Gets importId
     *
     * @return int|null
     */
    public function getImportId()
    {
        return $this->container['importId'];
    }

    /**
     * Sets importId
     *
     * @param int|null $importId Import identifier
     *
     * @return self
     */
    public function setImportId($importId)
    {
        if (is_null($importId)) {
            throw new \InvalidArgumentException('non-nullable importId cannot be null');
        }
        $this->container['importId'] = $importId;

        return $this;
    }

    /**
     * Gets importStatus
     *
     * @return string|null
     */
    public function getImportStatus()
    {
        return $this->container['importStatus'];
    }

    /**
     * Sets importStatus
     *
     * @param string|null $importStatus Import status
     *
     * @return self
     */
    public function setImportStatus($importStatus)
    {
        if (is_null($importStatus)) {
            throw new \InvalidArgumentException('non-nullable importStatus cannot be null');
        }
        $this->container['importStatus'] = $importStatus;

        return $this;
    }

    /**
     * Gets integrationDetails
     *
     * @return \OpenAPI\Client\Mirakl\Model\P51Response200ProductImportTrackingsIntegrationDetails|null
     */
    public function getIntegrationDetails()
    {
        return $this->container['integrationDetails'];
    }

    /**
     * Sets integrationDetails
     *
     * @param \OpenAPI\Client\Mirakl\Model\P51Response200ProductImportTrackingsIntegrationDetails|null $integrationDetails integrationDetails
     *
     * @return self
     */
    public function setIntegrationDetails($integrationDetails)
    {
        if (is_null($integrationDetails)) {
            throw new \InvalidArgumentException('non-nullable integrationDetails cannot be null');
        }
        $this->container['integrationDetails'] = $integrationDetails;

        return $this;
    }

    /**
     * Gets reasonStatus
     *
     * @return string|null
     */
    public function getReasonStatus()
    {
        return $this->container['reasonStatus'];
    }

    /**
     * Sets reasonStatus
     *
     * @param string|null $reasonStatus A message explaining the reason of the import status, if relevant
     *
     * @return self
     */
    public function setReasonStatus($reasonStatus)
    {
        if (is_null($reasonStatus)) {
            throw new \InvalidArgumentException('non-nullable reasonStatus cannot be null');
        }
        $this->container['reasonStatus'] = $reasonStatus;

        return $this;
    }

    /**
     * Gets shopId
     *
     * @return int|null
     */
    public function getShopId()
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId
     *
     * @param int|null $shopId Shop identifier
     *
     * @return self
     */
    public function setShopId($shopId)
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets transformLinesInError
     *
     * @return int|null
     */
    public function getTransformLinesInError()
    {
        return $this->container['transformLinesInError'];
    }

    /**
     * Sets transformLinesInError
     *
     * @param int|null $transformLinesInError Total count of transformed lines in error
     *
     * @return self
     */
    public function setTransformLinesInError($transformLinesInError)
    {
        if (is_null($transformLinesInError)) {
            throw new \InvalidArgumentException('non-nullable transformLinesInError cannot be null');
        }
        $this->container['transformLinesInError'] = $transformLinesInError;

        return $this;
    }

    /**
     * Gets transformLinesInSuccess
     *
     * @return int|null
     */
    public function getTransformLinesInSuccess()
    {
        return $this->container['transformLinesInSuccess'];
    }

    /**
     * Sets transformLinesInSuccess
     *
     * @param int|null $transformLinesInSuccess Total count of transformed lines in success
     *
     * @return self
     */
    public function setTransformLinesInSuccess($transformLinesInSuccess)
    {
        if (is_null($transformLinesInSuccess)) {
            throw new \InvalidArgumentException('non-nullable transformLinesInSuccess cannot be null');
        }
        $this->container['transformLinesInSuccess'] = $transformLinesInSuccess;

        return $this;
    }

    /**
     * Gets transformLinesRead
     *
     * @return int|null
     */
    public function getTransformLinesRead()
    {
        return $this->container['transformLinesRead'];
    }

    /**
     * Sets transformLinesRead
     *
     * @param int|null $transformLinesRead Total count of transformed lines read
     *
     * @return self
     */
    public function setTransformLinesRead($transformLinesRead)
    {
        if (is_null($transformLinesRead)) {
            throw new \InvalidArgumentException('non-nullable transformLinesRead cannot be null');
        }
        $this->container['transformLinesRead'] = $transformLinesRead;

        return $this;
    }

    /**
     * Gets transformLinesWithWarning
     *
     * @return int|null
     */
    public function getTransformLinesWithWarning()
    {
        return $this->container['transformLinesWithWarning'];
    }

    /**
     * Sets transformLinesWithWarning
     *
     * @param int|null $transformLinesWithWarning Total count of transformed lines with warning
     *
     * @return self
     */
    public function setTransformLinesWithWarning($transformLinesWithWarning)
    {
        if (is_null($transformLinesWithWarning)) {
            throw new \InvalidArgumentException('non-nullable transformLinesWithWarning cannot be null');
        }
        $this->container['transformLinesWithWarning'] = $transformLinesWithWarning;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


