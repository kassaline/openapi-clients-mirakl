<?php
/**
 * ST11Response200DataTracking
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * ST11Response200DataTracking Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ST11Response200DataTracking implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ST11_Response_200_Data_Tracking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'carrierCode' => 'string',
        'carrierName' => 'string',
        'carrierStandardCode' => 'string',
        'lastKnownLocation' => '\OpenAPI\Client\Mirakl\Model\ST11Response200DataTrackingLastKnownLocation',
        'milestones' => '\OpenAPI\Client\Mirakl\Model\ST11Response200DataTrackingMilestones[]',
        'trackingNumber' => 'string',
        'trackingUrl' => 'string',
        'validityStatus' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'carrierCode' => null,
        'carrierName' => null,
        'carrierStandardCode' => null,
        'lastKnownLocation' => null,
        'milestones' => null,
        'trackingNumber' => null,
        'trackingUrl' => null,
        'validityStatus' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'carrierCode' => false,
        'carrierName' => false,
        'carrierStandardCode' => false,
        'lastKnownLocation' => false,
        'milestones' => false,
        'trackingNumber' => false,
        'trackingUrl' => false,
        'validityStatus' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrierCode' => 'carrier_code',
        'carrierName' => 'carrier_name',
        'carrierStandardCode' => 'carrier_standard_code',
        'lastKnownLocation' => 'last_known_location',
        'milestones' => 'milestones',
        'trackingNumber' => 'tracking_number',
        'trackingUrl' => 'tracking_url',
        'validityStatus' => 'validity_status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrierCode' => 'setCarrierCode',
        'carrierName' => 'setCarrierName',
        'carrierStandardCode' => 'setCarrierStandardCode',
        'lastKnownLocation' => 'setLastKnownLocation',
        'milestones' => 'setMilestones',
        'trackingNumber' => 'setTrackingNumber',
        'trackingUrl' => 'setTrackingUrl',
        'validityStatus' => 'setValidityStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrierCode' => 'getCarrierCode',
        'carrierName' => 'getCarrierName',
        'carrierStandardCode' => 'getCarrierStandardCode',
        'lastKnownLocation' => 'getLastKnownLocation',
        'milestones' => 'getMilestones',
        'trackingNumber' => 'getTrackingNumber',
        'trackingUrl' => 'getTrackingUrl',
        'validityStatus' => 'getValidityStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('carrierCode', $data ?? [], null);
        $this->setIfExists('carrierName', $data ?? [], null);
        $this->setIfExists('carrierStandardCode', $data ?? [], null);
        $this->setIfExists('lastKnownLocation', $data ?? [], null);
        $this->setIfExists('milestones', $data ?? [], null);
        $this->setIfExists('trackingNumber', $data ?? [], null);
        $this->setIfExists('trackingUrl', $data ?? [], null);
        $this->setIfExists('validityStatus', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrierCode
     *
     * @return string|null
     */
    public function getCarrierCode()
    {
        return $this->container['carrierCode'];
    }

    /**
     * Sets carrierCode
     *
     * @param string|null $carrierCode The code of a carrier. This information is mandatory for a registered carrier.
     *
     * @return self
     */
    public function setCarrierCode($carrierCode)
    {
        if (is_null($carrierCode)) {
            throw new \InvalidArgumentException('non-nullable carrierCode cannot be null');
        }
        $this->container['carrierCode'] = $carrierCode;

        return $this;
    }

    /**
     * Gets carrierName
     *
     * @return string|null
     */
    public function getCarrierName()
    {
        return $this->container['carrierName'];
    }

    /**
     * Sets carrierName
     *
     * @param string|null $carrierName The name of a carrier. This information is mandatory for an unregistered carrier.
     *
     * @return self
     */
    public function setCarrierName($carrierName)
    {
        if (is_null($carrierName)) {
            throw new \InvalidArgumentException('non-nullable carrierName cannot be null');
        }
        $this->container['carrierName'] = $carrierName;

        return $this;
    }

    /**
     * Gets carrierStandardCode
     *
     * @return string|null
     */
    public function getCarrierStandardCode()
    {
        return $this->container['carrierStandardCode'];
    }

    /**
     * Sets carrierStandardCode
     *
     * @param string|null $carrierStandardCode The standard code of a carrier based on mirakl carrier referential
     *
     * @return self
     */
    public function setCarrierStandardCode($carrierStandardCode)
    {
        if (is_null($carrierStandardCode)) {
            throw new \InvalidArgumentException('non-nullable carrierStandardCode cannot be null');
        }
        $this->container['carrierStandardCode'] = $carrierStandardCode;

        return $this;
    }

    /**
     * Gets lastKnownLocation
     *
     * @return \OpenAPI\Client\Mirakl\Model\ST11Response200DataTrackingLastKnownLocation|null
     */
    public function getLastKnownLocation()
    {
        return $this->container['lastKnownLocation'];
    }

    /**
     * Sets lastKnownLocation
     *
     * @param \OpenAPI\Client\Mirakl\Model\ST11Response200DataTrackingLastKnownLocation|null $lastKnownLocation lastKnownLocation
     *
     * @return self
     */
    public function setLastKnownLocation($lastKnownLocation)
    {
        if (is_null($lastKnownLocation)) {
            throw new \InvalidArgumentException('non-nullable lastKnownLocation cannot be null');
        }
        $this->container['lastKnownLocation'] = $lastKnownLocation;

        return $this;
    }

    /**
     * Gets milestones
     *
     * @return \OpenAPI\Client\Mirakl\Model\ST11Response200DataTrackingMilestones[]|null
     */
    public function getMilestones()
    {
        return $this->container['milestones'];
    }

    /**
     * Sets milestones
     *
     * @param \OpenAPI\Client\Mirakl\Model\ST11Response200DataTrackingMilestones[]|null $milestones Retrieves the main stages of the delivery of a shipment coming from carrier's systems
     *
     * @return self
     */
    public function setMilestones($milestones)
    {
        if (is_null($milestones)) {
            throw new \InvalidArgumentException('non-nullable milestones cannot be null');
        }
        $this->container['milestones'] = $milestones;

        return $this;
    }

    /**
     * Gets trackingNumber
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['trackingNumber'];
    }

    /**
     * Sets trackingNumber
     *
     * @param string|null $trackingNumber The carrier tracking number. This information is mandatory for a registered carrier with a URL requiring a tracking number.
     *
     * @return self
     */
    public function setTrackingNumber($trackingNumber)
    {
        if (is_null($trackingNumber)) {
            throw new \InvalidArgumentException('non-nullable trackingNumber cannot be null');
        }
        $this->container['trackingNumber'] = $trackingNumber;

        return $this;
    }

    /**
     * Gets trackingUrl
     *
     * @return string|null
     */
    public function getTrackingUrl()
    {
        return $this->container['trackingUrl'];
    }

    /**
     * Sets trackingUrl
     *
     * @param string|null $trackingUrl The tracking url of a carrier. This information is unused for registered carriers (because computed automatically). This information is optional for unregistered carriers.
     *
     * @return self
     */
    public function setTrackingUrl($trackingUrl)
    {
        if (is_null($trackingUrl)) {
            throw new \InvalidArgumentException('non-nullable trackingUrl cannot be null');
        }
        $this->container['trackingUrl'] = $trackingUrl;

        return $this;
    }

    /**
     * Gets validityStatus
     *
     * @return string|null
     */
    public function getValidityStatus()
    {
        return $this->container['validityStatus'];
    }

    /**
     * Sets validityStatus
     *
     * @param string|null $validityStatus Retrieves if mirakl is able to get tracking information (if not, then unverified) and if we manage to get tracking information and if we do get tracking information on this tracking, then it moves to verified, if we don't it remains in unverified
     *
     * @return self
     */
    public function setValidityStatus($validityStatus)
    {
        if (is_null($validityStatus)) {
            throw new \InvalidArgumentException('non-nullable validityStatus cannot be null');
        }
        $this->container['validityStatus'] = $validityStatus;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


