<?php
/**
 * UnitEmbedded
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * The version of the OpenAPI document: 2.18.3
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * UnitEmbedded Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UnitEmbedded implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UnitEmbedded';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => '\OpenAPI\Client\Mirakl\Model\UnitStatuses',
        'currency' => '\OpenAPI\Client\Mirakl\Model\Currency',
        'condition' => '\OpenAPI\Client\Mirakl\Model\UnitCondition',
        'idUnit' => 'int',
        'note' => 'string',
        'listingPrice' => 'int',
        'minimumPrice' => 'int',
        'price' => 'int',
        'idOffer' => 'string',
        'idProduct' => 'int',
        'idShippingGroup' => 'int',
        'idWarehouse' => 'int',
        'amount' => 'int',
        'dateInsertedIso' => '\DateTime',
        'dateLastchangeIso' => '\DateTime',
        'handlingTime' => 'int',
        'shippingRate' => 'int',
        'storefront' => '\OpenAPI\Client\Mirakl\Model\Storefront',
        'transportTimeMin' => 'int',
        'transportTimeMax' => 'int',
        'product' => '\OpenAPI\Client\Mirakl\Model\Product',
        'fulfillmentType' => '\OpenAPI\Client\Mirakl\Model\FulfillmentType',
        'vatIndicator' => '\OpenAPI\Client\Mirakl\Model\VatIndicator'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'currency' => null,
        'condition' => null,
        'idUnit' => 'int64',
        'note' => null,
        'listingPrice' => 'int32',
        'minimumPrice' => 'int32',
        'price' => 'int32',
        'idOffer' => null,
        'idProduct' => 'int64',
        'idShippingGroup' => 'int64',
        'idWarehouse' => 'int64',
        'amount' => 'int32',
        'dateInsertedIso' => 'date-time',
        'dateLastchangeIso' => 'date-time',
        'handlingTime' => 'int32',
        'shippingRate' => 'int32',
        'storefront' => null,
        'transportTimeMin' => 'int32',
        'transportTimeMax' => 'int32',
        'product' => null,
        'fulfillmentType' => null,
        'vatIndicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'status' => false,
        'currency' => false,
        'condition' => false,
        'idUnit' => false,
        'note' => true,
        'listingPrice' => false,
        'minimumPrice' => false,
        'price' => false,
        'idOffer' => true,
        'idProduct' => false,
        'idShippingGroup' => true,
        'idWarehouse' => true,
        'amount' => false,
        'dateInsertedIso' => false,
        'dateLastchangeIso' => false,
        'handlingTime' => false,
        'shippingRate' => false,
        'storefront' => false,
        'transportTimeMin' => false,
        'transportTimeMax' => false,
        'product' => false,
        'fulfillmentType' => false,
        'vatIndicator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'currency' => 'currency',
        'condition' => 'condition',
        'idUnit' => 'id_unit',
        'note' => 'note',
        'listingPrice' => 'listing_price',
        'minimumPrice' => 'minimum_price',
        'price' => 'price',
        'idOffer' => 'id_offer',
        'idProduct' => 'id_product',
        'idShippingGroup' => 'id_shipping_group',
        'idWarehouse' => 'id_warehouse',
        'amount' => 'amount',
        'dateInsertedIso' => 'date_inserted_iso',
        'dateLastchangeIso' => 'date_lastchange_iso',
        'handlingTime' => 'handling_time',
        'shippingRate' => 'shipping_rate',
        'storefront' => 'storefront',
        'transportTimeMin' => 'transport_time_min',
        'transportTimeMax' => 'transport_time_max',
        'product' => 'product',
        'fulfillmentType' => 'fulfillment_type',
        'vatIndicator' => 'vat_indicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'currency' => 'setCurrency',
        'condition' => 'setCondition',
        'idUnit' => 'setIdUnit',
        'note' => 'setNote',
        'listingPrice' => 'setListingPrice',
        'minimumPrice' => 'setMinimumPrice',
        'price' => 'setPrice',
        'idOffer' => 'setIdOffer',
        'idProduct' => 'setIdProduct',
        'idShippingGroup' => 'setIdShippingGroup',
        'idWarehouse' => 'setIdWarehouse',
        'amount' => 'setAmount',
        'dateInsertedIso' => 'setDateInsertedIso',
        'dateLastchangeIso' => 'setDateLastchangeIso',
        'handlingTime' => 'setHandlingTime',
        'shippingRate' => 'setShippingRate',
        'storefront' => 'setStorefront',
        'transportTimeMin' => 'setTransportTimeMin',
        'transportTimeMax' => 'setTransportTimeMax',
        'product' => 'setProduct',
        'fulfillmentType' => 'setFulfillmentType',
        'vatIndicator' => 'setVatIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'currency' => 'getCurrency',
        'condition' => 'getCondition',
        'idUnit' => 'getIdUnit',
        'note' => 'getNote',
        'listingPrice' => 'getListingPrice',
        'minimumPrice' => 'getMinimumPrice',
        'price' => 'getPrice',
        'idOffer' => 'getIdOffer',
        'idProduct' => 'getIdProduct',
        'idShippingGroup' => 'getIdShippingGroup',
        'idWarehouse' => 'getIdWarehouse',
        'amount' => 'getAmount',
        'dateInsertedIso' => 'getDateInsertedIso',
        'dateLastchangeIso' => 'getDateLastchangeIso',
        'handlingTime' => 'getHandlingTime',
        'shippingRate' => 'getShippingRate',
        'storefront' => 'getStorefront',
        'transportTimeMin' => 'getTransportTimeMin',
        'transportTimeMax' => 'getTransportTimeMax',
        'product' => 'getProduct',
        'fulfillmentType' => 'getFulfillmentType',
        'vatIndicator' => 'getVatIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('condition', $data ?? [], null);
        $this->setIfExists('idUnit', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('listingPrice', $data ?? [], null);
        $this->setIfExists('minimumPrice', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('idOffer', $data ?? [], null);
        $this->setIfExists('idProduct', $data ?? [], null);
        $this->setIfExists('idShippingGroup', $data ?? [], null);
        $this->setIfExists('idWarehouse', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('dateInsertedIso', $data ?? [], null);
        $this->setIfExists('dateLastchangeIso', $data ?? [], null);
        $this->setIfExists('handlingTime', $data ?? [], null);
        $this->setIfExists('shippingRate', $data ?? [], null);
        $this->setIfExists('storefront', $data ?? [], null);
        $this->setIfExists('transportTimeMin', $data ?? [], null);
        $this->setIfExists('transportTimeMax', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('fulfillmentType', $data ?? [], null);
        $this->setIfExists('vatIndicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['condition'] === null) {
            $invalidProperties[] = "'condition' can't be null";
        }
        if ($this->container['idUnit'] === null) {
            $invalidProperties[] = "'idUnit' can't be null";
        }
        if (($this->container['idUnit'] < 1)) {
            $invalidProperties[] = "invalid value for 'idUnit', must be bigger than or equal to 1.";
        }

        if ($this->container['note'] === null) {
            $invalidProperties[] = "'note' can't be null";
        }
        if ($this->container['listingPrice'] === null) {
            $invalidProperties[] = "'listingPrice' can't be null";
        }
        if (($this->container['listingPrice'] < 1)) {
            $invalidProperties[] = "invalid value for 'listingPrice', must be bigger than or equal to 1.";
        }

        if ($this->container['minimumPrice'] === null) {
            $invalidProperties[] = "'minimumPrice' can't be null";
        }
        if (($this->container['minimumPrice'] < 1)) {
            $invalidProperties[] = "invalid value for 'minimumPrice', must be bigger than or equal to 1.";
        }

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if (($this->container['price'] < 1)) {
            $invalidProperties[] = "invalid value for 'price', must be bigger than or equal to 1.";
        }

        if ($this->container['idOffer'] === null) {
            $invalidProperties[] = "'idOffer' can't be null";
        }
        if ($this->container['idProduct'] === null) {
            $invalidProperties[] = "'idProduct' can't be null";
        }
        if (($this->container['idProduct'] < 1)) {
            $invalidProperties[] = "invalid value for 'idProduct', must be bigger than or equal to 1.";
        }

        if ($this->container['idShippingGroup'] === null) {
            $invalidProperties[] = "'idShippingGroup' can't be null";
        }
        if (($this->container['idShippingGroup'] < 1)) {
            $invalidProperties[] = "invalid value for 'idShippingGroup', must be bigger than or equal to 1.";
        }

        if ($this->container['idWarehouse'] === null) {
            $invalidProperties[] = "'idWarehouse' can't be null";
        }
        if (($this->container['idWarehouse'] < 1)) {
            $invalidProperties[] = "invalid value for 'idWarehouse', must be bigger than or equal to 1.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if ($this->container['dateInsertedIso'] === null) {
            $invalidProperties[] = "'dateInsertedIso' can't be null";
        }
        if ($this->container['dateLastchangeIso'] === null) {
            $invalidProperties[] = "'dateLastchangeIso' can't be null";
        }
        if ($this->container['handlingTime'] === null) {
            $invalidProperties[] = "'handlingTime' can't be null";
        }
        if (($this->container['handlingTime'] > 100)) {
            $invalidProperties[] = "invalid value for 'handlingTime', must be smaller than or equal to 100.";
        }

        if (($this->container['handlingTime'] < 0)) {
            $invalidProperties[] = "invalid value for 'handlingTime', must be bigger than or equal to 0.";
        }

        if ($this->container['shippingRate'] === null) {
            $invalidProperties[] = "'shippingRate' can't be null";
        }
        if (($this->container['shippingRate'] < 0)) {
            $invalidProperties[] = "invalid value for 'shippingRate', must be bigger than or equal to 0.";
        }

        if ($this->container['storefront'] === null) {
            $invalidProperties[] = "'storefront' can't be null";
        }
        if ($this->container['transportTimeMin'] === null) {
            $invalidProperties[] = "'transportTimeMin' can't be null";
        }
        if (($this->container['transportTimeMin'] < 1)) {
            $invalidProperties[] = "invalid value for 'transportTimeMin', must be bigger than or equal to 1.";
        }

        if ($this->container['transportTimeMax'] === null) {
            $invalidProperties[] = "'transportTimeMax' can't be null";
        }
        if (($this->container['transportTimeMax'] < 1)) {
            $invalidProperties[] = "invalid value for 'transportTimeMax', must be bigger than or equal to 1.";
        }

        if ($this->container['fulfillmentType'] === null) {
            $invalidProperties[] = "'fulfillmentType' can't be null";
        }
        if ($this->container['vatIndicator'] === null) {
            $invalidProperties[] = "'vatIndicator' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Mirakl\Model\UnitStatuses
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Mirakl\Model\UnitStatuses $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Mirakl\Model\Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Mirakl\Model\Currency $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return \OpenAPI\Client\Mirakl\Model\UnitCondition
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param \OpenAPI\Client\Mirakl\Model\UnitCondition $condition condition
     *
     * @return self
     */
    public function setCondition($condition)
    {
        if (is_null($condition)) {
            throw new \InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets idUnit
     *
     * @return int
     */
    public function getIdUnit()
    {
        return $this->container['idUnit'];
    }

    /**
     * Sets idUnit
     *
     * @param int $idUnit Internal ID of Unit, unique across all Units
     *
     * @return self
     */
    public function setIdUnit($idUnit)
    {
        if (is_null($idUnit)) {
            throw new \InvalidArgumentException('non-nullable idUnit cannot be null');
        }

        if (($idUnit < 1)) {
            throw new \InvalidArgumentException('invalid value for $idUnit when calling UnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['idUnit'] = $idUnit;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note A note for this unit
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets listingPrice
     *
     * @return int
     */
    public function getListingPrice()
    {
        return $this->container['listingPrice'];
    }

    /**
     * Sets listingPrice
     *
     * @param int $listingPrice Listing price, available only for Seller
     *
     * @return self
     */
    public function setListingPrice($listingPrice)
    {
        if (is_null($listingPrice)) {
            throw new \InvalidArgumentException('non-nullable listingPrice cannot be null');
        }

        if (($listingPrice < 1)) {
            throw new \InvalidArgumentException('invalid value for $listingPrice when calling UnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['listingPrice'] = $listingPrice;

        return $this;
    }

    /**
     * Gets minimumPrice
     *
     * @return int
     */
    public function getMinimumPrice()
    {
        return $this->container['minimumPrice'];
    }

    /**
     * Sets minimumPrice
     *
     * @param int $minimumPrice Minimum price, available only for Seller with Smart Pricing feature enabled
     *
     * @return self
     */
    public function setMinimumPrice($minimumPrice)
    {
        if (is_null($minimumPrice)) {
            throw new \InvalidArgumentException('non-nullable minimumPrice cannot be null');
        }

        if (($minimumPrice < 1)) {
            throw new \InvalidArgumentException('invalid value for $minimumPrice when calling UnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['minimumPrice'] = $minimumPrice;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int $price Price at which this unit will be offered on Kaufland.de
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }

        if (($price < 1)) {
            throw new \InvalidArgumentException('invalid value for $price when calling UnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets idOffer
     *
     * @return string
     */
    public function getIdOffer()
    {
        return $this->container['idOffer'];
    }

    /**
     * Sets idOffer
     *
     * @param string $idOffer Seller's unique ID for offer(s)
     *
     * @return self
     */
    public function setIdOffer($idOffer)
    {
        if (is_null($idOffer)) {
            array_push($this->openAPINullablesSetToNull, 'idOffer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idOffer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idOffer'] = $idOffer;

        return $this;
    }

    /**
     * Gets idProduct
     *
     * @return int
     */
    public function getIdProduct()
    {
        return $this->container['idProduct'];
    }

    /**
     * Sets idProduct
     *
     * @param int $idProduct Internal ID of Product, unique across all Products
     *
     * @return self
     */
    public function setIdProduct($idProduct)
    {
        if (is_null($idProduct)) {
            throw new \InvalidArgumentException('non-nullable idProduct cannot be null');
        }

        if (($idProduct < 1)) {
            throw new \InvalidArgumentException('invalid value for $idProduct when calling UnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['idProduct'] = $idProduct;

        return $this;
    }

    /**
     * Gets idShippingGroup
     *
     * @return int
     */
    public function getIdShippingGroup()
    {
        return $this->container['idShippingGroup'];
    }

    /**
     * Sets idShippingGroup
     *
     * @param int $idShippingGroup ID of the shipping group
     *
     * @return self
     */
    public function setIdShippingGroup($idShippingGroup)
    {
        if (is_null($idShippingGroup)) {
            array_push($this->openAPINullablesSetToNull, 'idShippingGroup');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idShippingGroup', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($idShippingGroup) && ($idShippingGroup < 1)) {
            throw new \InvalidArgumentException('invalid value for $idShippingGroup when calling UnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['idShippingGroup'] = $idShippingGroup;

        return $this;
    }

    /**
     * Gets idWarehouse
     *
     * @return int
     */
    public function getIdWarehouse()
    {
        return $this->container['idWarehouse'];
    }

    /**
     * Sets idWarehouse
     *
     * @param int $idWarehouse ID of warehouse
     *
     * @return self
     */
    public function setIdWarehouse($idWarehouse)
    {
        if (is_null($idWarehouse)) {
            array_push($this->openAPINullablesSetToNull, 'idWarehouse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idWarehouse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($idWarehouse) && ($idWarehouse < 1)) {
            throw new \InvalidArgumentException('invalid value for $idWarehouse when calling UnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['idWarehouse'] = $idWarehouse;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Amount of available Units
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling UnitEmbedded., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets dateInsertedIso
     *
     * @return \DateTime
     */
    public function getDateInsertedIso()
    {
        return $this->container['dateInsertedIso'];
    }

    /**
     * Sets dateInsertedIso
     *
     * @param \DateTime $dateInsertedIso DateTime when unit was created
     *
     * @return self
     */
    public function setDateInsertedIso($dateInsertedIso)
    {
        if (is_null($dateInsertedIso)) {
            throw new \InvalidArgumentException('non-nullable dateInsertedIso cannot be null');
        }
        $this->container['dateInsertedIso'] = $dateInsertedIso;

        return $this;
    }

    /**
     * Gets dateLastchangeIso
     *
     * @return \DateTime
     */
    public function getDateLastchangeIso()
    {
        return $this->container['dateLastchangeIso'];
    }

    /**
     * Sets dateLastchangeIso
     *
     * @param \DateTime $dateLastchangeIso DateTime when unit has been edited for the last time
     *
     * @return self
     */
    public function setDateLastchangeIso($dateLastchangeIso)
    {
        if (is_null($dateLastchangeIso)) {
            throw new \InvalidArgumentException('non-nullable dateLastchangeIso cannot be null');
        }
        $this->container['dateLastchangeIso'] = $dateLastchangeIso;

        return $this;
    }

    /**
     * Gets handlingTime
     *
     * @return int
     */
    public function getHandlingTime()
    {
        return $this->container['handlingTime'];
    }

    /**
     * Sets handlingTime
     *
     * @param int $handlingTime handling time
     *
     * @return self
     */
    public function setHandlingTime($handlingTime)
    {
        if (is_null($handlingTime)) {
            throw new \InvalidArgumentException('non-nullable handlingTime cannot be null');
        }

        if (($handlingTime > 100)) {
            throw new \InvalidArgumentException('invalid value for $handlingTime when calling UnitEmbedded., must be smaller than or equal to 100.');
        }
        if (($handlingTime < 0)) {
            throw new \InvalidArgumentException('invalid value for $handlingTime when calling UnitEmbedded., must be bigger than or equal to 0.');
        }

        $this->container['handlingTime'] = $handlingTime;

        return $this;
    }

    /**
     * Gets shippingRate
     *
     * @return int
     */
    public function getShippingRate()
    {
        return $this->container['shippingRate'];
    }

    /**
     * Sets shippingRate
     *
     * @param int $shippingRate shippingRate
     *
     * @return self
     */
    public function setShippingRate($shippingRate)
    {
        if (is_null($shippingRate)) {
            throw new \InvalidArgumentException('non-nullable shippingRate cannot be null');
        }

        if (($shippingRate < 0)) {
            throw new \InvalidArgumentException('invalid value for $shippingRate when calling UnitEmbedded., must be bigger than or equal to 0.');
        }

        $this->container['shippingRate'] = $shippingRate;

        return $this;
    }

    /**
     * Gets storefront
     *
     * @return \OpenAPI\Client\Mirakl\Model\Storefront
     */
    public function getStorefront()
    {
        return $this->container['storefront'];
    }

    /**
     * Sets storefront
     *
     * @param \OpenAPI\Client\Mirakl\Model\Storefront $storefront storefront
     *
     * @return self
     */
    public function setStorefront($storefront)
    {
        if (is_null($storefront)) {
            throw new \InvalidArgumentException('non-nullable storefront cannot be null');
        }
        $this->container['storefront'] = $storefront;

        return $this;
    }

    /**
     * Gets transportTimeMin
     *
     * @return int
     */
    public function getTransportTimeMin()
    {
        return $this->container['transportTimeMin'];
    }

    /**
     * Sets transportTimeMin
     *
     * @param int $transportTimeMin Transport time minimum
     *
     * @return self
     */
    public function setTransportTimeMin($transportTimeMin)
    {
        if (is_null($transportTimeMin)) {
            throw new \InvalidArgumentException('non-nullable transportTimeMin cannot be null');
        }

        if (($transportTimeMin < 1)) {
            throw new \InvalidArgumentException('invalid value for $transportTimeMin when calling UnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['transportTimeMin'] = $transportTimeMin;

        return $this;
    }

    /**
     * Gets transportTimeMax
     *
     * @return int
     */
    public function getTransportTimeMax()
    {
        return $this->container['transportTimeMax'];
    }

    /**
     * Sets transportTimeMax
     *
     * @param int $transportTimeMax Transport time maximum
     *
     * @return self
     */
    public function setTransportTimeMax($transportTimeMax)
    {
        if (is_null($transportTimeMax)) {
            throw new \InvalidArgumentException('non-nullable transportTimeMax cannot be null');
        }

        if (($transportTimeMax < 1)) {
            throw new \InvalidArgumentException('invalid value for $transportTimeMax when calling UnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['transportTimeMax'] = $transportTimeMax;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \OpenAPI\Client\Mirakl\Model\Product|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \OpenAPI\Client\Mirakl\Model\Product|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets fulfillmentType
     *
     * @return \OpenAPI\Client\Mirakl\Model\FulfillmentType
     */
    public function getFulfillmentType()
    {
        return $this->container['fulfillmentType'];
    }

    /**
     * Sets fulfillmentType
     *
     * @param \OpenAPI\Client\Mirakl\Model\FulfillmentType $fulfillmentType fulfillmentType
     *
     * @return self
     */
    public function setFulfillmentType($fulfillmentType)
    {
        if (is_null($fulfillmentType)) {
            throw new \InvalidArgumentException('non-nullable fulfillmentType cannot be null');
        }
        $this->container['fulfillmentType'] = $fulfillmentType;

        return $this;
    }

    /**
     * Gets vatIndicator
     *
     * @return \OpenAPI\Client\Mirakl\Model\VatIndicator
     */
    public function getVatIndicator()
    {
        return $this->container['vatIndicator'];
    }

    /**
     * Sets vatIndicator
     *
     * @param \OpenAPI\Client\Mirakl\Model\VatIndicator $vatIndicator vatIndicator
     *
     * @return self
     */
    public function setVatIndicator($vatIndicator)
    {
        if (is_null($vatIndicator)) {
            throw new \InvalidArgumentException('non-nullable vatIndicator cannot be null');
        }
        $this->container['vatIndicator'] = $vatIndicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


