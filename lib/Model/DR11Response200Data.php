<?php
/**
 * DR11Response200Data
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * DR11Response200Data Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DR11Response200Data implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DR11_Response_200_Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currencyIsoCode' => 'string',
        'dateCreated' => '\DateTime',
        'documentDetails' => '\OpenAPI\Client\Mirakl\Model\DR11Response200DataDocumentDetails[]',
        'documentNumber' => 'string',
        'documentUploadDate' => '\DateTime',
        'dueDate' => '\DateTime',
        'entities' => '\OpenAPI\Client\Mirakl\Model\DR11Response200DataEntities',
        'entityDateCreated' => '\DateTime',
        'entityId' => 'string',
        'entityType' => 'string',
        'id' => 'string',
        'initialDocuments' => '\OpenAPI\Client\Mirakl\Model\DR11Response200DataInitialDocuments[]',
        'initialPaymentState' => 'string',
        'issueDate' => '\DateTime',
        'issuer' => '\OpenAPI\Client\Mirakl\Model\DR11Response200DataIssuer',
        'lastUpdated' => '\DateTime',
        'payment' => '\OpenAPI\Client\Mirakl\Model\DR11Response200DataPayment',
        'paymentDestination' => '\OpenAPI\Client\Mirakl\Model\DR11Response200DataPaymentDestination',
        'paymentTerms' => '\OpenAPI\Client\Mirakl\Model\DR11Response200DataPaymentTerms',
        'recipient' => '\OpenAPI\Client\Mirakl\Model\DR11Response200DataRecipient',
        'state' => 'string',
        'taxes' => '\OpenAPI\Client\Mirakl\Model\DR11Response200DataTaxes[]',
        'totalAmountExcludingTaxes' => 'float',
        'totalAmountIncludingTaxes' => 'float',
        'totalTaxAmount' => 'float',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'currencyIsoCode' => null,
        'dateCreated' => 'date-time',
        'documentDetails' => null,
        'documentNumber' => null,
        'documentUploadDate' => 'date-time',
        'dueDate' => 'date-time',
        'entities' => null,
        'entityDateCreated' => 'date-time',
        'entityId' => null,
        'entityType' => null,
        'id' => null,
        'initialDocuments' => null,
        'initialPaymentState' => null,
        'issueDate' => 'date-time',
        'issuer' => null,
        'lastUpdated' => 'date-time',
        'payment' => null,
        'paymentDestination' => null,
        'paymentTerms' => null,
        'recipient' => null,
        'state' => null,
        'taxes' => null,
        'totalAmountExcludingTaxes' => null,
        'totalAmountIncludingTaxes' => null,
        'totalTaxAmount' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'currencyIsoCode' => false,
        'dateCreated' => false,
        'documentDetails' => false,
        'documentNumber' => false,
        'documentUploadDate' => false,
        'dueDate' => false,
        'entities' => false,
        'entityDateCreated' => false,
        'entityId' => false,
        'entityType' => false,
        'id' => false,
        'initialDocuments' => false,
        'initialPaymentState' => false,
        'issueDate' => false,
        'issuer' => false,
        'lastUpdated' => false,
        'payment' => false,
        'paymentDestination' => false,
        'paymentTerms' => false,
        'recipient' => false,
        'state' => false,
        'taxes' => false,
        'totalAmountExcludingTaxes' => false,
        'totalAmountIncludingTaxes' => false,
        'totalTaxAmount' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currencyIsoCode' => 'currency_iso_code',
        'dateCreated' => 'date_created',
        'documentDetails' => 'document_details',
        'documentNumber' => 'document_number',
        'documentUploadDate' => 'document_upload_date',
        'dueDate' => 'due_date',
        'entities' => 'entities',
        'entityDateCreated' => 'entity_date_created',
        'entityId' => 'entity_id',
        'entityType' => 'entity_type',
        'id' => 'id',
        'initialDocuments' => 'initial_documents',
        'initialPaymentState' => 'initial_payment_state',
        'issueDate' => 'issue_date',
        'issuer' => 'issuer',
        'lastUpdated' => 'last_updated',
        'payment' => 'payment',
        'paymentDestination' => 'payment_destination',
        'paymentTerms' => 'payment_terms',
        'recipient' => 'recipient',
        'state' => 'state',
        'taxes' => 'taxes',
        'totalAmountExcludingTaxes' => 'total_amount_excluding_taxes',
        'totalAmountIncludingTaxes' => 'total_amount_including_taxes',
        'totalTaxAmount' => 'total_tax_amount',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currencyIsoCode' => 'setCurrencyIsoCode',
        'dateCreated' => 'setDateCreated',
        'documentDetails' => 'setDocumentDetails',
        'documentNumber' => 'setDocumentNumber',
        'documentUploadDate' => 'setDocumentUploadDate',
        'dueDate' => 'setDueDate',
        'entities' => 'setEntities',
        'entityDateCreated' => 'setEntityDateCreated',
        'entityId' => 'setEntityId',
        'entityType' => 'setEntityType',
        'id' => 'setId',
        'initialDocuments' => 'setInitialDocuments',
        'initialPaymentState' => 'setInitialPaymentState',
        'issueDate' => 'setIssueDate',
        'issuer' => 'setIssuer',
        'lastUpdated' => 'setLastUpdated',
        'payment' => 'setPayment',
        'paymentDestination' => 'setPaymentDestination',
        'paymentTerms' => 'setPaymentTerms',
        'recipient' => 'setRecipient',
        'state' => 'setState',
        'taxes' => 'setTaxes',
        'totalAmountExcludingTaxes' => 'setTotalAmountExcludingTaxes',
        'totalAmountIncludingTaxes' => 'setTotalAmountIncludingTaxes',
        'totalTaxAmount' => 'setTotalTaxAmount',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currencyIsoCode' => 'getCurrencyIsoCode',
        'dateCreated' => 'getDateCreated',
        'documentDetails' => 'getDocumentDetails',
        'documentNumber' => 'getDocumentNumber',
        'documentUploadDate' => 'getDocumentUploadDate',
        'dueDate' => 'getDueDate',
        'entities' => 'getEntities',
        'entityDateCreated' => 'getEntityDateCreated',
        'entityId' => 'getEntityId',
        'entityType' => 'getEntityType',
        'id' => 'getId',
        'initialDocuments' => 'getInitialDocuments',
        'initialPaymentState' => 'getInitialPaymentState',
        'issueDate' => 'getIssueDate',
        'issuer' => 'getIssuer',
        'lastUpdated' => 'getLastUpdated',
        'payment' => 'getPayment',
        'paymentDestination' => 'getPaymentDestination',
        'paymentTerms' => 'getPaymentTerms',
        'recipient' => 'getRecipient',
        'state' => 'getState',
        'taxes' => 'getTaxes',
        'totalAmountExcludingTaxes' => 'getTotalAmountExcludingTaxes',
        'totalAmountIncludingTaxes' => 'getTotalAmountIncludingTaxes',
        'totalTaxAmount' => 'getTotalTaxAmount',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('currencyIsoCode', $data ?? [], null);
        $this->setIfExists('dateCreated', $data ?? [], null);
        $this->setIfExists('documentDetails', $data ?? [], null);
        $this->setIfExists('documentNumber', $data ?? [], null);
        $this->setIfExists('documentUploadDate', $data ?? [], null);
        $this->setIfExists('dueDate', $data ?? [], null);
        $this->setIfExists('entities', $data ?? [], null);
        $this->setIfExists('entityDateCreated', $data ?? [], null);
        $this->setIfExists('entityId', $data ?? [], null);
        $this->setIfExists('entityType', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('initialDocuments', $data ?? [], null);
        $this->setIfExists('initialPaymentState', $data ?? [], null);
        $this->setIfExists('issueDate', $data ?? [], null);
        $this->setIfExists('issuer', $data ?? [], null);
        $this->setIfExists('lastUpdated', $data ?? [], null);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('paymentDestination', $data ?? [], null);
        $this->setIfExists('paymentTerms', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('totalAmountExcludingTaxes', $data ?? [], null);
        $this->setIfExists('totalAmountIncludingTaxes', $data ?? [], null);
        $this->setIfExists('totalTaxAmount', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currencyIsoCode
     *
     * @return string|null
     */
    public function getCurrencyIsoCode()
    {
        return $this->container['currencyIsoCode'];
    }

    /**
     * Sets currencyIsoCode
     *
     * @param string|null $currencyIsoCode The currency of the document request
     *
     * @return self
     */
    public function setCurrencyIsoCode($currencyIsoCode)
    {
        if (is_null($currencyIsoCode)) {
            throw new \InvalidArgumentException('non-nullable currencyIsoCode cannot be null');
        }
        $this->container['currencyIsoCode'] = $currencyIsoCode;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime|null $dateCreated The document request creation date
     *
     * @return self
     */
    public function setDateCreated($dateCreated)
    {
        if (is_null($dateCreated)) {
            throw new \InvalidArgumentException('non-nullable dateCreated cannot be null');
        }
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets documentDetails
     *
     * @return \OpenAPI\Client\Mirakl\Model\DR11Response200DataDocumentDetails[]|null
     */
    public function getDocumentDetails()
    {
        return $this->container['documentDetails'];
    }

    /**
     * Sets documentDetails
     *
     * @param \OpenAPI\Client\Mirakl\Model\DR11Response200DataDocumentDetails[]|null $documentDetails The document details
     *
     * @return self
     */
    public function setDocumentDetails($documentDetails)
    {
        if (is_null($documentDetails)) {
            throw new \InvalidArgumentException('non-nullable documentDetails cannot be null');
        }
        $this->container['documentDetails'] = $documentDetails;

        return $this;
    }

    /**
     * Gets documentNumber
     *
     * @return string|null
     */
    public function getDocumentNumber()
    {
        return $this->container['documentNumber'];
    }

    /**
     * Sets documentNumber
     *
     * @param string|null $documentNumber The accounting document number
     *
     * @return self
     */
    public function setDocumentNumber($documentNumber)
    {
        if (is_null($documentNumber)) {
            throw new \InvalidArgumentException('non-nullable documentNumber cannot be null');
        }
        $this->container['documentNumber'] = $documentNumber;

        return $this;
    }

    /**
     * Gets documentUploadDate
     *
     * @return \DateTime|null
     */
    public function getDocumentUploadDate()
    {
        return $this->container['documentUploadDate'];
    }

    /**
     * Sets documentUploadDate
     *
     * @param \DateTime|null $documentUploadDate The last upload date of the accounting document
     *
     * @return self
     */
    public function setDocumentUploadDate($documentUploadDate)
    {
        if (is_null($documentUploadDate)) {
            throw new \InvalidArgumentException('non-nullable documentUploadDate cannot be null');
        }
        $this->container['documentUploadDate'] = $documentUploadDate;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param \DateTime|null $dueDate The document due date
     *
     * @return self
     */
    public function setDueDate($dueDate)
    {
        if (is_null($dueDate)) {
            throw new \InvalidArgumentException('non-nullable dueDate cannot be null');
        }
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets entities
     *
     * @return \OpenAPI\Client\Mirakl\Model\DR11Response200DataEntities|null
     */
    public function getEntities()
    {
        return $this->container['entities'];
    }

    /**
     * Sets entities
     *
     * @param \OpenAPI\Client\Mirakl\Model\DR11Response200DataEntities|null $entities entities
     *
     * @return self
     */
    public function setEntities($entities)
    {
        if (is_null($entities)) {
            throw new \InvalidArgumentException('non-nullable entities cannot be null');
        }
        $this->container['entities'] = $entities;

        return $this;
    }

    /**
     * Gets entityDateCreated
     *
     * @return \DateTime|null
     */
    public function getEntityDateCreated()
    {
        return $this->container['entityDateCreated'];
    }

    /**
     * Sets entityDateCreated
     *
     * @param \DateTime|null $entityDateCreated The entity creation date, not applicable for entity_type=SHOP_BILLING_CYCLE_PURCHASE_ORDER
     *
     * @return self
     */
    public function setEntityDateCreated($entityDateCreated)
    {
        if (is_null($entityDateCreated)) {
            throw new \InvalidArgumentException('non-nullable entityDateCreated cannot be null');
        }
        $this->container['entityDateCreated'] = $entityDateCreated;

        return $this;
    }

    /**
     * Gets entityId
     *
     * @return string|null
     */
    public function getEntityId()
    {
        return $this->container['entityId'];
    }

    /**
     * Sets entityId
     *
     * @param string|null $entityId The entity id the document request relates to
     *
     * @return self
     */
    public function setEntityId($entityId)
    {
        if (is_null($entityId)) {
            throw new \InvalidArgumentException('non-nullable entityId cannot be null');
        }
        $this->container['entityId'] = $entityId;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string|null
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string|null $entityType The entity type the document request relates to
     *
     * @return self
     */
    public function setEntityType($entityType)
    {
        if (is_null($entityType)) {
            throw new \InvalidArgumentException('non-nullable entityType cannot be null');
        }
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The document request unique identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets initialDocuments
     *
     * @return \OpenAPI\Client\Mirakl\Model\DR11Response200DataInitialDocuments[]|null
     */
    public function getInitialDocuments()
    {
        return $this->container['initialDocuments'];
    }

    /**
     * Sets initialDocuments
     *
     * @param \OpenAPI\Client\Mirakl\Model\DR11Response200DataInitialDocuments[]|null $initialDocuments In the case of <code>CREDIT_NOTE</code> or reissued <code>INVOICE</code>, information about the initial accounting documents
     *
     * @return self
     */
    public function setInitialDocuments($initialDocuments)
    {
        if (is_null($initialDocuments)) {
            throw new \InvalidArgumentException('non-nullable initialDocuments cannot be null');
        }
        $this->container['initialDocuments'] = $initialDocuments;

        return $this;
    }

    /**
     * Gets initialPaymentState
     *
     * @return string|null
     */
    public function getInitialPaymentState()
    {
        return $this->container['initialPaymentState'];
    }

    /**
     * Sets initialPaymentState
     *
     * @param string|null $initialPaymentState The document request payment state at the time when the document request was created
     *
     * @return self
     */
    public function setInitialPaymentState($initialPaymentState)
    {
        if (is_null($initialPaymentState)) {
            throw new \InvalidArgumentException('non-nullable initialPaymentState cannot be null');
        }
        $this->container['initialPaymentState'] = $initialPaymentState;

        return $this;
    }

    /**
     * Gets issueDate
     *
     * @return \DateTime|null
     */
    public function getIssueDate()
    {
        return $this->container['issueDate'];
    }

    /**
     * Sets issueDate
     *
     * @param \DateTime|null $issueDate The document issue date
     *
     * @return self
     */
    public function setIssueDate($issueDate)
    {
        if (is_null($issueDate)) {
            throw new \InvalidArgumentException('non-nullable issueDate cannot be null');
        }
        $this->container['issueDate'] = $issueDate;

        return $this;
    }

    /**
     * Gets issuer
     *
     * @return \OpenAPI\Client\Mirakl\Model\DR11Response200DataIssuer|null
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     *
     * @param \OpenAPI\Client\Mirakl\Model\DR11Response200DataIssuer|null $issuer issuer
     *
     * @return self
     */
    public function setIssuer($issuer)
    {
        if (is_null($issuer)) {
            throw new \InvalidArgumentException('non-nullable issuer cannot be null');
        }
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets lastUpdated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['lastUpdated'];
    }

    /**
     * Sets lastUpdated
     *
     * @param \DateTime|null $lastUpdated The document request last update date
     *
     * @return self
     */
    public function setLastUpdated($lastUpdated)
    {
        if (is_null($lastUpdated)) {
            throw new \InvalidArgumentException('non-nullable lastUpdated cannot be null');
        }
        $this->container['lastUpdated'] = $lastUpdated;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \OpenAPI\Client\Mirakl\Model\DR11Response200DataPayment|null
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \OpenAPI\Client\Mirakl\Model\DR11Response200DataPayment|null $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        if (is_null($payment)) {
            throw new \InvalidArgumentException('non-nullable payment cannot be null');
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets paymentDestination
     *
     * @return \OpenAPI\Client\Mirakl\Model\DR11Response200DataPaymentDestination|null
     */
    public function getPaymentDestination()
    {
        return $this->container['paymentDestination'];
    }

    /**
     * Sets paymentDestination
     *
     * @param \OpenAPI\Client\Mirakl\Model\DR11Response200DataPaymentDestination|null $paymentDestination paymentDestination
     *
     * @return self
     */
    public function setPaymentDestination($paymentDestination)
    {
        if (is_null($paymentDestination)) {
            throw new \InvalidArgumentException('non-nullable paymentDestination cannot be null');
        }
        $this->container['paymentDestination'] = $paymentDestination;

        return $this;
    }

    /**
     * Gets paymentTerms
     *
     * @return \OpenAPI\Client\Mirakl\Model\DR11Response200DataPaymentTerms|null
     */
    public function getPaymentTerms()
    {
        return $this->container['paymentTerms'];
    }

    /**
     * Sets paymentTerms
     *
     * @param \OpenAPI\Client\Mirakl\Model\DR11Response200DataPaymentTerms|null $paymentTerms paymentTerms
     *
     * @return self
     */
    public function setPaymentTerms($paymentTerms)
    {
        if (is_null($paymentTerms)) {
            throw new \InvalidArgumentException('non-nullable paymentTerms cannot be null');
        }
        $this->container['paymentTerms'] = $paymentTerms;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return \OpenAPI\Client\Mirakl\Model\DR11Response200DataRecipient|null
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param \OpenAPI\Client\Mirakl\Model\DR11Response200DataRecipient|null $recipient recipient
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The document request state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \OpenAPI\Client\Mirakl\Model\DR11Response200DataTaxes[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \OpenAPI\Client\Mirakl\Model\DR11Response200DataTaxes[]|null $taxes Total amount of taxes aggregated per tax code and rate
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets totalAmountExcludingTaxes
     *
     * @return float|null
     */
    public function getTotalAmountExcludingTaxes()
    {
        return $this->container['totalAmountExcludingTaxes'];
    }

    /**
     * Sets totalAmountExcludingTaxes
     *
     * @param float|null $totalAmountExcludingTaxes The total document amount (excluding taxes)
     *
     * @return self
     */
    public function setTotalAmountExcludingTaxes($totalAmountExcludingTaxes)
    {
        if (is_null($totalAmountExcludingTaxes)) {
            throw new \InvalidArgumentException('non-nullable totalAmountExcludingTaxes cannot be null');
        }
        $this->container['totalAmountExcludingTaxes'] = $totalAmountExcludingTaxes;

        return $this;
    }

    /**
     * Gets totalAmountIncludingTaxes
     *
     * @return float|null
     */
    public function getTotalAmountIncludingTaxes()
    {
        return $this->container['totalAmountIncludingTaxes'];
    }

    /**
     * Sets totalAmountIncludingTaxes
     *
     * @param float|null $totalAmountIncludingTaxes The total document amount (including taxes)
     *
     * @return self
     */
    public function setTotalAmountIncludingTaxes($totalAmountIncludingTaxes)
    {
        if (is_null($totalAmountIncludingTaxes)) {
            throw new \InvalidArgumentException('non-nullable totalAmountIncludingTaxes cannot be null');
        }
        $this->container['totalAmountIncludingTaxes'] = $totalAmountIncludingTaxes;

        return $this;
    }

    /**
     * Gets totalTaxAmount
     *
     * @return float|null
     */
    public function getTotalTaxAmount()
    {
        return $this->container['totalTaxAmount'];
    }

    /**
     * Sets totalTaxAmount
     *
     * @param float|null $totalTaxAmount The total taxes amount of the document
     *
     * @return self
     */
    public function setTotalTaxAmount($totalTaxAmount)
    {
        if (is_null($totalTaxAmount)) {
            throw new \InvalidArgumentException('non-nullable totalTaxAmount cannot be null');
        }
        $this->container['totalTaxAmount'] = $totalTaxAmount;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The accounting document type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


