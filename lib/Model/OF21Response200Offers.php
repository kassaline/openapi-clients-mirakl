<?php
/**
 * OF21Response200Offers
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * OF21Response200Offers Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OF21Response200Offers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OF21_Response_200_Offers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'allPrices' => '\OpenAPI\Client\Mirakl\Model\OF21Response200OffersAllPrices[]',
        'allowQuoteRequests' => 'bool',
        'applicablePricing' => '\OpenAPI\Client\Mirakl\Model\OF21Response200OffersApplicablePricing',
        'availableEndDate' => '\DateTime',
        'availableStartDate' => '\DateTime',
        'categoryCode' => 'string',
        'categoryLabel' => 'string',
        'channels' => 'string[]',
        'currencyIsoCode' => 'string',
        'description' => 'string',
        'ecoContributions' => '\OpenAPI\Client\Mirakl\Model\OF21Response200OffersEcoContributions[]',
        'favoriteRank' => 'int',
        'fulfillment' => '\OpenAPI\Client\Mirakl\Model\OF21Response200OffersFulfillment',
        'inactivityReasons' => 'string[]',
        'internalDescription' => 'string',
        'leadtimeToShip' => 'int',
        'logisticClass' => '\OpenAPI\Client\Mirakl\Model\OF21Response200OffersLogisticClass',
        'maxOrderQuantity' => 'int',
        'minOrderQuantity' => 'int',
        'minQuantityAlert' => 'int',
        'minShippingPrice' => 'float',
        'minShippingPriceAdditional' => 'float',
        'minShippingType' => 'string',
        'minShippingZone' => 'string',
        'offerAdditionalFields' => '\OpenAPI\Client\Mirakl\Model\OF21Response200OffersOfferAdditionalFields[]',
        'offerId' => 'int',
        'packageQuantity' => 'int',
        'price' => 'float',
        'priceAdditionalInfo' => 'string',
        'productBrand' => 'string',
        'productDescription' => 'string',
        'productReferences' => '\OpenAPI\Client\Mirakl\Model\OF21Response200OffersProductReferences[]',
        'productSku' => 'string',
        'productTaxCode' => 'string',
        'productTitle' => 'string',
        'quantity' => 'int',
        'shippingDeadline' => '\DateTime',
        'shopSku' => 'string',
        'stateCode' => 'string',
        'totalPrice' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'allPrices' => null,
        'allowQuoteRequests' => null,
        'applicablePricing' => null,
        'availableEndDate' => 'date-time',
        'availableStartDate' => 'date-time',
        'categoryCode' => null,
        'categoryLabel' => null,
        'channels' => null,
        'currencyIsoCode' => null,
        'description' => null,
        'ecoContributions' => null,
        'favoriteRank' => 'int32',
        'fulfillment' => null,
        'inactivityReasons' => null,
        'internalDescription' => null,
        'leadtimeToShip' => 'int32',
        'logisticClass' => null,
        'maxOrderQuantity' => 'int32',
        'minOrderQuantity' => 'int32',
        'minQuantityAlert' => 'int32',
        'minShippingPrice' => null,
        'minShippingPriceAdditional' => null,
        'minShippingType' => null,
        'minShippingZone' => null,
        'offerAdditionalFields' => null,
        'offerId' => 'int64',
        'packageQuantity' => 'int32',
        'price' => null,
        'priceAdditionalInfo' => null,
        'productBrand' => null,
        'productDescription' => null,
        'productReferences' => null,
        'productSku' => null,
        'productTaxCode' => null,
        'productTitle' => null,
        'quantity' => 'int32',
        'shippingDeadline' => 'date-time',
        'shopSku' => null,
        'stateCode' => null,
        'totalPrice' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'active' => false,
        'allPrices' => false,
        'allowQuoteRequests' => false,
        'applicablePricing' => false,
        'availableEndDate' => false,
        'availableStartDate' => false,
        'categoryCode' => false,
        'categoryLabel' => false,
        'channels' => false,
        'currencyIsoCode' => false,
        'description' => false,
        'ecoContributions' => false,
        'favoriteRank' => false,
        'fulfillment' => false,
        'inactivityReasons' => false,
        'internalDescription' => false,
        'leadtimeToShip' => false,
        'logisticClass' => false,
        'maxOrderQuantity' => false,
        'minOrderQuantity' => false,
        'minQuantityAlert' => false,
        'minShippingPrice' => false,
        'minShippingPriceAdditional' => false,
        'minShippingType' => false,
        'minShippingZone' => false,
        'offerAdditionalFields' => false,
        'offerId' => false,
        'packageQuantity' => false,
        'price' => false,
        'priceAdditionalInfo' => false,
        'productBrand' => false,
        'productDescription' => false,
        'productReferences' => false,
        'productSku' => false,
        'productTaxCode' => false,
        'productTitle' => false,
        'quantity' => false,
        'shippingDeadline' => false,
        'shopSku' => false,
        'stateCode' => false,
        'totalPrice' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'allPrices' => 'all_prices',
        'allowQuoteRequests' => 'allow_quote_requests',
        'applicablePricing' => 'applicable_pricing',
        'availableEndDate' => 'available_end_date',
        'availableStartDate' => 'available_start_date',
        'categoryCode' => 'category_code',
        'categoryLabel' => 'category_label',
        'channels' => 'channels',
        'currencyIsoCode' => 'currency_iso_code',
        'description' => 'description',
        'ecoContributions' => 'eco_contributions',
        'favoriteRank' => 'favorite_rank',
        'fulfillment' => 'fulfillment',
        'inactivityReasons' => 'inactivity_reasons',
        'internalDescription' => 'internal_description',
        'leadtimeToShip' => 'leadtime_to_ship',
        'logisticClass' => 'logistic_class',
        'maxOrderQuantity' => 'max_order_quantity',
        'minOrderQuantity' => 'min_order_quantity',
        'minQuantityAlert' => 'min_quantity_alert',
        'minShippingPrice' => 'min_shipping_price',
        'minShippingPriceAdditional' => 'min_shipping_price_additional',
        'minShippingType' => 'min_shipping_type',
        'minShippingZone' => 'min_shipping_zone',
        'offerAdditionalFields' => 'offer_additional_fields',
        'offerId' => 'offer_id',
        'packageQuantity' => 'package_quantity',
        'price' => 'price',
        'priceAdditionalInfo' => 'price_additional_info',
        'productBrand' => 'product_brand',
        'productDescription' => 'product_description',
        'productReferences' => 'product_references',
        'productSku' => 'product_sku',
        'productTaxCode' => 'product_tax_code',
        'productTitle' => 'product_title',
        'quantity' => 'quantity',
        'shippingDeadline' => 'shipping_deadline',
        'shopSku' => 'shop_sku',
        'stateCode' => 'state_code',
        'totalPrice' => 'total_price'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'allPrices' => 'setAllPrices',
        'allowQuoteRequests' => 'setAllowQuoteRequests',
        'applicablePricing' => 'setApplicablePricing',
        'availableEndDate' => 'setAvailableEndDate',
        'availableStartDate' => 'setAvailableStartDate',
        'categoryCode' => 'setCategoryCode',
        'categoryLabel' => 'setCategoryLabel',
        'channels' => 'setChannels',
        'currencyIsoCode' => 'setCurrencyIsoCode',
        'description' => 'setDescription',
        'ecoContributions' => 'setEcoContributions',
        'favoriteRank' => 'setFavoriteRank',
        'fulfillment' => 'setFulfillment',
        'inactivityReasons' => 'setInactivityReasons',
        'internalDescription' => 'setInternalDescription',
        'leadtimeToShip' => 'setLeadtimeToShip',
        'logisticClass' => 'setLogisticClass',
        'maxOrderQuantity' => 'setMaxOrderQuantity',
        'minOrderQuantity' => 'setMinOrderQuantity',
        'minQuantityAlert' => 'setMinQuantityAlert',
        'minShippingPrice' => 'setMinShippingPrice',
        'minShippingPriceAdditional' => 'setMinShippingPriceAdditional',
        'minShippingType' => 'setMinShippingType',
        'minShippingZone' => 'setMinShippingZone',
        'offerAdditionalFields' => 'setOfferAdditionalFields',
        'offerId' => 'setOfferId',
        'packageQuantity' => 'setPackageQuantity',
        'price' => 'setPrice',
        'priceAdditionalInfo' => 'setPriceAdditionalInfo',
        'productBrand' => 'setProductBrand',
        'productDescription' => 'setProductDescription',
        'productReferences' => 'setProductReferences',
        'productSku' => 'setProductSku',
        'productTaxCode' => 'setProductTaxCode',
        'productTitle' => 'setProductTitle',
        'quantity' => 'setQuantity',
        'shippingDeadline' => 'setShippingDeadline',
        'shopSku' => 'setShopSku',
        'stateCode' => 'setStateCode',
        'totalPrice' => 'setTotalPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'allPrices' => 'getAllPrices',
        'allowQuoteRequests' => 'getAllowQuoteRequests',
        'applicablePricing' => 'getApplicablePricing',
        'availableEndDate' => 'getAvailableEndDate',
        'availableStartDate' => 'getAvailableStartDate',
        'categoryCode' => 'getCategoryCode',
        'categoryLabel' => 'getCategoryLabel',
        'channels' => 'getChannels',
        'currencyIsoCode' => 'getCurrencyIsoCode',
        'description' => 'getDescription',
        'ecoContributions' => 'getEcoContributions',
        'favoriteRank' => 'getFavoriteRank',
        'fulfillment' => 'getFulfillment',
        'inactivityReasons' => 'getInactivityReasons',
        'internalDescription' => 'getInternalDescription',
        'leadtimeToShip' => 'getLeadtimeToShip',
        'logisticClass' => 'getLogisticClass',
        'maxOrderQuantity' => 'getMaxOrderQuantity',
        'minOrderQuantity' => 'getMinOrderQuantity',
        'minQuantityAlert' => 'getMinQuantityAlert',
        'minShippingPrice' => 'getMinShippingPrice',
        'minShippingPriceAdditional' => 'getMinShippingPriceAdditional',
        'minShippingType' => 'getMinShippingType',
        'minShippingZone' => 'getMinShippingZone',
        'offerAdditionalFields' => 'getOfferAdditionalFields',
        'offerId' => 'getOfferId',
        'packageQuantity' => 'getPackageQuantity',
        'price' => 'getPrice',
        'priceAdditionalInfo' => 'getPriceAdditionalInfo',
        'productBrand' => 'getProductBrand',
        'productDescription' => 'getProductDescription',
        'productReferences' => 'getProductReferences',
        'productSku' => 'getProductSku',
        'productTaxCode' => 'getProductTaxCode',
        'productTitle' => 'getProductTitle',
        'quantity' => 'getQuantity',
        'shippingDeadline' => 'getShippingDeadline',
        'shopSku' => 'getShopSku',
        'stateCode' => 'getStateCode',
        'totalPrice' => 'getTotalPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('allPrices', $data ?? [], null);
        $this->setIfExists('allowQuoteRequests', $data ?? [], null);
        $this->setIfExists('applicablePricing', $data ?? [], null);
        $this->setIfExists('availableEndDate', $data ?? [], null);
        $this->setIfExists('availableStartDate', $data ?? [], null);
        $this->setIfExists('categoryCode', $data ?? [], null);
        $this->setIfExists('categoryLabel', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('currencyIsoCode', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('ecoContributions', $data ?? [], null);
        $this->setIfExists('favoriteRank', $data ?? [], null);
        $this->setIfExists('fulfillment', $data ?? [], null);
        $this->setIfExists('inactivityReasons', $data ?? [], null);
        $this->setIfExists('internalDescription', $data ?? [], null);
        $this->setIfExists('leadtimeToShip', $data ?? [], null);
        $this->setIfExists('logisticClass', $data ?? [], null);
        $this->setIfExists('maxOrderQuantity', $data ?? [], null);
        $this->setIfExists('minOrderQuantity', $data ?? [], null);
        $this->setIfExists('minQuantityAlert', $data ?? [], null);
        $this->setIfExists('minShippingPrice', $data ?? [], null);
        $this->setIfExists('minShippingPriceAdditional', $data ?? [], null);
        $this->setIfExists('minShippingType', $data ?? [], null);
        $this->setIfExists('minShippingZone', $data ?? [], null);
        $this->setIfExists('offerAdditionalFields', $data ?? [], null);
        $this->setIfExists('offerId', $data ?? [], null);
        $this->setIfExists('packageQuantity', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('priceAdditionalInfo', $data ?? [], null);
        $this->setIfExists('productBrand', $data ?? [], null);
        $this->setIfExists('productDescription', $data ?? [], null);
        $this->setIfExists('productReferences', $data ?? [], null);
        $this->setIfExists('productSku', $data ?? [], null);
        $this->setIfExists('productTaxCode', $data ?? [], null);
        $this->setIfExists('productTitle', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('shippingDeadline', $data ?? [], null);
        $this->setIfExists('shopSku', $data ?? [], null);
        $this->setIfExists('stateCode', $data ?? [], null);
        $this->setIfExists('totalPrice', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['ecoContributions']) && (count($this->container['ecoContributions']) > 20)) {
            $invalidProperties[] = "invalid value for 'ecoContributions', number of items must be less than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Is the offer active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets allPrices
     *
     * @return \OpenAPI\Client\Mirakl\Model\OF21Response200OffersAllPrices[]|null
     */
    public function getAllPrices()
    {
        return $this->container['allPrices'];
    }

    /**
     * Sets allPrices
     *
     * @param \OpenAPI\Client\Mirakl\Model\OF21Response200OffersAllPrices[]|null $allPrices All prices for the offer <br/> For Dropship specifically: the list of purchasing prices of the offer, also referred to as costs or wholesale prices
     *
     * @return self
     */
    public function setAllPrices($allPrices)
    {
        if (is_null($allPrices)) {
            throw new \InvalidArgumentException('non-nullable allPrices cannot be null');
        }
        $this->container['allPrices'] = $allPrices;

        return $this;
    }

    /**
     * Gets allowQuoteRequests
     *
     * @return bool|null
     */
    public function getAllowQuoteRequests()
    {
        return $this->container['allowQuoteRequests'];
    }

    /**
     * Sets allowQuoteRequests
     *
     * @param bool|null $allowQuoteRequests Whether the offer is eligible for quotation
     *
     * @return self
     */
    public function setAllowQuoteRequests($allowQuoteRequests)
    {
        if (is_null($allowQuoteRequests)) {
            throw new \InvalidArgumentException('non-nullable allowQuoteRequests cannot be null');
        }
        $this->container['allowQuoteRequests'] = $allowQuoteRequests;

        return $this;
    }

    /**
     * Gets applicablePricing
     *
     * @return \OpenAPI\Client\Mirakl\Model\OF21Response200OffersApplicablePricing|null
     */
    public function getApplicablePricing()
    {
        return $this->container['applicablePricing'];
    }

    /**
     * Sets applicablePricing
     *
     * @param \OpenAPI\Client\Mirakl\Model\OF21Response200OffersApplicablePricing|null $applicablePricing applicablePricing
     *
     * @return self
     */
    public function setApplicablePricing($applicablePricing)
    {
        if (is_null($applicablePricing)) {
            throw new \InvalidArgumentException('non-nullable applicablePricing cannot be null');
        }
        $this->container['applicablePricing'] = $applicablePricing;

        return $this;
    }

    /**
     * Gets availableEndDate
     *
     * @return \DateTime|null
     */
    public function getAvailableEndDate()
    {
        return $this->container['availableEndDate'];
    }

    /**
     * Sets availableEndDate
     *
     * @param \DateTime|null $availableEndDate Available end date
     *
     * @return self
     */
    public function setAvailableEndDate($availableEndDate)
    {
        if (is_null($availableEndDate)) {
            throw new \InvalidArgumentException('non-nullable availableEndDate cannot be null');
        }
        $this->container['availableEndDate'] = $availableEndDate;

        return $this;
    }

    /**
     * Gets availableStartDate
     *
     * @return \DateTime|null
     */
    public function getAvailableStartDate()
    {
        return $this->container['availableStartDate'];
    }

    /**
     * Sets availableStartDate
     *
     * @param \DateTime|null $availableStartDate Available start date
     *
     * @return self
     */
    public function setAvailableStartDate($availableStartDate)
    {
        if (is_null($availableStartDate)) {
            throw new \InvalidArgumentException('non-nullable availableStartDate cannot be null');
        }
        $this->container['availableStartDate'] = $availableStartDate;

        return $this;
    }

    /**
     * Gets categoryCode
     *
     * @return string|null
     */
    public function getCategoryCode()
    {
        return $this->container['categoryCode'];
    }

    /**
     * Sets categoryCode
     *
     * @param string|null $categoryCode Product category code
     *
     * @return self
     */
    public function setCategoryCode($categoryCode)
    {
        if (is_null($categoryCode)) {
            throw new \InvalidArgumentException('non-nullable categoryCode cannot be null');
        }
        $this->container['categoryCode'] = $categoryCode;

        return $this;
    }

    /**
     * Gets categoryLabel
     *
     * @return string|null
     */
    public function getCategoryLabel()
    {
        return $this->container['categoryLabel'];
    }

    /**
     * Sets categoryLabel
     *
     * @param string|null $categoryLabel Product category label
     *
     * @return self
     */
    public function setCategoryLabel($categoryLabel)
    {
        if (is_null($categoryLabel)) {
            throw new \InvalidArgumentException('non-nullable categoryLabel cannot be null');
        }
        $this->container['categoryLabel'] = $categoryLabel;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return string[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param string[]|null $channels List of channel codes on which the offer can be sold
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets currencyIsoCode
     *
     * @return string|null
     */
    public function getCurrencyIsoCode()
    {
        return $this->container['currencyIsoCode'];
    }

    /**
     * Sets currencyIsoCode
     *
     * @param string|null $currencyIsoCode The currency of the shop (iso format)
     *
     * @return self
     */
    public function setCurrencyIsoCode($currencyIsoCode)
    {
        if (is_null($currencyIsoCode)) {
            throw new \InvalidArgumentException('non-nullable currencyIsoCode cannot be null');
        }
        $this->container['currencyIsoCode'] = $currencyIsoCode;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Offer description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ecoContributions
     *
     * @return \OpenAPI\Client\Mirakl\Model\OF21Response200OffersEcoContributions[]|null
     */
    public function getEcoContributions()
    {
        return $this->container['ecoContributions'];
    }

    /**
     * Sets ecoContributions
     *
     * @param \OpenAPI\Client\Mirakl\Model\OF21Response200OffersEcoContributions[]|null $ecoContributions Eco-contributions of the offer - only available if the operator setting <em>Activate data collection related to circular economy regulations</em> has been enabled.
     *
     * @return self
     */
    public function setEcoContributions($ecoContributions)
    {
        if (is_null($ecoContributions)) {
            throw new \InvalidArgumentException('non-nullable ecoContributions cannot be null');
        }

        if ((count($ecoContributions) > 20)) {
            throw new \InvalidArgumentException('invalid value for $ecoContributions when calling OF21Response200Offers., number of items must be less than or equal to 20.');
        }
        $this->container['ecoContributions'] = $ecoContributions;

        return $this;
    }

    /**
     * Gets favoriteRank
     *
     * @return int|null
     */
    public function getFavoriteRank()
    {
        return $this->container['favoriteRank'];
    }

    /**
     * Sets favoriteRank
     *
     * @param int|null $favoriteRank Favorite rank for the offer, when the favorite feature is enabled and the offer is a favorite
     *
     * @return self
     */
    public function setFavoriteRank($favoriteRank)
    {
        if (is_null($favoriteRank)) {
            throw new \InvalidArgumentException('non-nullable favoriteRank cannot be null');
        }
        $this->container['favoriteRank'] = $favoriteRank;

        return $this;
    }

    /**
     * Gets fulfillment
     *
     * @return \OpenAPI\Client\Mirakl\Model\OF21Response200OffersFulfillment|null
     */
    public function getFulfillment()
    {
        return $this->container['fulfillment'];
    }

    /**
     * Sets fulfillment
     *
     * @param \OpenAPI\Client\Mirakl\Model\OF21Response200OffersFulfillment|null $fulfillment fulfillment
     *
     * @return self
     */
    public function setFulfillment($fulfillment)
    {
        if (is_null($fulfillment)) {
            throw new \InvalidArgumentException('non-nullable fulfillment cannot be null');
        }
        $this->container['fulfillment'] = $fulfillment;

        return $this;
    }

    /**
     * Gets inactivityReasons
     *
     * @return string[]|null
     */
    public function getInactivityReasons()
    {
        return $this->container['inactivityReasons'];
    }

    /**
     * Sets inactivityReasons
     *
     * @param string[]|null $inactivityReasons Reasons for offers inactivity, mandatory if an offer is inactive
     *
     * @return self
     */
    public function setInactivityReasons($inactivityReasons)
    {
        if (is_null($inactivityReasons)) {
            throw new \InvalidArgumentException('non-nullable inactivityReasons cannot be null');
        }
        $this->container['inactivityReasons'] = $inactivityReasons;

        return $this;
    }

    /**
     * Gets internalDescription
     *
     * @return string|null
     */
    public function getInternalDescription()
    {
        return $this->container['internalDescription'];
    }

    /**
     * Sets internalDescription
     *
     * @param string|null $internalDescription The offer's description as shown in the back office
     *
     * @return self
     */
    public function setInternalDescription($internalDescription)
    {
        if (is_null($internalDescription)) {
            throw new \InvalidArgumentException('non-nullable internalDescription cannot be null');
        }
        $this->container['internalDescription'] = $internalDescription;

        return $this;
    }

    /**
     * Gets leadtimeToShip
     *
     * @return int|null
     */
    public function getLeadtimeToShip()
    {
        return $this->container['leadtimeToShip'];
    }

    /**
     * Sets leadtimeToShip
     *
     * @param int|null $leadtimeToShip Offer's lead time to ship value. If this value has been set to 0, value is returned as 1 (unless platform's default lead time to ship value is also 0). If no lead time to ship was specified for the offer, platform's default value is returned.
     *
     * @return self
     */
    public function setLeadtimeToShip($leadtimeToShip)
    {
        if (is_null($leadtimeToShip)) {
            throw new \InvalidArgumentException('non-nullable leadtimeToShip cannot be null');
        }
        $this->container['leadtimeToShip'] = $leadtimeToShip;

        return $this;
    }

    /**
     * Gets logisticClass
     *
     * @return \OpenAPI\Client\Mirakl\Model\OF21Response200OffersLogisticClass|null
     */
    public function getLogisticClass()
    {
        return $this->container['logisticClass'];
    }

    /**
     * Sets logisticClass
     *
     * @param \OpenAPI\Client\Mirakl\Model\OF21Response200OffersLogisticClass|null $logisticClass logisticClass
     *
     * @return self
     */
    public function setLogisticClass($logisticClass)
    {
        if (is_null($logisticClass)) {
            throw new \InvalidArgumentException('non-nullable logisticClass cannot be null');
        }
        $this->container['logisticClass'] = $logisticClass;

        return $this;
    }

    /**
     * Gets maxOrderQuantity
     *
     * @return int|null
     */
    public function getMaxOrderQuantity()
    {
        return $this->container['maxOrderQuantity'];
    }

    /**
     * Sets maxOrderQuantity
     *
     * @param int|null $maxOrderQuantity Highest quantity of product items per order
     *
     * @return self
     */
    public function setMaxOrderQuantity($maxOrderQuantity)
    {
        if (is_null($maxOrderQuantity)) {
            throw new \InvalidArgumentException('non-nullable maxOrderQuantity cannot be null');
        }
        $this->container['maxOrderQuantity'] = $maxOrderQuantity;

        return $this;
    }

    /**
     * Gets minOrderQuantity
     *
     * @return int|null
     */
    public function getMinOrderQuantity()
    {
        return $this->container['minOrderQuantity'];
    }

    /**
     * Sets minOrderQuantity
     *
     * @param int|null $minOrderQuantity Lowest quantity of product items per order
     *
     * @return self
     */
    public function setMinOrderQuantity($minOrderQuantity)
    {
        if (is_null($minOrderQuantity)) {
            throw new \InvalidArgumentException('non-nullable minOrderQuantity cannot be null');
        }
        $this->container['minOrderQuantity'] = $minOrderQuantity;

        return $this;
    }

    /**
     * Gets minQuantityAlert
     *
     * @return int|null
     */
    public function getMinQuantityAlert()
    {
        return $this->container['minQuantityAlert'];
    }

    /**
     * Sets minQuantityAlert
     *
     * @param int|null $minQuantityAlert Mininum quantity of the offer
     *
     * @return self
     */
    public function setMinQuantityAlert($minQuantityAlert)
    {
        if (is_null($minQuantityAlert)) {
            throw new \InvalidArgumentException('non-nullable minQuantityAlert cannot be null');
        }
        $this->container['minQuantityAlert'] = $minQuantityAlert;

        return $this;
    }

    /**
     * Gets minShippingPrice
     *
     * @return float|null
     */
    public function getMinShippingPrice()
    {
        return $this->container['minShippingPrice'];
    }

    /**
     * Sets minShippingPrice
     *
     * @param float|null $minShippingPrice Unit price of the minimum shipping rate
     *
     * @return self
     */
    public function setMinShippingPrice($minShippingPrice)
    {
        if (is_null($minShippingPrice)) {
            throw new \InvalidArgumentException('non-nullable minShippingPrice cannot be null');
        }
        $this->container['minShippingPrice'] = $minShippingPrice;

        return $this;
    }

    /**
     * Gets minShippingPriceAdditional
     *
     * @return float|null
     */
    public function getMinShippingPriceAdditional()
    {
        return $this->container['minShippingPriceAdditional'];
    }

    /**
     * Sets minShippingPriceAdditional
     *
     * @param float|null $minShippingPriceAdditional Additional unit price associated to the minimum shipping rate
     *
     * @return self
     */
    public function setMinShippingPriceAdditional($minShippingPriceAdditional)
    {
        if (is_null($minShippingPriceAdditional)) {
            throw new \InvalidArgumentException('non-nullable minShippingPriceAdditional cannot be null');
        }
        $this->container['minShippingPriceAdditional'] = $minShippingPriceAdditional;

        return $this;
    }

    /**
     * Gets minShippingType
     *
     * @return string|null
     */
    public function getMinShippingType()
    {
        return $this->container['minShippingType'];
    }

    /**
     * Sets minShippingType
     *
     * @param string|null $minShippingType Code of the shipping type associated to the minimum shipping rate
     *
     * @return self
     */
    public function setMinShippingType($minShippingType)
    {
        if (is_null($minShippingType)) {
            throw new \InvalidArgumentException('non-nullable minShippingType cannot be null');
        }
        $this->container['minShippingType'] = $minShippingType;

        return $this;
    }

    /**
     * Gets minShippingZone
     *
     * @return string|null
     */
    public function getMinShippingZone()
    {
        return $this->container['minShippingZone'];
    }

    /**
     * Sets minShippingZone
     *
     * @param string|null $minShippingZone Code of the shipping zone associated to the minimum shipping rate
     *
     * @return self
     */
    public function setMinShippingZone($minShippingZone)
    {
        if (is_null($minShippingZone)) {
            throw new \InvalidArgumentException('non-nullable minShippingZone cannot be null');
        }
        $this->container['minShippingZone'] = $minShippingZone;

        return $this;
    }

    /**
     * Gets offerAdditionalFields
     *
     * @return \OpenAPI\Client\Mirakl\Model\OF21Response200OffersOfferAdditionalFields[]|null
     */
    public function getOfferAdditionalFields()
    {
        return $this->container['offerAdditionalFields'];
    }

    /**
     * Sets offerAdditionalFields
     *
     * @param \OpenAPI\Client\Mirakl\Model\OF21Response200OffersOfferAdditionalFields[]|null $offerAdditionalFields Custom fields of the offer
     *
     * @return self
     */
    public function setOfferAdditionalFields($offerAdditionalFields)
    {
        if (is_null($offerAdditionalFields)) {
            throw new \InvalidArgumentException('non-nullable offerAdditionalFields cannot be null');
        }
        $this->container['offerAdditionalFields'] = $offerAdditionalFields;

        return $this;
    }

    /**
     * Gets offerId
     *
     * @return int|null
     */
    public function getOfferId()
    {
        return $this->container['offerId'];
    }

    /**
     * Sets offerId
     *
     * @param int|null $offerId Identifier of the offer
     *
     * @return self
     */
    public function setOfferId($offerId)
    {
        if (is_null($offerId)) {
            throw new \InvalidArgumentException('non-nullable offerId cannot be null');
        }
        $this->container['offerId'] = $offerId;

        return $this;
    }

    /**
     * Gets packageQuantity
     *
     * @return int|null
     */
    public function getPackageQuantity()
    {
        return $this->container['packageQuantity'];
    }

    /**
     * Sets packageQuantity
     *
     * @param int|null $packageQuantity Indivisible quantity of the same product
     *
     * @return self
     */
    public function setPackageQuantity($packageQuantity)
    {
        if (is_null($packageQuantity)) {
            throw new \InvalidArgumentException('non-nullable packageQuantity cannot be null');
        }
        $this->container['packageQuantity'] = $packageQuantity;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Price of the offer <br/> For Dropship specifically: the purchasing price of the offer, also referred to as cost or wholesale price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets priceAdditionalInfo
     *
     * @return string|null
     */
    public function getPriceAdditionalInfo()
    {
        return $this->container['priceAdditionalInfo'];
    }

    /**
     * Sets priceAdditionalInfo
     *
     * @param string|null $priceAdditionalInfo Additional price information for the offer
     *
     * @return self
     */
    public function setPriceAdditionalInfo($priceAdditionalInfo)
    {
        if (is_null($priceAdditionalInfo)) {
            throw new \InvalidArgumentException('non-nullable priceAdditionalInfo cannot be null');
        }
        $this->container['priceAdditionalInfo'] = $priceAdditionalInfo;

        return $this;
    }

    /**
     * Gets productBrand
     *
     * @return string|null
     */
    public function getProductBrand()
    {
        return $this->container['productBrand'];
    }

    /**
     * Sets productBrand
     *
     * @param string|null $productBrand Brand of the product
     *
     * @return self
     */
    public function setProductBrand($productBrand)
    {
        if (is_null($productBrand)) {
            throw new \InvalidArgumentException('non-nullable productBrand cannot be null');
        }
        $this->container['productBrand'] = $productBrand;

        return $this;
    }

    /**
     * Gets productDescription
     *
     * @return string|null
     */
    public function getProductDescription()
    {
        return $this->container['productDescription'];
    }

    /**
     * Sets productDescription
     *
     * @param string|null $productDescription Description of the product
     *
     * @return self
     */
    public function setProductDescription($productDescription)
    {
        if (is_null($productDescription)) {
            throw new \InvalidArgumentException('non-nullable productDescription cannot be null');
        }
        $this->container['productDescription'] = $productDescription;

        return $this;
    }

    /**
     * Gets productReferences
     *
     * @return \OpenAPI\Client\Mirakl\Model\OF21Response200OffersProductReferences[]|null
     */
    public function getProductReferences()
    {
        return $this->container['productReferences'];
    }

    /**
     * Sets productReferences
     *
     * @param \OpenAPI\Client\Mirakl\Model\OF21Response200OffersProductReferences[]|null $productReferences Product references
     *
     * @return self
     */
    public function setProductReferences($productReferences)
    {
        if (is_null($productReferences)) {
            throw new \InvalidArgumentException('non-nullable productReferences cannot be null');
        }
        $this->container['productReferences'] = $productReferences;

        return $this;
    }

    /**
     * Gets productSku
     *
     * @return string|null
     */
    public function getProductSku()
    {
        return $this->container['productSku'];
    }

    /**
     * Sets productSku
     *
     * @param string|null $productSku Product SKU
     *
     * @return self
     */
    public function setProductSku($productSku)
    {
        if (is_null($productSku)) {
            throw new \InvalidArgumentException('non-nullable productSku cannot be null');
        }
        $this->container['productSku'] = $productSku;

        return $this;
    }

    /**
     * Gets productTaxCode
     *
     * @return string|null
     */
    public function getProductTaxCode()
    {
        return $this->container['productTaxCode'];
    }

    /**
     * Sets productTaxCode
     *
     * @param string|null $productTaxCode Offer product tax code
     *
     * @return self
     */
    public function setProductTaxCode($productTaxCode)
    {
        if (is_null($productTaxCode)) {
            throw new \InvalidArgumentException('non-nullable productTaxCode cannot be null');
        }
        $this->container['productTaxCode'] = $productTaxCode;

        return $this;
    }

    /**
     * Gets productTitle
     *
     * @return string|null
     */
    public function getProductTitle()
    {
        return $this->container['productTitle'];
    }

    /**
     * Sets productTitle
     *
     * @param string|null $productTitle Product title
     *
     * @return self
     */
    public function setProductTitle($productTitle)
    {
        if (is_null($productTitle)) {
            throw new \InvalidArgumentException('non-nullable productTitle cannot be null');
        }
        $this->container['productTitle'] = $productTitle;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Available quantity of the offer
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets shippingDeadline
     *
     * @return \DateTime|null
     */
    public function getShippingDeadline()
    {
        return $this->container['shippingDeadline'];
    }

    /**
     * Sets shippingDeadline
     *
     * @param \DateTime|null $shippingDeadline Estimated shipping date, that includes business closing days and cut-off configured on the platform. Add the earliest and latest delivery times to calculate the estimated delivery date to customers
     *
     * @return self
     */
    public function setShippingDeadline($shippingDeadline)
    {
        if (is_null($shippingDeadline)) {
            throw new \InvalidArgumentException('non-nullable shippingDeadline cannot be null');
        }
        $this->container['shippingDeadline'] = $shippingDeadline;

        return $this;
    }

    /**
     * Gets shopSku
     *
     * @return string|null
     */
    public function getShopSku()
    {
        return $this->container['shopSku'];
    }

    /**
     * Sets shopSku
     *
     * @param string|null $shopSku Shop's sku of the offer
     *
     * @return self
     */
    public function setShopSku($shopSku)
    {
        if (is_null($shopSku)) {
            throw new \InvalidArgumentException('non-nullable shopSku cannot be null');
        }
        $this->container['shopSku'] = $shopSku;

        return $this;
    }

    /**
     * Gets stateCode
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['stateCode'];
    }

    /**
     * Sets stateCode
     *
     * @param string|null $stateCode Offer condition
     *
     * @return self
     */
    public function setStateCode($stateCode)
    {
        if (is_null($stateCode)) {
            throw new \InvalidArgumentException('non-nullable stateCode cannot be null');
        }
        $this->container['stateCode'] = $stateCode;

        return $this;
    }

    /**
     * Gets totalPrice
     *
     * @return float|null
     */
    public function getTotalPrice()
    {
        return $this->container['totalPrice'];
    }

    /**
     * Sets totalPrice
     *
     * @param float|null $totalPrice Total price of the offer (price + minimum shipping rate) <br/> For Dropship specifically: the purchasing price of the offer + minimum shipping rate
     *
     * @return self
     */
    public function setTotalPrice($totalPrice)
    {
        if (is_null($totalPrice)) {
            throw new \InvalidArgumentException('non-nullable totalPrice cannot be null');
        }
        $this->container['totalPrice'] = $totalPrice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


