<?php
/**
 * IV01Response200InvoicesAutoInvoiceSummary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * IV01Response200InvoicesAutoInvoiceSummary Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IV01Response200InvoicesAutoInvoiceSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IV01_Response_200_Invoices_AutoInvoice_Summary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amountTransferred' => 'float',
        'amountTransferredToOperator' => 'float',
        'reserveFunding' => 'float',
        'reserveSettlement' => 'float',
        'totalCommissionsExclTax' => 'float',
        'totalCommissionsInclTax' => 'float',
        'totalFeeExclTax' => 'float',
        'totalFeeInclTax' => 'float',
        'totalFeeOperatorRemittedExclTax' => 'float',
        'totalFeeOperatorRemittedInclTax' => 'float',
        'totalNonPayableOrdersExclTax' => 'float',
        'totalNonPayableOrdersInclTax' => 'float',
        'totalOperatorPaidShippingChargesExclTax' => 'float',
        'totalOperatorPaidShippingChargesInclTax' => 'float',
        'totalOperatorRemittedTaxes' => 'float',
        'totalOtherCreditsExclTax' => 'float',
        'totalOtherCreditsInclTax' => 'float',
        'totalOtherInvoicesExclTax' => 'float',
        'totalOtherInvoicesInclTax' => 'float',
        'totalPayableOrdersExclTax' => 'float',
        'totalPayableOrdersInclTax' => 'float',
        'totalPurchaseTaxes' => 'float',
        'totalRefundCommissionsExclTax' => 'float',
        'totalRefundCommissionsInclTax' => 'float',
        'totalRefundFeeExclTax' => 'float',
        'totalRefundFeeInclTax' => 'float',
        'totalRefundFeeOperatorRemittedExclTax' => 'float',
        'totalRefundFeeOperatorRemittedInclTax' => 'float',
        'totalRefundNonPayableOrdersExclTax' => 'float',
        'totalRefundNonPayableOrdersInclTax' => 'float',
        'totalRefundOperatorPaidShippingChargesExclTax' => 'float',
        'totalRefundOperatorPaidShippingChargesInclTax' => 'float',
        'totalRefundOperatorRemittedTaxes' => 'float',
        'totalRefundOrdersExclTax' => 'float',
        'totalRefundOrdersInclTax' => 'float',
        'totalRefundPayableOrdersExclTax' => 'float',
        'totalRefundPayableOrdersInclTax' => 'float',
        'totalRefundPurchaseTaxes' => 'float',
        'totalSellerFeesOnOrdersExclTax' => 'float',
        'totalSellerFeesOnOrdersInclTax' => 'float',
        'totalSellerPenaltyFeesExclTax' => 'float',
        'totalSellerPenaltyFeesInclTax' => 'float',
        'totalSubscriptionExclTax' => 'float',
        'totalSubscriptionInclTax' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amountTransferred' => null,
        'amountTransferredToOperator' => null,
        'reserveFunding' => null,
        'reserveSettlement' => null,
        'totalCommissionsExclTax' => null,
        'totalCommissionsInclTax' => null,
        'totalFeeExclTax' => null,
        'totalFeeInclTax' => null,
        'totalFeeOperatorRemittedExclTax' => null,
        'totalFeeOperatorRemittedInclTax' => null,
        'totalNonPayableOrdersExclTax' => null,
        'totalNonPayableOrdersInclTax' => null,
        'totalOperatorPaidShippingChargesExclTax' => null,
        'totalOperatorPaidShippingChargesInclTax' => null,
        'totalOperatorRemittedTaxes' => null,
        'totalOtherCreditsExclTax' => null,
        'totalOtherCreditsInclTax' => null,
        'totalOtherInvoicesExclTax' => null,
        'totalOtherInvoicesInclTax' => null,
        'totalPayableOrdersExclTax' => null,
        'totalPayableOrdersInclTax' => null,
        'totalPurchaseTaxes' => null,
        'totalRefundCommissionsExclTax' => null,
        'totalRefundCommissionsInclTax' => null,
        'totalRefundFeeExclTax' => null,
        'totalRefundFeeInclTax' => null,
        'totalRefundFeeOperatorRemittedExclTax' => null,
        'totalRefundFeeOperatorRemittedInclTax' => null,
        'totalRefundNonPayableOrdersExclTax' => null,
        'totalRefundNonPayableOrdersInclTax' => null,
        'totalRefundOperatorPaidShippingChargesExclTax' => null,
        'totalRefundOperatorPaidShippingChargesInclTax' => null,
        'totalRefundOperatorRemittedTaxes' => null,
        'totalRefundOrdersExclTax' => null,
        'totalRefundOrdersInclTax' => null,
        'totalRefundPayableOrdersExclTax' => null,
        'totalRefundPayableOrdersInclTax' => null,
        'totalRefundPurchaseTaxes' => null,
        'totalSellerFeesOnOrdersExclTax' => null,
        'totalSellerFeesOnOrdersInclTax' => null,
        'totalSellerPenaltyFeesExclTax' => null,
        'totalSellerPenaltyFeesInclTax' => null,
        'totalSubscriptionExclTax' => null,
        'totalSubscriptionInclTax' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amountTransferred' => false,
        'amountTransferredToOperator' => false,
        'reserveFunding' => false,
        'reserveSettlement' => false,
        'totalCommissionsExclTax' => false,
        'totalCommissionsInclTax' => false,
        'totalFeeExclTax' => false,
        'totalFeeInclTax' => false,
        'totalFeeOperatorRemittedExclTax' => false,
        'totalFeeOperatorRemittedInclTax' => false,
        'totalNonPayableOrdersExclTax' => false,
        'totalNonPayableOrdersInclTax' => false,
        'totalOperatorPaidShippingChargesExclTax' => false,
        'totalOperatorPaidShippingChargesInclTax' => false,
        'totalOperatorRemittedTaxes' => false,
        'totalOtherCreditsExclTax' => false,
        'totalOtherCreditsInclTax' => false,
        'totalOtherInvoicesExclTax' => false,
        'totalOtherInvoicesInclTax' => false,
        'totalPayableOrdersExclTax' => false,
        'totalPayableOrdersInclTax' => false,
        'totalPurchaseTaxes' => false,
        'totalRefundCommissionsExclTax' => false,
        'totalRefundCommissionsInclTax' => false,
        'totalRefundFeeExclTax' => false,
        'totalRefundFeeInclTax' => false,
        'totalRefundFeeOperatorRemittedExclTax' => false,
        'totalRefundFeeOperatorRemittedInclTax' => false,
        'totalRefundNonPayableOrdersExclTax' => false,
        'totalRefundNonPayableOrdersInclTax' => false,
        'totalRefundOperatorPaidShippingChargesExclTax' => false,
        'totalRefundOperatorPaidShippingChargesInclTax' => false,
        'totalRefundOperatorRemittedTaxes' => false,
        'totalRefundOrdersExclTax' => false,
        'totalRefundOrdersInclTax' => false,
        'totalRefundPayableOrdersExclTax' => false,
        'totalRefundPayableOrdersInclTax' => false,
        'totalRefundPurchaseTaxes' => false,
        'totalSellerFeesOnOrdersExclTax' => false,
        'totalSellerFeesOnOrdersInclTax' => false,
        'totalSellerPenaltyFeesExclTax' => false,
        'totalSellerPenaltyFeesInclTax' => false,
        'totalSubscriptionExclTax' => false,
        'totalSubscriptionInclTax' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amountTransferred' => 'amount_transferred',
        'amountTransferredToOperator' => 'amount_transferred_to_operator',
        'reserveFunding' => 'reserve_funding',
        'reserveSettlement' => 'reserve_settlement',
        'totalCommissionsExclTax' => 'total_commissions_excl_tax',
        'totalCommissionsInclTax' => 'total_commissions_incl_tax',
        'totalFeeExclTax' => 'total_fee_excl_tax',
        'totalFeeInclTax' => 'total_fee_incl_tax',
        'totalFeeOperatorRemittedExclTax' => 'total_fee_operator_remitted_excl_tax',
        'totalFeeOperatorRemittedInclTax' => 'total_fee_operator_remitted_incl_tax',
        'totalNonPayableOrdersExclTax' => 'total_non_payable_orders_excl_tax',
        'totalNonPayableOrdersInclTax' => 'total_non_payable_orders_incl_tax',
        'totalOperatorPaidShippingChargesExclTax' => 'total_operator_paid_shipping_charges_excl_tax',
        'totalOperatorPaidShippingChargesInclTax' => 'total_operator_paid_shipping_charges_incl_tax',
        'totalOperatorRemittedTaxes' => 'total_operator_remitted_taxes',
        'totalOtherCreditsExclTax' => 'total_other_credits_excl_tax',
        'totalOtherCreditsInclTax' => 'total_other_credits_incl_tax',
        'totalOtherInvoicesExclTax' => 'total_other_invoices_excl_tax',
        'totalOtherInvoicesInclTax' => 'total_other_invoices_incl_tax',
        'totalPayableOrdersExclTax' => 'total_payable_orders_excl_tax',
        'totalPayableOrdersInclTax' => 'total_payable_orders_incl_tax',
        'totalPurchaseTaxes' => 'total_purchase_taxes',
        'totalRefundCommissionsExclTax' => 'total_refund_commissions_excl_tax',
        'totalRefundCommissionsInclTax' => 'total_refund_commissions_incl_tax',
        'totalRefundFeeExclTax' => 'total_refund_fee_excl_tax',
        'totalRefundFeeInclTax' => 'total_refund_fee_incl_tax',
        'totalRefundFeeOperatorRemittedExclTax' => 'total_refund_fee_operator_remitted_excl_tax',
        'totalRefundFeeOperatorRemittedInclTax' => 'total_refund_fee_operator_remitted_incl_tax',
        'totalRefundNonPayableOrdersExclTax' => 'total_refund_non_payable_orders_excl_tax',
        'totalRefundNonPayableOrdersInclTax' => 'total_refund_non_payable_orders_incl_tax',
        'totalRefundOperatorPaidShippingChargesExclTax' => 'total_refund_operator_paid_shipping_charges_excl_tax',
        'totalRefundOperatorPaidShippingChargesInclTax' => 'total_refund_operator_paid_shipping_charges_incl_tax',
        'totalRefundOperatorRemittedTaxes' => 'total_refund_operator_remitted_taxes',
        'totalRefundOrdersExclTax' => 'total_refund_orders_excl_tax',
        'totalRefundOrdersInclTax' => 'total_refund_orders_incl_tax',
        'totalRefundPayableOrdersExclTax' => 'total_refund_payable_orders_excl_tax',
        'totalRefundPayableOrdersInclTax' => 'total_refund_payable_orders_incl_tax',
        'totalRefundPurchaseTaxes' => 'total_refund_purchase_taxes',
        'totalSellerFeesOnOrdersExclTax' => 'total_seller_fees_on_orders_excl_tax',
        'totalSellerFeesOnOrdersInclTax' => 'total_seller_fees_on_orders_incl_tax',
        'totalSellerPenaltyFeesExclTax' => 'total_seller_penalty_fees_excl_tax',
        'totalSellerPenaltyFeesInclTax' => 'total_seller_penalty_fees_incl_tax',
        'totalSubscriptionExclTax' => 'total_subscription_excl_tax',
        'totalSubscriptionInclTax' => 'total_subscription_incl_tax'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amountTransferred' => 'setAmountTransferred',
        'amountTransferredToOperator' => 'setAmountTransferredToOperator',
        'reserveFunding' => 'setReserveFunding',
        'reserveSettlement' => 'setReserveSettlement',
        'totalCommissionsExclTax' => 'setTotalCommissionsExclTax',
        'totalCommissionsInclTax' => 'setTotalCommissionsInclTax',
        'totalFeeExclTax' => 'setTotalFeeExclTax',
        'totalFeeInclTax' => 'setTotalFeeInclTax',
        'totalFeeOperatorRemittedExclTax' => 'setTotalFeeOperatorRemittedExclTax',
        'totalFeeOperatorRemittedInclTax' => 'setTotalFeeOperatorRemittedInclTax',
        'totalNonPayableOrdersExclTax' => 'setTotalNonPayableOrdersExclTax',
        'totalNonPayableOrdersInclTax' => 'setTotalNonPayableOrdersInclTax',
        'totalOperatorPaidShippingChargesExclTax' => 'setTotalOperatorPaidShippingChargesExclTax',
        'totalOperatorPaidShippingChargesInclTax' => 'setTotalOperatorPaidShippingChargesInclTax',
        'totalOperatorRemittedTaxes' => 'setTotalOperatorRemittedTaxes',
        'totalOtherCreditsExclTax' => 'setTotalOtherCreditsExclTax',
        'totalOtherCreditsInclTax' => 'setTotalOtherCreditsInclTax',
        'totalOtherInvoicesExclTax' => 'setTotalOtherInvoicesExclTax',
        'totalOtherInvoicesInclTax' => 'setTotalOtherInvoicesInclTax',
        'totalPayableOrdersExclTax' => 'setTotalPayableOrdersExclTax',
        'totalPayableOrdersInclTax' => 'setTotalPayableOrdersInclTax',
        'totalPurchaseTaxes' => 'setTotalPurchaseTaxes',
        'totalRefundCommissionsExclTax' => 'setTotalRefundCommissionsExclTax',
        'totalRefundCommissionsInclTax' => 'setTotalRefundCommissionsInclTax',
        'totalRefundFeeExclTax' => 'setTotalRefundFeeExclTax',
        'totalRefundFeeInclTax' => 'setTotalRefundFeeInclTax',
        'totalRefundFeeOperatorRemittedExclTax' => 'setTotalRefundFeeOperatorRemittedExclTax',
        'totalRefundFeeOperatorRemittedInclTax' => 'setTotalRefundFeeOperatorRemittedInclTax',
        'totalRefundNonPayableOrdersExclTax' => 'setTotalRefundNonPayableOrdersExclTax',
        'totalRefundNonPayableOrdersInclTax' => 'setTotalRefundNonPayableOrdersInclTax',
        'totalRefundOperatorPaidShippingChargesExclTax' => 'setTotalRefundOperatorPaidShippingChargesExclTax',
        'totalRefundOperatorPaidShippingChargesInclTax' => 'setTotalRefundOperatorPaidShippingChargesInclTax',
        'totalRefundOperatorRemittedTaxes' => 'setTotalRefundOperatorRemittedTaxes',
        'totalRefundOrdersExclTax' => 'setTotalRefundOrdersExclTax',
        'totalRefundOrdersInclTax' => 'setTotalRefundOrdersInclTax',
        'totalRefundPayableOrdersExclTax' => 'setTotalRefundPayableOrdersExclTax',
        'totalRefundPayableOrdersInclTax' => 'setTotalRefundPayableOrdersInclTax',
        'totalRefundPurchaseTaxes' => 'setTotalRefundPurchaseTaxes',
        'totalSellerFeesOnOrdersExclTax' => 'setTotalSellerFeesOnOrdersExclTax',
        'totalSellerFeesOnOrdersInclTax' => 'setTotalSellerFeesOnOrdersInclTax',
        'totalSellerPenaltyFeesExclTax' => 'setTotalSellerPenaltyFeesExclTax',
        'totalSellerPenaltyFeesInclTax' => 'setTotalSellerPenaltyFeesInclTax',
        'totalSubscriptionExclTax' => 'setTotalSubscriptionExclTax',
        'totalSubscriptionInclTax' => 'setTotalSubscriptionInclTax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amountTransferred' => 'getAmountTransferred',
        'amountTransferredToOperator' => 'getAmountTransferredToOperator',
        'reserveFunding' => 'getReserveFunding',
        'reserveSettlement' => 'getReserveSettlement',
        'totalCommissionsExclTax' => 'getTotalCommissionsExclTax',
        'totalCommissionsInclTax' => 'getTotalCommissionsInclTax',
        'totalFeeExclTax' => 'getTotalFeeExclTax',
        'totalFeeInclTax' => 'getTotalFeeInclTax',
        'totalFeeOperatorRemittedExclTax' => 'getTotalFeeOperatorRemittedExclTax',
        'totalFeeOperatorRemittedInclTax' => 'getTotalFeeOperatorRemittedInclTax',
        'totalNonPayableOrdersExclTax' => 'getTotalNonPayableOrdersExclTax',
        'totalNonPayableOrdersInclTax' => 'getTotalNonPayableOrdersInclTax',
        'totalOperatorPaidShippingChargesExclTax' => 'getTotalOperatorPaidShippingChargesExclTax',
        'totalOperatorPaidShippingChargesInclTax' => 'getTotalOperatorPaidShippingChargesInclTax',
        'totalOperatorRemittedTaxes' => 'getTotalOperatorRemittedTaxes',
        'totalOtherCreditsExclTax' => 'getTotalOtherCreditsExclTax',
        'totalOtherCreditsInclTax' => 'getTotalOtherCreditsInclTax',
        'totalOtherInvoicesExclTax' => 'getTotalOtherInvoicesExclTax',
        'totalOtherInvoicesInclTax' => 'getTotalOtherInvoicesInclTax',
        'totalPayableOrdersExclTax' => 'getTotalPayableOrdersExclTax',
        'totalPayableOrdersInclTax' => 'getTotalPayableOrdersInclTax',
        'totalPurchaseTaxes' => 'getTotalPurchaseTaxes',
        'totalRefundCommissionsExclTax' => 'getTotalRefundCommissionsExclTax',
        'totalRefundCommissionsInclTax' => 'getTotalRefundCommissionsInclTax',
        'totalRefundFeeExclTax' => 'getTotalRefundFeeExclTax',
        'totalRefundFeeInclTax' => 'getTotalRefundFeeInclTax',
        'totalRefundFeeOperatorRemittedExclTax' => 'getTotalRefundFeeOperatorRemittedExclTax',
        'totalRefundFeeOperatorRemittedInclTax' => 'getTotalRefundFeeOperatorRemittedInclTax',
        'totalRefundNonPayableOrdersExclTax' => 'getTotalRefundNonPayableOrdersExclTax',
        'totalRefundNonPayableOrdersInclTax' => 'getTotalRefundNonPayableOrdersInclTax',
        'totalRefundOperatorPaidShippingChargesExclTax' => 'getTotalRefundOperatorPaidShippingChargesExclTax',
        'totalRefundOperatorPaidShippingChargesInclTax' => 'getTotalRefundOperatorPaidShippingChargesInclTax',
        'totalRefundOperatorRemittedTaxes' => 'getTotalRefundOperatorRemittedTaxes',
        'totalRefundOrdersExclTax' => 'getTotalRefundOrdersExclTax',
        'totalRefundOrdersInclTax' => 'getTotalRefundOrdersInclTax',
        'totalRefundPayableOrdersExclTax' => 'getTotalRefundPayableOrdersExclTax',
        'totalRefundPayableOrdersInclTax' => 'getTotalRefundPayableOrdersInclTax',
        'totalRefundPurchaseTaxes' => 'getTotalRefundPurchaseTaxes',
        'totalSellerFeesOnOrdersExclTax' => 'getTotalSellerFeesOnOrdersExclTax',
        'totalSellerFeesOnOrdersInclTax' => 'getTotalSellerFeesOnOrdersInclTax',
        'totalSellerPenaltyFeesExclTax' => 'getTotalSellerPenaltyFeesExclTax',
        'totalSellerPenaltyFeesInclTax' => 'getTotalSellerPenaltyFeesInclTax',
        'totalSubscriptionExclTax' => 'getTotalSubscriptionExclTax',
        'totalSubscriptionInclTax' => 'getTotalSubscriptionInclTax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amountTransferred', $data ?? [], null);
        $this->setIfExists('amountTransferredToOperator', $data ?? [], null);
        $this->setIfExists('reserveFunding', $data ?? [], null);
        $this->setIfExists('reserveSettlement', $data ?? [], null);
        $this->setIfExists('totalCommissionsExclTax', $data ?? [], null);
        $this->setIfExists('totalCommissionsInclTax', $data ?? [], null);
        $this->setIfExists('totalFeeExclTax', $data ?? [], null);
        $this->setIfExists('totalFeeInclTax', $data ?? [], null);
        $this->setIfExists('totalFeeOperatorRemittedExclTax', $data ?? [], null);
        $this->setIfExists('totalFeeOperatorRemittedInclTax', $data ?? [], null);
        $this->setIfExists('totalNonPayableOrdersExclTax', $data ?? [], null);
        $this->setIfExists('totalNonPayableOrdersInclTax', $data ?? [], null);
        $this->setIfExists('totalOperatorPaidShippingChargesExclTax', $data ?? [], null);
        $this->setIfExists('totalOperatorPaidShippingChargesInclTax', $data ?? [], null);
        $this->setIfExists('totalOperatorRemittedTaxes', $data ?? [], null);
        $this->setIfExists('totalOtherCreditsExclTax', $data ?? [], null);
        $this->setIfExists('totalOtherCreditsInclTax', $data ?? [], null);
        $this->setIfExists('totalOtherInvoicesExclTax', $data ?? [], null);
        $this->setIfExists('totalOtherInvoicesInclTax', $data ?? [], null);
        $this->setIfExists('totalPayableOrdersExclTax', $data ?? [], null);
        $this->setIfExists('totalPayableOrdersInclTax', $data ?? [], null);
        $this->setIfExists('totalPurchaseTaxes', $data ?? [], null);
        $this->setIfExists('totalRefundCommissionsExclTax', $data ?? [], null);
        $this->setIfExists('totalRefundCommissionsInclTax', $data ?? [], null);
        $this->setIfExists('totalRefundFeeExclTax', $data ?? [], null);
        $this->setIfExists('totalRefundFeeInclTax', $data ?? [], null);
        $this->setIfExists('totalRefundFeeOperatorRemittedExclTax', $data ?? [], null);
        $this->setIfExists('totalRefundFeeOperatorRemittedInclTax', $data ?? [], null);
        $this->setIfExists('totalRefundNonPayableOrdersExclTax', $data ?? [], null);
        $this->setIfExists('totalRefundNonPayableOrdersInclTax', $data ?? [], null);
        $this->setIfExists('totalRefundOperatorPaidShippingChargesExclTax', $data ?? [], null);
        $this->setIfExists('totalRefundOperatorPaidShippingChargesInclTax', $data ?? [], null);
        $this->setIfExists('totalRefundOperatorRemittedTaxes', $data ?? [], null);
        $this->setIfExists('totalRefundOrdersExclTax', $data ?? [], null);
        $this->setIfExists('totalRefundOrdersInclTax', $data ?? [], null);
        $this->setIfExists('totalRefundPayableOrdersExclTax', $data ?? [], null);
        $this->setIfExists('totalRefundPayableOrdersInclTax', $data ?? [], null);
        $this->setIfExists('totalRefundPurchaseTaxes', $data ?? [], null);
        $this->setIfExists('totalSellerFeesOnOrdersExclTax', $data ?? [], null);
        $this->setIfExists('totalSellerFeesOnOrdersInclTax', $data ?? [], null);
        $this->setIfExists('totalSellerPenaltyFeesExclTax', $data ?? [], null);
        $this->setIfExists('totalSellerPenaltyFeesInclTax', $data ?? [], null);
        $this->setIfExists('totalSubscriptionExclTax', $data ?? [], null);
        $this->setIfExists('totalSubscriptionInclTax', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amountTransferred
     *
     * @return float|null
     */
    public function getAmountTransferred()
    {
        return $this->container['amountTransferred'];
    }

    /**
     * Sets amountTransferred
     *
     * @param float|null $amountTransferred Total amount to be transferred to the seller
     *
     * @return self
     */
    public function setAmountTransferred($amountTransferred)
    {
        if (is_null($amountTransferred)) {
            throw new \InvalidArgumentException('non-nullable amountTransferred cannot be null');
        }
        $this->container['amountTransferred'] = $amountTransferred;

        return $this;
    }

    /**
     * Gets amountTransferredToOperator
     *
     * @return float|null
     */
    public function getAmountTransferredToOperator()
    {
        return $this->container['amountTransferredToOperator'];
    }

    /**
     * Sets amountTransferredToOperator
     *
     * @param float|null $amountTransferredToOperator Total amount to be transferred to the operator
     *
     * @return self
     */
    public function setAmountTransferredToOperator($amountTransferredToOperator)
    {
        if (is_null($amountTransferredToOperator)) {
            throw new \InvalidArgumentException('non-nullable amountTransferredToOperator cannot be null');
        }
        $this->container['amountTransferredToOperator'] = $amountTransferredToOperator;

        return $this;
    }

    /**
     * Gets reserveFunding
     *
     * @return float|null
     */
    public function getReserveFunding()
    {
        return $this->container['reserveFunding'];
    }

    /**
     * Sets reserveFunding
     *
     * @param float|null $reserveFunding Amount set aside for the seller reserve
     *
     * @return self
     */
    public function setReserveFunding($reserveFunding)
    {
        if (is_null($reserveFunding)) {
            throw new \InvalidArgumentException('non-nullable reserveFunding cannot be null');
        }
        $this->container['reserveFunding'] = $reserveFunding;

        return $this;
    }

    /**
     * Gets reserveSettlement
     *
     * @return float|null
     */
    public function getReserveSettlement()
    {
        return $this->container['reserveSettlement'];
    }

    /**
     * Sets reserveSettlement
     *
     * @param float|null $reserveSettlement Amount paid out from the seller reserve
     *
     * @return self
     */
    public function setReserveSettlement($reserveSettlement)
    {
        if (is_null($reserveSettlement)) {
            throw new \InvalidArgumentException('non-nullable reserveSettlement cannot be null');
        }
        $this->container['reserveSettlement'] = $reserveSettlement;

        return $this;
    }

    /**
     * Gets totalCommissionsExclTax
     *
     * @return float|null
     */
    public function getTotalCommissionsExclTax()
    {
        return $this->container['totalCommissionsExclTax'];
    }

    /**
     * Sets totalCommissionsExclTax
     *
     * @param float|null $totalCommissionsExclTax Total amount of commissions (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalCommissionsExclTax($totalCommissionsExclTax)
    {
        if (is_null($totalCommissionsExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalCommissionsExclTax cannot be null');
        }
        $this->container['totalCommissionsExclTax'] = $totalCommissionsExclTax;

        return $this;
    }

    /**
     * Gets totalCommissionsInclTax
     *
     * @return float|null
     */
    public function getTotalCommissionsInclTax()
    {
        return $this->container['totalCommissionsInclTax'];
    }

    /**
     * Sets totalCommissionsInclTax
     *
     * @param float|null $totalCommissionsInclTax Total amount of commissions (including taxes on orders)
     *
     * @return self
     */
    public function setTotalCommissionsInclTax($totalCommissionsInclTax)
    {
        if (is_null($totalCommissionsInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalCommissionsInclTax cannot be null');
        }
        $this->container['totalCommissionsInclTax'] = $totalCommissionsInclTax;

        return $this;
    }

    /**
     * Gets totalFeeExclTax
     *
     * @return float|null
     */
    public function getTotalFeeExclTax()
    {
        return $this->container['totalFeeExclTax'];
    }

    /**
     * Sets totalFeeExclTax
     *
     * @param float|null $totalFeeExclTax Total amount of fees (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalFeeExclTax($totalFeeExclTax)
    {
        if (is_null($totalFeeExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalFeeExclTax cannot be null');
        }
        $this->container['totalFeeExclTax'] = $totalFeeExclTax;

        return $this;
    }

    /**
     * Gets totalFeeInclTax
     *
     * @return float|null
     */
    public function getTotalFeeInclTax()
    {
        return $this->container['totalFeeInclTax'];
    }

    /**
     * Sets totalFeeInclTax
     *
     * @param float|null $totalFeeInclTax Total amount of fees (including taxes on orders)
     *
     * @return self
     */
    public function setTotalFeeInclTax($totalFeeInclTax)
    {
        if (is_null($totalFeeInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalFeeInclTax cannot be null');
        }
        $this->container['totalFeeInclTax'] = $totalFeeInclTax;

        return $this;
    }

    /**
     * Gets totalFeeOperatorRemittedExclTax
     *
     * @return float|null
     */
    public function getTotalFeeOperatorRemittedExclTax()
    {
        return $this->container['totalFeeOperatorRemittedExclTax'];
    }

    /**
     * Sets totalFeeOperatorRemittedExclTax
     *
     * @param float|null $totalFeeOperatorRemittedExclTax Total amount of fees remitted by the operator (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalFeeOperatorRemittedExclTax($totalFeeOperatorRemittedExclTax)
    {
        if (is_null($totalFeeOperatorRemittedExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalFeeOperatorRemittedExclTax cannot be null');
        }
        $this->container['totalFeeOperatorRemittedExclTax'] = $totalFeeOperatorRemittedExclTax;

        return $this;
    }

    /**
     * Gets totalFeeOperatorRemittedInclTax
     *
     * @return float|null
     */
    public function getTotalFeeOperatorRemittedInclTax()
    {
        return $this->container['totalFeeOperatorRemittedInclTax'];
    }

    /**
     * Sets totalFeeOperatorRemittedInclTax
     *
     * @param float|null $totalFeeOperatorRemittedInclTax Total amount of fees remitted by the operator (including taxes on orders)
     *
     * @return self
     */
    public function setTotalFeeOperatorRemittedInclTax($totalFeeOperatorRemittedInclTax)
    {
        if (is_null($totalFeeOperatorRemittedInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalFeeOperatorRemittedInclTax cannot be null');
        }
        $this->container['totalFeeOperatorRemittedInclTax'] = $totalFeeOperatorRemittedInclTax;

        return $this;
    }

    /**
     * Gets totalNonPayableOrdersExclTax
     *
     * @return float|null
     */
    public function getTotalNonPayableOrdersExclTax()
    {
        return $this->container['totalNonPayableOrdersExclTax'];
    }

    /**
     * Sets totalNonPayableOrdersExclTax
     *
     * @param float|null $totalNonPayableOrdersExclTax Total amount for non payable orders (including shipping charges and excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalNonPayableOrdersExclTax($totalNonPayableOrdersExclTax)
    {
        if (is_null($totalNonPayableOrdersExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalNonPayableOrdersExclTax cannot be null');
        }
        $this->container['totalNonPayableOrdersExclTax'] = $totalNonPayableOrdersExclTax;

        return $this;
    }

    /**
     * Gets totalNonPayableOrdersInclTax
     *
     * @return float|null
     */
    public function getTotalNonPayableOrdersInclTax()
    {
        return $this->container['totalNonPayableOrdersInclTax'];
    }

    /**
     * Sets totalNonPayableOrdersInclTax
     *
     * @param float|null $totalNonPayableOrdersInclTax Total amount for non payable orders (including shipping charges and taxes on orders)
     *
     * @return self
     */
    public function setTotalNonPayableOrdersInclTax($totalNonPayableOrdersInclTax)
    {
        if (is_null($totalNonPayableOrdersInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalNonPayableOrdersInclTax cannot be null');
        }
        $this->container['totalNonPayableOrdersInclTax'] = $totalNonPayableOrdersInclTax;

        return $this;
    }

    /**
     * Gets totalOperatorPaidShippingChargesExclTax
     *
     * @return float|null
     */
    public function getTotalOperatorPaidShippingChargesExclTax()
    {
        return $this->container['totalOperatorPaidShippingChargesExclTax'];
    }

    /**
     * Sets totalOperatorPaidShippingChargesExclTax
     *
     * @param float|null $totalOperatorPaidShippingChargesExclTax Total amount of shipping charges paid by the operator (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalOperatorPaidShippingChargesExclTax($totalOperatorPaidShippingChargesExclTax)
    {
        if (is_null($totalOperatorPaidShippingChargesExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalOperatorPaidShippingChargesExclTax cannot be null');
        }
        $this->container['totalOperatorPaidShippingChargesExclTax'] = $totalOperatorPaidShippingChargesExclTax;

        return $this;
    }

    /**
     * Gets totalOperatorPaidShippingChargesInclTax
     *
     * @return float|null
     */
    public function getTotalOperatorPaidShippingChargesInclTax()
    {
        return $this->container['totalOperatorPaidShippingChargesInclTax'];
    }

    /**
     * Sets totalOperatorPaidShippingChargesInclTax
     *
     * @param float|null $totalOperatorPaidShippingChargesInclTax Total amount of shipping charges paid by the operator (including taxes on orders)
     *
     * @return self
     */
    public function setTotalOperatorPaidShippingChargesInclTax($totalOperatorPaidShippingChargesInclTax)
    {
        if (is_null($totalOperatorPaidShippingChargesInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalOperatorPaidShippingChargesInclTax cannot be null');
        }
        $this->container['totalOperatorPaidShippingChargesInclTax'] = $totalOperatorPaidShippingChargesInclTax;

        return $this;
    }

    /**
     * Gets totalOperatorRemittedTaxes
     *
     * @return float|null
     */
    public function getTotalOperatorRemittedTaxes()
    {
        return $this->container['totalOperatorRemittedTaxes'];
    }

    /**
     * Sets totalOperatorRemittedTaxes
     *
     * @param float|null $totalOperatorRemittedTaxes Total amount for order taxes remitted by the operator
     *
     * @return self
     */
    public function setTotalOperatorRemittedTaxes($totalOperatorRemittedTaxes)
    {
        if (is_null($totalOperatorRemittedTaxes)) {
            throw new \InvalidArgumentException('non-nullable totalOperatorRemittedTaxes cannot be null');
        }
        $this->container['totalOperatorRemittedTaxes'] = $totalOperatorRemittedTaxes;

        return $this;
    }

    /**
     * Gets totalOtherCreditsExclTax
     *
     * @return float|null
     */
    public function getTotalOtherCreditsExclTax()
    {
        return $this->container['totalOtherCreditsExclTax'];
    }

    /**
     * Sets totalOtherCreditsExclTax
     *
     * @param float|null $totalOtherCreditsExclTax Total amount for other manual credits of a payment cycle (excluding taxes on stores)
     *
     * @return self
     */
    public function setTotalOtherCreditsExclTax($totalOtherCreditsExclTax)
    {
        if (is_null($totalOtherCreditsExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalOtherCreditsExclTax cannot be null');
        }
        $this->container['totalOtherCreditsExclTax'] = $totalOtherCreditsExclTax;

        return $this;
    }

    /**
     * Gets totalOtherCreditsInclTax
     *
     * @return float|null
     */
    public function getTotalOtherCreditsInclTax()
    {
        return $this->container['totalOtherCreditsInclTax'];
    }

    /**
     * Sets totalOtherCreditsInclTax
     *
     * @param float|null $totalOtherCreditsInclTax Total amount for other manual credits of a payment cycle (including taxes on stores)
     *
     * @return self
     */
    public function setTotalOtherCreditsInclTax($totalOtherCreditsInclTax)
    {
        if (is_null($totalOtherCreditsInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalOtherCreditsInclTax cannot be null');
        }
        $this->container['totalOtherCreditsInclTax'] = $totalOtherCreditsInclTax;

        return $this;
    }

    /**
     * Gets totalOtherInvoicesExclTax
     *
     * @return float|null
     */
    public function getTotalOtherInvoicesExclTax()
    {
        return $this->container['totalOtherInvoicesExclTax'];
    }

    /**
     * Sets totalOtherInvoicesExclTax
     *
     * @param float|null $totalOtherInvoicesExclTax Total amount for other manual invoices of a payment cycle (excluding taxes on stores)
     *
     * @return self
     */
    public function setTotalOtherInvoicesExclTax($totalOtherInvoicesExclTax)
    {
        if (is_null($totalOtherInvoicesExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalOtherInvoicesExclTax cannot be null');
        }
        $this->container['totalOtherInvoicesExclTax'] = $totalOtherInvoicesExclTax;

        return $this;
    }

    /**
     * Gets totalOtherInvoicesInclTax
     *
     * @return float|null
     */
    public function getTotalOtherInvoicesInclTax()
    {
        return $this->container['totalOtherInvoicesInclTax'];
    }

    /**
     * Sets totalOtherInvoicesInclTax
     *
     * @param float|null $totalOtherInvoicesInclTax Total amount for other manual invoices of a payment cycle (including taxes on stores)
     *
     * @return self
     */
    public function setTotalOtherInvoicesInclTax($totalOtherInvoicesInclTax)
    {
        if (is_null($totalOtherInvoicesInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalOtherInvoicesInclTax cannot be null');
        }
        $this->container['totalOtherInvoicesInclTax'] = $totalOtherInvoicesInclTax;

        return $this;
    }

    /**
     * Gets totalPayableOrdersExclTax
     *
     * @return float|null
     */
    public function getTotalPayableOrdersExclTax()
    {
        return $this->container['totalPayableOrdersExclTax'];
    }

    /**
     * Sets totalPayableOrdersExclTax
     *
     * @param float|null $totalPayableOrdersExclTax Total amount for payable orders including shipping charges (excluding taxes on stores)
     *
     * @return self
     */
    public function setTotalPayableOrdersExclTax($totalPayableOrdersExclTax)
    {
        if (is_null($totalPayableOrdersExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalPayableOrdersExclTax cannot be null');
        }
        $this->container['totalPayableOrdersExclTax'] = $totalPayableOrdersExclTax;

        return $this;
    }

    /**
     * Gets totalPayableOrdersInclTax
     *
     * @return float|null
     */
    public function getTotalPayableOrdersInclTax()
    {
        return $this->container['totalPayableOrdersInclTax'];
    }

    /**
     * Sets totalPayableOrdersInclTax
     *
     * @param float|null $totalPayableOrdersInclTax Total amount for payable orders including taxes (including taxes on orders)
     *
     * @return self
     */
    public function setTotalPayableOrdersInclTax($totalPayableOrdersInclTax)
    {
        if (is_null($totalPayableOrdersInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalPayableOrdersInclTax cannot be null');
        }
        $this->container['totalPayableOrdersInclTax'] = $totalPayableOrdersInclTax;

        return $this;
    }

    /**
     * Gets totalPurchaseTaxes
     *
     * @return float|null
     */
    public function getTotalPurchaseTaxes()
    {
        return $this->container['totalPurchaseTaxes'];
    }

    /**
     * Sets totalPurchaseTaxes
     *
     * @param float|null $totalPurchaseTaxes Total amount for purchase taxes
     *
     * @return self
     */
    public function setTotalPurchaseTaxes($totalPurchaseTaxes)
    {
        if (is_null($totalPurchaseTaxes)) {
            throw new \InvalidArgumentException('non-nullable totalPurchaseTaxes cannot be null');
        }
        $this->container['totalPurchaseTaxes'] = $totalPurchaseTaxes;

        return $this;
    }

    /**
     * Gets totalRefundCommissionsExclTax
     *
     * @return float|null
     */
    public function getTotalRefundCommissionsExclTax()
    {
        return $this->container['totalRefundCommissionsExclTax'];
    }

    /**
     * Sets totalRefundCommissionsExclTax
     *
     * @param float|null $totalRefundCommissionsExclTax Total amount of refunded commissions (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundCommissionsExclTax($totalRefundCommissionsExclTax)
    {
        if (is_null($totalRefundCommissionsExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalRefundCommissionsExclTax cannot be null');
        }
        $this->container['totalRefundCommissionsExclTax'] = $totalRefundCommissionsExclTax;

        return $this;
    }

    /**
     * Gets totalRefundCommissionsInclTax
     *
     * @return float|null
     */
    public function getTotalRefundCommissionsInclTax()
    {
        return $this->container['totalRefundCommissionsInclTax'];
    }

    /**
     * Sets totalRefundCommissionsInclTax
     *
     * @param float|null $totalRefundCommissionsInclTax Total amount of refunded commissions (including taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundCommissionsInclTax($totalRefundCommissionsInclTax)
    {
        if (is_null($totalRefundCommissionsInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalRefundCommissionsInclTax cannot be null');
        }
        $this->container['totalRefundCommissionsInclTax'] = $totalRefundCommissionsInclTax;

        return $this;
    }

    /**
     * Gets totalRefundFeeExclTax
     *
     * @return float|null
     */
    public function getTotalRefundFeeExclTax()
    {
        return $this->container['totalRefundFeeExclTax'];
    }

    /**
     * Sets totalRefundFeeExclTax
     *
     * @param float|null $totalRefundFeeExclTax Total amount of refunded fees (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundFeeExclTax($totalRefundFeeExclTax)
    {
        if (is_null($totalRefundFeeExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalRefundFeeExclTax cannot be null');
        }
        $this->container['totalRefundFeeExclTax'] = $totalRefundFeeExclTax;

        return $this;
    }

    /**
     * Gets totalRefundFeeInclTax
     *
     * @return float|null
     */
    public function getTotalRefundFeeInclTax()
    {
        return $this->container['totalRefundFeeInclTax'];
    }

    /**
     * Sets totalRefundFeeInclTax
     *
     * @param float|null $totalRefundFeeInclTax Total amount of refunded fees (including taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundFeeInclTax($totalRefundFeeInclTax)
    {
        if (is_null($totalRefundFeeInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalRefundFeeInclTax cannot be null');
        }
        $this->container['totalRefundFeeInclTax'] = $totalRefundFeeInclTax;

        return $this;
    }

    /**
     * Gets totalRefundFeeOperatorRemittedExclTax
     *
     * @return float|null
     */
    public function getTotalRefundFeeOperatorRemittedExclTax()
    {
        return $this->container['totalRefundFeeOperatorRemittedExclTax'];
    }

    /**
     * Sets totalRefundFeeOperatorRemittedExclTax
     *
     * @param float|null $totalRefundFeeOperatorRemittedExclTax Total amount of refunded fees remitted by the operator (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundFeeOperatorRemittedExclTax($totalRefundFeeOperatorRemittedExclTax)
    {
        if (is_null($totalRefundFeeOperatorRemittedExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalRefundFeeOperatorRemittedExclTax cannot be null');
        }
        $this->container['totalRefundFeeOperatorRemittedExclTax'] = $totalRefundFeeOperatorRemittedExclTax;

        return $this;
    }

    /**
     * Gets totalRefundFeeOperatorRemittedInclTax
     *
     * @return float|null
     */
    public function getTotalRefundFeeOperatorRemittedInclTax()
    {
        return $this->container['totalRefundFeeOperatorRemittedInclTax'];
    }

    /**
     * Sets totalRefundFeeOperatorRemittedInclTax
     *
     * @param float|null $totalRefundFeeOperatorRemittedInclTax Total amount of refunded fees remitted by the operator (including taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundFeeOperatorRemittedInclTax($totalRefundFeeOperatorRemittedInclTax)
    {
        if (is_null($totalRefundFeeOperatorRemittedInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalRefundFeeOperatorRemittedInclTax cannot be null');
        }
        $this->container['totalRefundFeeOperatorRemittedInclTax'] = $totalRefundFeeOperatorRemittedInclTax;

        return $this;
    }

    /**
     * Gets totalRefundNonPayableOrdersExclTax
     *
     * @return float|null
     */
    public function getTotalRefundNonPayableOrdersExclTax()
    {
        return $this->container['totalRefundNonPayableOrdersExclTax'];
    }

    /**
     * Sets totalRefundNonPayableOrdersExclTax
     *
     * @param float|null $totalRefundNonPayableOrdersExclTax Total amount refunded for non payable orders (including shipping charges and excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundNonPayableOrdersExclTax($totalRefundNonPayableOrdersExclTax)
    {
        if (is_null($totalRefundNonPayableOrdersExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalRefundNonPayableOrdersExclTax cannot be null');
        }
        $this->container['totalRefundNonPayableOrdersExclTax'] = $totalRefundNonPayableOrdersExclTax;

        return $this;
    }

    /**
     * Gets totalRefundNonPayableOrdersInclTax
     *
     * @return float|null
     */
    public function getTotalRefundNonPayableOrdersInclTax()
    {
        return $this->container['totalRefundNonPayableOrdersInclTax'];
    }

    /**
     * Sets totalRefundNonPayableOrdersInclTax
     *
     * @param float|null $totalRefundNonPayableOrdersInclTax Total amount refunded for non payable orders (excluding shipping charges and including taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundNonPayableOrdersInclTax($totalRefundNonPayableOrdersInclTax)
    {
        if (is_null($totalRefundNonPayableOrdersInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalRefundNonPayableOrdersInclTax cannot be null');
        }
        $this->container['totalRefundNonPayableOrdersInclTax'] = $totalRefundNonPayableOrdersInclTax;

        return $this;
    }

    /**
     * Gets totalRefundOperatorPaidShippingChargesExclTax
     *
     * @return float|null
     */
    public function getTotalRefundOperatorPaidShippingChargesExclTax()
    {
        return $this->container['totalRefundOperatorPaidShippingChargesExclTax'];
    }

    /**
     * Sets totalRefundOperatorPaidShippingChargesExclTax
     *
     * @param float|null $totalRefundOperatorPaidShippingChargesExclTax Total amount of refunded shipping charges paid by the operator (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundOperatorPaidShippingChargesExclTax($totalRefundOperatorPaidShippingChargesExclTax)
    {
        if (is_null($totalRefundOperatorPaidShippingChargesExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalRefundOperatorPaidShippingChargesExclTax cannot be null');
        }
        $this->container['totalRefundOperatorPaidShippingChargesExclTax'] = $totalRefundOperatorPaidShippingChargesExclTax;

        return $this;
    }

    /**
     * Gets totalRefundOperatorPaidShippingChargesInclTax
     *
     * @return float|null
     */
    public function getTotalRefundOperatorPaidShippingChargesInclTax()
    {
        return $this->container['totalRefundOperatorPaidShippingChargesInclTax'];
    }

    /**
     * Sets totalRefundOperatorPaidShippingChargesInclTax
     *
     * @param float|null $totalRefundOperatorPaidShippingChargesInclTax Total amount of refunded shipping charges paid by the operator (including taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundOperatorPaidShippingChargesInclTax($totalRefundOperatorPaidShippingChargesInclTax)
    {
        if (is_null($totalRefundOperatorPaidShippingChargesInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalRefundOperatorPaidShippingChargesInclTax cannot be null');
        }
        $this->container['totalRefundOperatorPaidShippingChargesInclTax'] = $totalRefundOperatorPaidShippingChargesInclTax;

        return $this;
    }

    /**
     * Gets totalRefundOperatorRemittedTaxes
     *
     * @return float|null
     */
    public function getTotalRefundOperatorRemittedTaxes()
    {
        return $this->container['totalRefundOperatorRemittedTaxes'];
    }

    /**
     * Sets totalRefundOperatorRemittedTaxes
     *
     * @param float|null $totalRefundOperatorRemittedTaxes Total amount of refunded taxes remitted by the operator
     *
     * @return self
     */
    public function setTotalRefundOperatorRemittedTaxes($totalRefundOperatorRemittedTaxes)
    {
        if (is_null($totalRefundOperatorRemittedTaxes)) {
            throw new \InvalidArgumentException('non-nullable totalRefundOperatorRemittedTaxes cannot be null');
        }
        $this->container['totalRefundOperatorRemittedTaxes'] = $totalRefundOperatorRemittedTaxes;

        return $this;
    }

    /**
     * Gets totalRefundOrdersExclTax
     *
     * @return float|null
     */
    public function getTotalRefundOrdersExclTax()
    {
        return $this->container['totalRefundOrdersExclTax'];
    }

    /**
     * Sets totalRefundOrdersExclTax
     *
     * @param float|null $totalRefundOrdersExclTax Total amount of refunded orders (excluding all refunded taxes)
     *
     * @return self
     */
    public function setTotalRefundOrdersExclTax($totalRefundOrdersExclTax)
    {
        if (is_null($totalRefundOrdersExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalRefundOrdersExclTax cannot be null');
        }
        $this->container['totalRefundOrdersExclTax'] = $totalRefundOrdersExclTax;

        return $this;
    }

    /**
     * Gets totalRefundOrdersInclTax
     *
     * @return float|null
     */
    public function getTotalRefundOrdersInclTax()
    {
        return $this->container['totalRefundOrdersInclTax'];
    }

    /**
     * Sets totalRefundOrdersInclTax
     *
     * @param float|null $totalRefundOrdersInclTax Total amount of refunded orders (including all refunded taxes)
     *
     * @return self
     */
    public function setTotalRefundOrdersInclTax($totalRefundOrdersInclTax)
    {
        if (is_null($totalRefundOrdersInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalRefundOrdersInclTax cannot be null');
        }
        $this->container['totalRefundOrdersInclTax'] = $totalRefundOrdersInclTax;

        return $this;
    }

    /**
     * Gets totalRefundPayableOrdersExclTax
     *
     * @return float|null
     */
    public function getTotalRefundPayableOrdersExclTax()
    {
        return $this->container['totalRefundPayableOrdersExclTax'];
    }

    /**
     * Sets totalRefundPayableOrdersExclTax
     *
     * @param float|null $totalRefundPayableOrdersExclTax Total amount refunded for payable orders (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundPayableOrdersExclTax($totalRefundPayableOrdersExclTax)
    {
        if (is_null($totalRefundPayableOrdersExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalRefundPayableOrdersExclTax cannot be null');
        }
        $this->container['totalRefundPayableOrdersExclTax'] = $totalRefundPayableOrdersExclTax;

        return $this;
    }

    /**
     * Gets totalRefundPayableOrdersInclTax
     *
     * @return float|null
     */
    public function getTotalRefundPayableOrdersInclTax()
    {
        return $this->container['totalRefundPayableOrdersInclTax'];
    }

    /**
     * Sets totalRefundPayableOrdersInclTax
     *
     * @param float|null $totalRefundPayableOrdersInclTax Total amount refunded for payable orders (including taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundPayableOrdersInclTax($totalRefundPayableOrdersInclTax)
    {
        if (is_null($totalRefundPayableOrdersInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalRefundPayableOrdersInclTax cannot be null');
        }
        $this->container['totalRefundPayableOrdersInclTax'] = $totalRefundPayableOrdersInclTax;

        return $this;
    }

    /**
     * Gets totalRefundPurchaseTaxes
     *
     * @return float|null
     */
    public function getTotalRefundPurchaseTaxes()
    {
        return $this->container['totalRefundPurchaseTaxes'];
    }

    /**
     * Sets totalRefundPurchaseTaxes
     *
     * @param float|null $totalRefundPurchaseTaxes Total amount of refunded purchase taxes
     *
     * @return self
     */
    public function setTotalRefundPurchaseTaxes($totalRefundPurchaseTaxes)
    {
        if (is_null($totalRefundPurchaseTaxes)) {
            throw new \InvalidArgumentException('non-nullable totalRefundPurchaseTaxes cannot be null');
        }
        $this->container['totalRefundPurchaseTaxes'] = $totalRefundPurchaseTaxes;

        return $this;
    }

    /**
     * Gets totalSellerFeesOnOrdersExclTax
     *
     * @return float|null
     */
    public function getTotalSellerFeesOnOrdersExclTax()
    {
        return $this->container['totalSellerFeesOnOrdersExclTax'];
    }

    /**
     * Sets totalSellerFeesOnOrdersExclTax
     *
     * @param float|null $totalSellerFeesOnOrdersExclTax Total amount of seller fees on orders (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalSellerFeesOnOrdersExclTax($totalSellerFeesOnOrdersExclTax)
    {
        if (is_null($totalSellerFeesOnOrdersExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalSellerFeesOnOrdersExclTax cannot be null');
        }
        $this->container['totalSellerFeesOnOrdersExclTax'] = $totalSellerFeesOnOrdersExclTax;

        return $this;
    }

    /**
     * Gets totalSellerFeesOnOrdersInclTax
     *
     * @return float|null
     */
    public function getTotalSellerFeesOnOrdersInclTax()
    {
        return $this->container['totalSellerFeesOnOrdersInclTax'];
    }

    /**
     * Sets totalSellerFeesOnOrdersInclTax
     *
     * @param float|null $totalSellerFeesOnOrdersInclTax Total amount of seller fees on orders (including taxes on orders)
     *
     * @return self
     */
    public function setTotalSellerFeesOnOrdersInclTax($totalSellerFeesOnOrdersInclTax)
    {
        if (is_null($totalSellerFeesOnOrdersInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalSellerFeesOnOrdersInclTax cannot be null');
        }
        $this->container['totalSellerFeesOnOrdersInclTax'] = $totalSellerFeesOnOrdersInclTax;

        return $this;
    }

    /**
     * Gets totalSellerPenaltyFeesExclTax
     *
     * @return float|null
     */
    public function getTotalSellerPenaltyFeesExclTax()
    {
        return $this->container['totalSellerPenaltyFeesExclTax'];
    }

    /**
     * Sets totalSellerPenaltyFeesExclTax
     *
     * @param float|null $totalSellerPenaltyFeesExclTax Total amount of seller penalty fees (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalSellerPenaltyFeesExclTax($totalSellerPenaltyFeesExclTax)
    {
        if (is_null($totalSellerPenaltyFeesExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalSellerPenaltyFeesExclTax cannot be null');
        }
        $this->container['totalSellerPenaltyFeesExclTax'] = $totalSellerPenaltyFeesExclTax;

        return $this;
    }

    /**
     * Gets totalSellerPenaltyFeesInclTax
     *
     * @return float|null
     */
    public function getTotalSellerPenaltyFeesInclTax()
    {
        return $this->container['totalSellerPenaltyFeesInclTax'];
    }

    /**
     * Sets totalSellerPenaltyFeesInclTax
     *
     * @param float|null $totalSellerPenaltyFeesInclTax Total amount of seller penalty fees (including taxes on orders)
     *
     * @return self
     */
    public function setTotalSellerPenaltyFeesInclTax($totalSellerPenaltyFeesInclTax)
    {
        if (is_null($totalSellerPenaltyFeesInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalSellerPenaltyFeesInclTax cannot be null');
        }
        $this->container['totalSellerPenaltyFeesInclTax'] = $totalSellerPenaltyFeesInclTax;

        return $this;
    }

    /**
     * Gets totalSubscriptionExclTax
     *
     * @return float|null
     */
    public function getTotalSubscriptionExclTax()
    {
        return $this->container['totalSubscriptionExclTax'];
    }

    /**
     * Sets totalSubscriptionExclTax
     *
     * @param float|null $totalSubscriptionExclTax Total amount of subscription fees (excluding taxes on stores)
     *
     * @return self
     */
    public function setTotalSubscriptionExclTax($totalSubscriptionExclTax)
    {
        if (is_null($totalSubscriptionExclTax)) {
            throw new \InvalidArgumentException('non-nullable totalSubscriptionExclTax cannot be null');
        }
        $this->container['totalSubscriptionExclTax'] = $totalSubscriptionExclTax;

        return $this;
    }

    /**
     * Gets totalSubscriptionInclTax
     *
     * @return float|null
     */
    public function getTotalSubscriptionInclTax()
    {
        return $this->container['totalSubscriptionInclTax'];
    }

    /**
     * Sets totalSubscriptionInclTax
     *
     * @param float|null $totalSubscriptionInclTax Total amount of subscription taxes (including taxes on stores)
     *
     * @return self
     */
    public function setTotalSubscriptionInclTax($totalSubscriptionInclTax)
    {
        if (is_null($totalSubscriptionInclTax)) {
            throw new \InvalidArgumentException('non-nullable totalSubscriptionInclTax cannot be null');
        }
        $this->container['totalSubscriptionInclTax'] = $totalSubscriptionInclTax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


