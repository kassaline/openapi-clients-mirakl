<?php
/**
 * Product
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Connect APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Product implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attributes' => '\OpenAPI\Client\Mirakl\Model\Attribute[]',
        'brand' => 'string',
        'category' => '\OpenAPI\Client\Mirakl\Model\Category',
        'descriptions' => '\OpenAPI\Client\Mirakl\Model\Description[]',
        'discountPrices' => '\OpenAPI\Client\Mirakl\Model\DiscountPrice[]',
        'gtins' => '\OpenAPI\Client\Mirakl\Model\Gtin[]',
        'id' => 'string',
        'images' => '\OpenAPI\Client\Mirakl\Model\Image[]',
        'quantities' => '\OpenAPI\Client\Mirakl\Model\Quantity[]',
        'standardPrices' => '\OpenAPI\Client\Mirakl\Model\StandardPrice[]',
        'titles' => '\OpenAPI\Client\Mirakl\Model\Title[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'attributes' => null,
        'brand' => null,
        'category' => null,
        'descriptions' => null,
        'discountPrices' => null,
        'gtins' => null,
        'id' => null,
        'images' => null,
        'quantities' => null,
        'standardPrices' => null,
        'titles' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'attributes' => false,
        'brand' => false,
        'category' => false,
        'descriptions' => false,
        'discountPrices' => false,
        'gtins' => false,
        'id' => false,
        'images' => false,
        'quantities' => false,
        'standardPrices' => false,
        'titles' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attributes' => 'attributes',
        'brand' => 'brand',
        'category' => 'category',
        'descriptions' => 'descriptions',
        'discountPrices' => 'discount_prices',
        'gtins' => 'gtins',
        'id' => 'id',
        'images' => 'images',
        'quantities' => 'quantities',
        'standardPrices' => 'standard_prices',
        'titles' => 'titles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attributes' => 'setAttributes',
        'brand' => 'setBrand',
        'category' => 'setCategory',
        'descriptions' => 'setDescriptions',
        'discountPrices' => 'setDiscountPrices',
        'gtins' => 'setGtins',
        'id' => 'setId',
        'images' => 'setImages',
        'quantities' => 'setQuantities',
        'standardPrices' => 'setStandardPrices',
        'titles' => 'setTitles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attributes' => 'getAttributes',
        'brand' => 'getBrand',
        'category' => 'getCategory',
        'descriptions' => 'getDescriptions',
        'discountPrices' => 'getDiscountPrices',
        'gtins' => 'getGtins',
        'id' => 'getId',
        'images' => 'getImages',
        'quantities' => 'getQuantities',
        'standardPrices' => 'getStandardPrices',
        'titles' => 'getTitles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('descriptions', $data ?? [], null);
        $this->setIfExists('discountPrices', $data ?? [], null);
        $this->setIfExists('gtins', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('quantities', $data ?? [], null);
        $this->setIfExists('standardPrices', $data ?? [], null);
        $this->setIfExists('titles', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['attributes']) && (count($this->container['attributes']) > 1000)) {
            $invalidProperties[] = "invalid value for 'attributes', number of items must be less than or equal to 1000.";
        }

        if (!is_null($this->container['attributes']) && (count($this->container['attributes']) < 0)) {
            $invalidProperties[] = "invalid value for 'attributes', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['brand']) && (mb_strlen($this->container['brand']) > 255)) {
            $invalidProperties[] = "invalid value for 'brand', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['descriptions']) && (count($this->container['descriptions']) > 10)) {
            $invalidProperties[] = "invalid value for 'descriptions', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['discountPrices']) && (count($this->container['discountPrices']) > 10)) {
            $invalidProperties[] = "invalid value for 'discountPrices', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['gtins']) && (count($this->container['gtins']) > 10)) {
            $invalidProperties[] = "invalid value for 'gtins', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['gtins']) && (count($this->container['gtins']) < 0)) {
            $invalidProperties[] = "invalid value for 'gtins', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) > 256)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['images']) && (count($this->container['images']) > 15)) {
            $invalidProperties[] = "invalid value for 'images', number of items must be less than or equal to 15.";
        }

        if (!is_null($this->container['images']) && (count($this->container['images']) < 0)) {
            $invalidProperties[] = "invalid value for 'images', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['quantities']) && (count($this->container['quantities']) > 20)) {
            $invalidProperties[] = "invalid value for 'quantities', number of items must be less than or equal to 20.";
        }

        if (!is_null($this->container['quantities']) && (count($this->container['quantities']) < 1)) {
            $invalidProperties[] = "invalid value for 'quantities', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['standardPrices']) && (count($this->container['standardPrices']) > 10)) {
            $invalidProperties[] = "invalid value for 'standardPrices', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['standardPrices']) && (count($this->container['standardPrices']) < 1)) {
            $invalidProperties[] = "invalid value for 'standardPrices', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['titles']) && (count($this->container['titles']) > 10)) {
            $invalidProperties[] = "invalid value for 'titles', number of items must be less than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Mirakl\Model\Attribute[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Mirakl\Model\Attribute[]|null $attributes Additional product attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }

        if ((count($attributes) > 1000)) {
            throw new \InvalidArgumentException('invalid value for $attributes when calling Product., number of items must be less than or equal to 1000.');
        }
        if ((count($attributes) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attributes when calling Product., number of items must be greater than or equal to 0.');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand Brand
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }
        if ((mb_strlen($brand) > 255)) {
            throw new \InvalidArgumentException('invalid length for $brand when calling Product., must be smaller than or equal to 255.');
        }

        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \OpenAPI\Client\Mirakl\Model\Category|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \OpenAPI\Client\Mirakl\Model\Category|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets descriptions
     *
     * @return \OpenAPI\Client\Mirakl\Model\Description[]|null
     */
    public function getDescriptions()
    {
        return $this->container['descriptions'];
    }

    /**
     * Sets descriptions
     *
     * @param \OpenAPI\Client\Mirakl\Model\Description[]|null $descriptions Descriptions with their associated locale
     *
     * @return self
     */
    public function setDescriptions($descriptions)
    {
        if (is_null($descriptions)) {
            throw new \InvalidArgumentException('non-nullable descriptions cannot be null');
        }

        if ((count($descriptions) > 10)) {
            throw new \InvalidArgumentException('invalid value for $descriptions when calling Product., number of items must be less than or equal to 10.');
        }
        $this->container['descriptions'] = $descriptions;

        return $this;
    }

    /**
     * Gets discountPrices
     *
     * @return \OpenAPI\Client\Mirakl\Model\DiscountPrice[]|null
     */
    public function getDiscountPrices()
    {
        return $this->container['discountPrices'];
    }

    /**
     * Sets discountPrices
     *
     * @param \OpenAPI\Client\Mirakl\Model\DiscountPrice[]|null $discountPrices Discount prices
     *
     * @return self
     */
    public function setDiscountPrices($discountPrices)
    {
        if (is_null($discountPrices)) {
            throw new \InvalidArgumentException('non-nullable discountPrices cannot be null');
        }

        if ((count($discountPrices) > 10)) {
            throw new \InvalidArgumentException('invalid value for $discountPrices when calling Product., number of items must be less than or equal to 10.');
        }
        $this->container['discountPrices'] = $discountPrices;

        return $this;
    }

    /**
     * Gets gtins
     *
     * @return \OpenAPI\Client\Mirakl\Model\Gtin[]|null
     */
    public function getGtins()
    {
        return $this->container['gtins'];
    }

    /**
     * Sets gtins
     *
     * @param \OpenAPI\Client\Mirakl\Model\Gtin[]|null $gtins GTIN (EAN, GENCOD, UPC, ISBN, etc.) used to map the product with one of the marketplace’s catalog
     *
     * @return self
     */
    public function setGtins($gtins)
    {
        if (is_null($gtins)) {
            throw new \InvalidArgumentException('non-nullable gtins cannot be null');
        }

        if ((count($gtins) > 10)) {
            throw new \InvalidArgumentException('invalid value for $gtins when calling Product., number of items must be less than or equal to 10.');
        }
        if ((count($gtins) < 0)) {
            throw new \InvalidArgumentException('invalid length for $gtins when calling Product., number of items must be greater than or equal to 0.');
        }
        $this->container['gtins'] = $gtins;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Product identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if ((mb_strlen($id) > 256)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Product., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Product., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \OpenAPI\Client\Mirakl\Model\Image[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \OpenAPI\Client\Mirakl\Model\Image[]|null $images Images
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }

        if ((count($images) > 15)) {
            throw new \InvalidArgumentException('invalid value for $images when calling Product., number of items must be less than or equal to 15.');
        }
        if ((count($images) < 0)) {
            throw new \InvalidArgumentException('invalid length for $images when calling Product., number of items must be greater than or equal to 0.');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets quantities
     *
     * @return \OpenAPI\Client\Mirakl\Model\Quantity[]|null
     */
    public function getQuantities()
    {
        return $this->container['quantities'];
    }

    /**
     * Sets quantities
     *
     * @param \OpenAPI\Client\Mirakl\Model\Quantity[]|null $quantities Product quantities
     *
     * @return self
     */
    public function setQuantities($quantities)
    {
        if (is_null($quantities)) {
            throw new \InvalidArgumentException('non-nullable quantities cannot be null');
        }

        if ((count($quantities) > 20)) {
            throw new \InvalidArgumentException('invalid value for $quantities when calling Product., number of items must be less than or equal to 20.');
        }
        if ((count($quantities) < 1)) {
            throw new \InvalidArgumentException('invalid length for $quantities when calling Product., number of items must be greater than or equal to 1.');
        }
        $this->container['quantities'] = $quantities;

        return $this;
    }

    /**
     * Gets standardPrices
     *
     * @return \OpenAPI\Client\Mirakl\Model\StandardPrice[]|null
     */
    public function getStandardPrices()
    {
        return $this->container['standardPrices'];
    }

    /**
     * Sets standardPrices
     *
     * @param \OpenAPI\Client\Mirakl\Model\StandardPrice[]|null $standardPrices Standard prices
     *
     * @return self
     */
    public function setStandardPrices($standardPrices)
    {
        if (is_null($standardPrices)) {
            throw new \InvalidArgumentException('non-nullable standardPrices cannot be null');
        }

        if ((count($standardPrices) > 10)) {
            throw new \InvalidArgumentException('invalid value for $standardPrices when calling Product., number of items must be less than or equal to 10.');
        }
        if ((count($standardPrices) < 1)) {
            throw new \InvalidArgumentException('invalid length for $standardPrices when calling Product., number of items must be greater than or equal to 1.');
        }
        $this->container['standardPrices'] = $standardPrices;

        return $this;
    }

    /**
     * Gets titles
     *
     * @return \OpenAPI\Client\Mirakl\Model\Title[]|null
     */
    public function getTitles()
    {
        return $this->container['titles'];
    }

    /**
     * Sets titles
     *
     * @param \OpenAPI\Client\Mirakl\Model\Title[]|null $titles Titles with their associated locale
     *
     * @return self
     */
    public function setTitles($titles)
    {
        if (is_null($titles)) {
            throw new \InvalidArgumentException('non-nullable titles cannot be null');
        }

        if ((count($titles) > 10)) {
            throw new \InvalidArgumentException('invalid value for $titles when calling Product., number of items must be less than or equal to 10.');
        }
        $this->container['titles'] = $titles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


