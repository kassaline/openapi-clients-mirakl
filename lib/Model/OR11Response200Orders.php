<?php
/**
 * OR11Response200Orders
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * OR11Response200Orders Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OR11Response200Orders implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OR11_Response_200_Orders';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'acceptanceDecisionDate' => '\DateTime',
        'canCancel' => 'bool',
        'canShopShip' => 'bool',
        'channel' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersChannel',
        'commercialId' => 'string',
        'createdDate' => '\DateTime',
        'currencyIsoCode' => 'string',
        'customer' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersCustomer',
        'customerDebitedDate' => '\DateTime',
        'customerDirectlyPaysSeller' => 'bool',
        'customerNotificationEmail' => 'string',
        'deliveryDate' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersDeliveryDate',
        'fulfillment' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersFulfillment',
        'fullyRefunded' => 'bool',
        'hasCustomerMessage' => 'bool',
        'hasIncident' => 'bool',
        'hasInvoice' => 'bool',
        'invoiceDetails' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersInvoiceDetails',
        'lastUpdatedDate' => '\DateTime',
        'orderAdditionalFields' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderAdditionalFields[]',
        'orderId' => 'string',
        'orderLines' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLines[]',
        'orderRefunds' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderRefunds[]',
        'orderState' => 'string',
        'orderStateReasonCode' => 'string',
        'orderStateReasonLabel' => 'string',
        'orderTaxMode' => 'string',
        'orderTaxes' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderTaxes[]',
        'paymentDuration' => 'int',
        'paymentType' => 'string',
        'paymentWorkflow' => 'string',
        'price' => 'float',
        'promotions' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersPromotions',
        'quoteId' => 'string',
        'references' => '\OpenAPI\Client\Mirakl\Model\OR11Response200OrdersReferences',
        'shippingCarrierCode' => 'string',
        'shippingCarrierStandardCode' => 'string',
        'shippingCompany' => 'string',
        'shippingDeadline' => '\DateTime',
        'shippingPrice' => 'float',
        'shippingPudoId' => 'string',
        'shippingTracking' => 'string',
        'shippingTrackingUrl' => 'string',
        'shippingTypeCode' => 'string',
        'shippingTypeLabel' => 'string',
        'shippingTypeStandardCode' => 'string',
        'shippingZoneCode' => 'string',
        'shippingZoneLabel' => 'string',
        'totalCommission' => 'float',
        'totalPrice' => 'float',
        'transactionDate' => '\DateTime',
        'transactionNumber' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'acceptanceDecisionDate' => 'date-time',
        'canCancel' => null,
        'canShopShip' => null,
        'channel' => null,
        'commercialId' => null,
        'createdDate' => 'date-time',
        'currencyIsoCode' => null,
        'customer' => null,
        'customerDebitedDate' => 'date-time',
        'customerDirectlyPaysSeller' => null,
        'customerNotificationEmail' => null,
        'deliveryDate' => null,
        'fulfillment' => null,
        'fullyRefunded' => null,
        'hasCustomerMessage' => null,
        'hasIncident' => null,
        'hasInvoice' => null,
        'invoiceDetails' => null,
        'lastUpdatedDate' => 'date-time',
        'orderAdditionalFields' => null,
        'orderId' => null,
        'orderLines' => null,
        'orderRefunds' => null,
        'orderState' => null,
        'orderStateReasonCode' => null,
        'orderStateReasonLabel' => null,
        'orderTaxMode' => null,
        'orderTaxes' => null,
        'paymentDuration' => 'int32',
        'paymentType' => null,
        'paymentWorkflow' => null,
        'price' => null,
        'promotions' => null,
        'quoteId' => null,
        'references' => null,
        'shippingCarrierCode' => null,
        'shippingCarrierStandardCode' => null,
        'shippingCompany' => null,
        'shippingDeadline' => 'date-time',
        'shippingPrice' => null,
        'shippingPudoId' => null,
        'shippingTracking' => null,
        'shippingTrackingUrl' => null,
        'shippingTypeCode' => null,
        'shippingTypeLabel' => null,
        'shippingTypeStandardCode' => null,
        'shippingZoneCode' => null,
        'shippingZoneLabel' => null,
        'totalCommission' => null,
        'totalPrice' => null,
        'transactionDate' => 'date-time',
        'transactionNumber' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'acceptanceDecisionDate' => false,
        'canCancel' => false,
        'canShopShip' => false,
        'channel' => false,
        'commercialId' => false,
        'createdDate' => false,
        'currencyIsoCode' => false,
        'customer' => false,
        'customerDebitedDate' => false,
        'customerDirectlyPaysSeller' => false,
        'customerNotificationEmail' => false,
        'deliveryDate' => false,
        'fulfillment' => false,
        'fullyRefunded' => false,
        'hasCustomerMessage' => false,
        'hasIncident' => false,
        'hasInvoice' => false,
        'invoiceDetails' => false,
        'lastUpdatedDate' => false,
        'orderAdditionalFields' => false,
        'orderId' => false,
        'orderLines' => false,
        'orderRefunds' => false,
        'orderState' => false,
        'orderStateReasonCode' => false,
        'orderStateReasonLabel' => false,
        'orderTaxMode' => false,
        'orderTaxes' => false,
        'paymentDuration' => false,
        'paymentType' => false,
        'paymentWorkflow' => false,
        'price' => false,
        'promotions' => false,
        'quoteId' => false,
        'references' => false,
        'shippingCarrierCode' => false,
        'shippingCarrierStandardCode' => false,
        'shippingCompany' => false,
        'shippingDeadline' => false,
        'shippingPrice' => false,
        'shippingPudoId' => false,
        'shippingTracking' => false,
        'shippingTrackingUrl' => false,
        'shippingTypeCode' => false,
        'shippingTypeLabel' => false,
        'shippingTypeStandardCode' => false,
        'shippingZoneCode' => false,
        'shippingZoneLabel' => false,
        'totalCommission' => false,
        'totalPrice' => false,
        'transactionDate' => false,
        'transactionNumber' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acceptanceDecisionDate' => 'acceptance_decision_date',
        'canCancel' => 'can_cancel',
        'canShopShip' => 'can_shop_ship',
        'channel' => 'channel',
        'commercialId' => 'commercial_id',
        'createdDate' => 'created_date',
        'currencyIsoCode' => 'currency_iso_code',
        'customer' => 'customer',
        'customerDebitedDate' => 'customer_debited_date',
        'customerDirectlyPaysSeller' => 'customer_directly_pays_seller',
        'customerNotificationEmail' => 'customer_notification_email',
        'deliveryDate' => 'delivery_date',
        'fulfillment' => 'fulfillment',
        'fullyRefunded' => 'fully_refunded',
        'hasCustomerMessage' => 'has_customer_message',
        'hasIncident' => 'has_incident',
        'hasInvoice' => 'has_invoice',
        'invoiceDetails' => 'invoice_details',
        'lastUpdatedDate' => 'last_updated_date',
        'orderAdditionalFields' => 'order_additional_fields',
        'orderId' => 'order_id',
        'orderLines' => 'order_lines',
        'orderRefunds' => 'order_refunds',
        'orderState' => 'order_state',
        'orderStateReasonCode' => 'order_state_reason_code',
        'orderStateReasonLabel' => 'order_state_reason_label',
        'orderTaxMode' => 'order_tax_mode',
        'orderTaxes' => 'order_taxes',
        'paymentDuration' => 'payment_duration',
        'paymentType' => 'payment_type',
        'paymentWorkflow' => 'payment_workflow',
        'price' => 'price',
        'promotions' => 'promotions',
        'quoteId' => 'quote_id',
        'references' => 'references',
        'shippingCarrierCode' => 'shipping_carrier_code',
        'shippingCarrierStandardCode' => 'shipping_carrier_standard_code',
        'shippingCompany' => 'shipping_company',
        'shippingDeadline' => 'shipping_deadline',
        'shippingPrice' => 'shipping_price',
        'shippingPudoId' => 'shipping_pudo_id',
        'shippingTracking' => 'shipping_tracking',
        'shippingTrackingUrl' => 'shipping_tracking_url',
        'shippingTypeCode' => 'shipping_type_code',
        'shippingTypeLabel' => 'shipping_type_label',
        'shippingTypeStandardCode' => 'shipping_type_standard_code',
        'shippingZoneCode' => 'shipping_zone_code',
        'shippingZoneLabel' => 'shipping_zone_label',
        'totalCommission' => 'total_commission',
        'totalPrice' => 'total_price',
        'transactionDate' => 'transaction_date',
        'transactionNumber' => 'transaction_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acceptanceDecisionDate' => 'setAcceptanceDecisionDate',
        'canCancel' => 'setCanCancel',
        'canShopShip' => 'setCanShopShip',
        'channel' => 'setChannel',
        'commercialId' => 'setCommercialId',
        'createdDate' => 'setCreatedDate',
        'currencyIsoCode' => 'setCurrencyIsoCode',
        'customer' => 'setCustomer',
        'customerDebitedDate' => 'setCustomerDebitedDate',
        'customerDirectlyPaysSeller' => 'setCustomerDirectlyPaysSeller',
        'customerNotificationEmail' => 'setCustomerNotificationEmail',
        'deliveryDate' => 'setDeliveryDate',
        'fulfillment' => 'setFulfillment',
        'fullyRefunded' => 'setFullyRefunded',
        'hasCustomerMessage' => 'setHasCustomerMessage',
        'hasIncident' => 'setHasIncident',
        'hasInvoice' => 'setHasInvoice',
        'invoiceDetails' => 'setInvoiceDetails',
        'lastUpdatedDate' => 'setLastUpdatedDate',
        'orderAdditionalFields' => 'setOrderAdditionalFields',
        'orderId' => 'setOrderId',
        'orderLines' => 'setOrderLines',
        'orderRefunds' => 'setOrderRefunds',
        'orderState' => 'setOrderState',
        'orderStateReasonCode' => 'setOrderStateReasonCode',
        'orderStateReasonLabel' => 'setOrderStateReasonLabel',
        'orderTaxMode' => 'setOrderTaxMode',
        'orderTaxes' => 'setOrderTaxes',
        'paymentDuration' => 'setPaymentDuration',
        'paymentType' => 'setPaymentType',
        'paymentWorkflow' => 'setPaymentWorkflow',
        'price' => 'setPrice',
        'promotions' => 'setPromotions',
        'quoteId' => 'setQuoteId',
        'references' => 'setReferences',
        'shippingCarrierCode' => 'setShippingCarrierCode',
        'shippingCarrierStandardCode' => 'setShippingCarrierStandardCode',
        'shippingCompany' => 'setShippingCompany',
        'shippingDeadline' => 'setShippingDeadline',
        'shippingPrice' => 'setShippingPrice',
        'shippingPudoId' => 'setShippingPudoId',
        'shippingTracking' => 'setShippingTracking',
        'shippingTrackingUrl' => 'setShippingTrackingUrl',
        'shippingTypeCode' => 'setShippingTypeCode',
        'shippingTypeLabel' => 'setShippingTypeLabel',
        'shippingTypeStandardCode' => 'setShippingTypeStandardCode',
        'shippingZoneCode' => 'setShippingZoneCode',
        'shippingZoneLabel' => 'setShippingZoneLabel',
        'totalCommission' => 'setTotalCommission',
        'totalPrice' => 'setTotalPrice',
        'transactionDate' => 'setTransactionDate',
        'transactionNumber' => 'setTransactionNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acceptanceDecisionDate' => 'getAcceptanceDecisionDate',
        'canCancel' => 'getCanCancel',
        'canShopShip' => 'getCanShopShip',
        'channel' => 'getChannel',
        'commercialId' => 'getCommercialId',
        'createdDate' => 'getCreatedDate',
        'currencyIsoCode' => 'getCurrencyIsoCode',
        'customer' => 'getCustomer',
        'customerDebitedDate' => 'getCustomerDebitedDate',
        'customerDirectlyPaysSeller' => 'getCustomerDirectlyPaysSeller',
        'customerNotificationEmail' => 'getCustomerNotificationEmail',
        'deliveryDate' => 'getDeliveryDate',
        'fulfillment' => 'getFulfillment',
        'fullyRefunded' => 'getFullyRefunded',
        'hasCustomerMessage' => 'getHasCustomerMessage',
        'hasIncident' => 'getHasIncident',
        'hasInvoice' => 'getHasInvoice',
        'invoiceDetails' => 'getInvoiceDetails',
        'lastUpdatedDate' => 'getLastUpdatedDate',
        'orderAdditionalFields' => 'getOrderAdditionalFields',
        'orderId' => 'getOrderId',
        'orderLines' => 'getOrderLines',
        'orderRefunds' => 'getOrderRefunds',
        'orderState' => 'getOrderState',
        'orderStateReasonCode' => 'getOrderStateReasonCode',
        'orderStateReasonLabel' => 'getOrderStateReasonLabel',
        'orderTaxMode' => 'getOrderTaxMode',
        'orderTaxes' => 'getOrderTaxes',
        'paymentDuration' => 'getPaymentDuration',
        'paymentType' => 'getPaymentType',
        'paymentWorkflow' => 'getPaymentWorkflow',
        'price' => 'getPrice',
        'promotions' => 'getPromotions',
        'quoteId' => 'getQuoteId',
        'references' => 'getReferences',
        'shippingCarrierCode' => 'getShippingCarrierCode',
        'shippingCarrierStandardCode' => 'getShippingCarrierStandardCode',
        'shippingCompany' => 'getShippingCompany',
        'shippingDeadline' => 'getShippingDeadline',
        'shippingPrice' => 'getShippingPrice',
        'shippingPudoId' => 'getShippingPudoId',
        'shippingTracking' => 'getShippingTracking',
        'shippingTrackingUrl' => 'getShippingTrackingUrl',
        'shippingTypeCode' => 'getShippingTypeCode',
        'shippingTypeLabel' => 'getShippingTypeLabel',
        'shippingTypeStandardCode' => 'getShippingTypeStandardCode',
        'shippingZoneCode' => 'getShippingZoneCode',
        'shippingZoneLabel' => 'getShippingZoneLabel',
        'totalCommission' => 'getTotalCommission',
        'totalPrice' => 'getTotalPrice',
        'transactionDate' => 'getTransactionDate',
        'transactionNumber' => 'getTransactionNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('acceptanceDecisionDate', $data ?? [], null);
        $this->setIfExists('canCancel', $data ?? [], null);
        $this->setIfExists('canShopShip', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('commercialId', $data ?? [], null);
        $this->setIfExists('createdDate', $data ?? [], null);
        $this->setIfExists('currencyIsoCode', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('customerDebitedDate', $data ?? [], null);
        $this->setIfExists('customerDirectlyPaysSeller', $data ?? [], null);
        $this->setIfExists('customerNotificationEmail', $data ?? [], null);
        $this->setIfExists('deliveryDate', $data ?? [], null);
        $this->setIfExists('fulfillment', $data ?? [], null);
        $this->setIfExists('fullyRefunded', $data ?? [], null);
        $this->setIfExists('hasCustomerMessage', $data ?? [], null);
        $this->setIfExists('hasIncident', $data ?? [], null);
        $this->setIfExists('hasInvoice', $data ?? [], null);
        $this->setIfExists('invoiceDetails', $data ?? [], null);
        $this->setIfExists('lastUpdatedDate', $data ?? [], null);
        $this->setIfExists('orderAdditionalFields', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('orderLines', $data ?? [], null);
        $this->setIfExists('orderRefunds', $data ?? [], null);
        $this->setIfExists('orderState', $data ?? [], null);
        $this->setIfExists('orderStateReasonCode', $data ?? [], null);
        $this->setIfExists('orderStateReasonLabel', $data ?? [], null);
        $this->setIfExists('orderTaxMode', $data ?? [], null);
        $this->setIfExists('orderTaxes', $data ?? [], null);
        $this->setIfExists('paymentDuration', $data ?? [], null);
        $this->setIfExists('paymentType', $data ?? [], null);
        $this->setIfExists('paymentWorkflow', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('promotions', $data ?? [], null);
        $this->setIfExists('quoteId', $data ?? [], null);
        $this->setIfExists('references', $data ?? [], null);
        $this->setIfExists('shippingCarrierCode', $data ?? [], null);
        $this->setIfExists('shippingCarrierStandardCode', $data ?? [], null);
        $this->setIfExists('shippingCompany', $data ?? [], null);
        $this->setIfExists('shippingDeadline', $data ?? [], null);
        $this->setIfExists('shippingPrice', $data ?? [], null);
        $this->setIfExists('shippingPudoId', $data ?? [], null);
        $this->setIfExists('shippingTracking', $data ?? [], null);
        $this->setIfExists('shippingTrackingUrl', $data ?? [], null);
        $this->setIfExists('shippingTypeCode', $data ?? [], null);
        $this->setIfExists('shippingTypeLabel', $data ?? [], null);
        $this->setIfExists('shippingTypeStandardCode', $data ?? [], null);
        $this->setIfExists('shippingZoneCode', $data ?? [], null);
        $this->setIfExists('shippingZoneLabel', $data ?? [], null);
        $this->setIfExists('totalCommission', $data ?? [], null);
        $this->setIfExists('totalPrice', $data ?? [], null);
        $this->setIfExists('transactionDate', $data ?? [], null);
        $this->setIfExists('transactionNumber', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acceptanceDecisionDate
     *
     * @return \DateTime|null
     */
    public function getAcceptanceDecisionDate()
    {
        return $this->container['acceptanceDecisionDate'];
    }

    /**
     * Sets acceptanceDecisionDate
     *
     * @param \DateTime|null $acceptanceDecisionDate The date where the shop decided to accept or refuse the order. Null when the order was automatically refused or accepted.
     *
     * @return self
     */
    public function setAcceptanceDecisionDate($acceptanceDecisionDate)
    {
        if (is_null($acceptanceDecisionDate)) {
            throw new \InvalidArgumentException('non-nullable acceptanceDecisionDate cannot be null');
        }
        $this->container['acceptanceDecisionDate'] = $acceptanceDecisionDate;

        return $this;
    }

    /**
     * Gets canCancel
     *
     * @return bool|null
     */
    public function getCanCancel()
    {
        return $this->container['canCancel'];
    }

    /**
     * Sets canCancel
     *
     * @param bool|null $canCancel Indicate if the order can be cancelled
     *
     * @return self
     */
    public function setCanCancel($canCancel)
    {
        if (is_null($canCancel)) {
            throw new \InvalidArgumentException('non-nullable canCancel cannot be null');
        }
        $this->container['canCancel'] = $canCancel;

        return $this;
    }

    /**
     * Gets canShopShip
     *
     * @return bool|null
     */
    public function getCanShopShip()
    {
        return $this->container['canShopShip'];
    }

    /**
     * Sets canShopShip
     *
     * @param bool|null $canShopShip Indicates if shops can or cannot ship orders
     *
     * @return self
     */
    public function setCanShopShip($canShopShip)
    {
        if (is_null($canShopShip)) {
            throw new \InvalidArgumentException('non-nullable canShopShip cannot be null');
        }
        $this->container['canShopShip'] = $canShopShip;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersChannel|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersChannel|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets commercialId
     *
     * @return string|null
     */
    public function getCommercialId()
    {
        return $this->container['commercialId'];
    }

    /**
     * Sets commercialId
     *
     * @param string|null $commercialId Commercial order's identifier
     *
     * @return self
     */
    public function setCommercialId($commercialId)
    {
        if (is_null($commercialId)) {
            throw new \InvalidArgumentException('non-nullable commercialId cannot be null');
        }
        $this->container['commercialId'] = $commercialId;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime|null $createdDate Order's creation date
     *
     * @return self
     */
    public function setCreatedDate($createdDate)
    {
        if (is_null($createdDate)) {
            throw new \InvalidArgumentException('non-nullable createdDate cannot be null');
        }
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets currencyIsoCode
     *
     * @return string|null
     */
    public function getCurrencyIsoCode()
    {
        return $this->container['currencyIsoCode'];
    }

    /**
     * Sets currencyIsoCode
     *
     * @param string|null $currencyIsoCode Shop's currency (iso format)
     *
     * @return self
     */
    public function setCurrencyIsoCode($currencyIsoCode)
    {
        if (is_null($currencyIsoCode)) {
            throw new \InvalidArgumentException('non-nullable currencyIsoCode cannot be null');
        }
        $this->container['currencyIsoCode'] = $currencyIsoCode;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersCustomer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersCustomer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customerDebitedDate
     *
     * @return \DateTime|null
     */
    public function getCustomerDebitedDate()
    {
        return $this->container['customerDebitedDate'];
    }

    /**
     * Sets customerDebitedDate
     *
     * @param \DateTime|null $customerDebitedDate The payment's date of the order by the customer
     *
     * @return self
     */
    public function setCustomerDebitedDate($customerDebitedDate)
    {
        if (is_null($customerDebitedDate)) {
            throw new \InvalidArgumentException('non-nullable customerDebitedDate cannot be null');
        }
        $this->container['customerDebitedDate'] = $customerDebitedDate;

        return $this;
    }

    /**
     * Gets customerDirectlyPaysSeller
     *
     * @return bool|null
     */
    public function getCustomerDirectlyPaysSeller()
    {
        return $this->container['customerDirectlyPaysSeller'];
    }

    /**
     * Sets customerDirectlyPaysSeller
     *
     * @param bool|null $customerDirectlyPaysSeller True if order is paid directly to seller. False otherwise.
     *
     * @return self
     */
    public function setCustomerDirectlyPaysSeller($customerDirectlyPaysSeller)
    {
        if (is_null($customerDirectlyPaysSeller)) {
            throw new \InvalidArgumentException('non-nullable customerDirectlyPaysSeller cannot be null');
        }
        $this->container['customerDirectlyPaysSeller'] = $customerDirectlyPaysSeller;

        return $this;
    }

    /**
     * Gets customerNotificationEmail
     *
     * @return string|null
     */
    public function getCustomerNotificationEmail()
    {
        return $this->container['customerNotificationEmail'];
    }

    /**
     * Sets customerNotificationEmail
     *
     * @param string|null $customerNotificationEmail Anonymized customer email usable for notifications that do not expect an answer
     *
     * @return self
     */
    public function setCustomerNotificationEmail($customerNotificationEmail)
    {
        if (is_null($customerNotificationEmail)) {
            throw new \InvalidArgumentException('non-nullable customerNotificationEmail cannot be null');
        }
        $this->container['customerNotificationEmail'] = $customerNotificationEmail;

        return $this;
    }

    /**
     * Gets deliveryDate
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersDeliveryDate|null
     */
    public function getDeliveryDate()
    {
        return $this->container['deliveryDate'];
    }

    /**
     * Sets deliveryDate
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersDeliveryDate|null $deliveryDate deliveryDate
     *
     * @return self
     */
    public function setDeliveryDate($deliveryDate)
    {
        if (is_null($deliveryDate)) {
            throw new \InvalidArgumentException('non-nullable deliveryDate cannot be null');
        }
        $this->container['deliveryDate'] = $deliveryDate;

        return $this;
    }

    /**
     * Gets fulfillment
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersFulfillment|null
     */
    public function getFulfillment()
    {
        return $this->container['fulfillment'];
    }

    /**
     * Sets fulfillment
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersFulfillment|null $fulfillment fulfillment
     *
     * @return self
     */
    public function setFulfillment($fulfillment)
    {
        if (is_null($fulfillment)) {
            throw new \InvalidArgumentException('non-nullable fulfillment cannot be null');
        }
        $this->container['fulfillment'] = $fulfillment;

        return $this;
    }

    /**
     * Gets fullyRefunded
     *
     * @return bool|null
     */
    public function getFullyRefunded()
    {
        return $this->container['fullyRefunded'];
    }

    /**
     * Sets fullyRefunded
     *
     * @param bool|null $fullyRefunded Refunds have been requested and their cumulated amounts correspond to the sum of all remaining active order lines.
     *
     * @return self
     */
    public function setFullyRefunded($fullyRefunded)
    {
        if (is_null($fullyRefunded)) {
            throw new \InvalidArgumentException('non-nullable fullyRefunded cannot be null');
        }
        $this->container['fullyRefunded'] = $fullyRefunded;

        return $this;
    }

    /**
     * Gets hasCustomerMessage
     *
     * @return bool|null
     */
    public function getHasCustomerMessage()
    {
        return $this->container['hasCustomerMessage'];
    }

    /**
     * Sets hasCustomerMessage
     *
     * @param bool|null $hasCustomerMessage Indicate if the customer has sent a message related to this order
     *
     * @return self
     */
    public function setHasCustomerMessage($hasCustomerMessage)
    {
        if (is_null($hasCustomerMessage)) {
            throw new \InvalidArgumentException('non-nullable hasCustomerMessage cannot be null');
        }
        $this->container['hasCustomerMessage'] = $hasCustomerMessage;

        return $this;
    }

    /**
     * Gets hasIncident
     *
     * @return bool|null
     */
    public function getHasIncident()
    {
        return $this->container['hasIncident'];
    }

    /**
     * Sets hasIncident
     *
     * @param bool|null $hasIncident Indicate if order has incident on at least one order line
     *
     * @return self
     */
    public function setHasIncident($hasIncident)
    {
        if (is_null($hasIncident)) {
            throw new \InvalidArgumentException('non-nullable hasIncident cannot be null');
        }
        $this->container['hasIncident'] = $hasIncident;

        return $this;
    }

    /**
     * Gets hasInvoice
     *
     * @return bool|null
     */
    public function getHasInvoice()
    {
        return $this->container['hasInvoice'];
    }

    /**
     * Sets hasInvoice
     *
     * @param bool|null $hasInvoice Is an invoice available for this order.
     *
     * @return self
     */
    public function setHasInvoice($hasInvoice)
    {
        if (is_null($hasInvoice)) {
            throw new \InvalidArgumentException('non-nullable hasInvoice cannot be null');
        }
        $this->container['hasInvoice'] = $hasInvoice;

        return $this;
    }

    /**
     * Gets invoiceDetails
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersInvoiceDetails|null
     */
    public function getInvoiceDetails()
    {
        return $this->container['invoiceDetails'];
    }

    /**
     * Sets invoiceDetails
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersInvoiceDetails|null $invoiceDetails invoiceDetails
     *
     * @return self
     */
    public function setInvoiceDetails($invoiceDetails)
    {
        if (is_null($invoiceDetails)) {
            throw new \InvalidArgumentException('non-nullable invoiceDetails cannot be null');
        }
        $this->container['invoiceDetails'] = $invoiceDetails;

        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \DateTime|null
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \DateTime|null $lastUpdatedDate Order's last updated date
     *
     * @return self
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        if (is_null($lastUpdatedDate)) {
            throw new \InvalidArgumentException('non-nullable lastUpdatedDate cannot be null');
        }
        $this->container['lastUpdatedDate'] = $lastUpdatedDate;

        return $this;
    }

    /**
     * Gets orderAdditionalFields
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderAdditionalFields[]|null
     */
    public function getOrderAdditionalFields()
    {
        return $this->container['orderAdditionalFields'];
    }

    /**
     * Sets orderAdditionalFields
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderAdditionalFields[]|null $orderAdditionalFields Order's custom fields
     *
     * @return self
     */
    public function setOrderAdditionalFields($orderAdditionalFields)
    {
        if (is_null($orderAdditionalFields)) {
            throw new \InvalidArgumentException('non-nullable orderAdditionalFields cannot be null');
        }
        $this->container['orderAdditionalFields'] = $orderAdditionalFields;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string|null $orderId Order's identifier
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets orderLines
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLines[]|null
     */
    public function getOrderLines()
    {
        return $this->container['orderLines'];
    }

    /**
     * Sets orderLines
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderLines[]|null $orderLines Order lines
     *
     * @return self
     */
    public function setOrderLines($orderLines)
    {
        if (is_null($orderLines)) {
            throw new \InvalidArgumentException('non-nullable orderLines cannot be null');
        }
        $this->container['orderLines'] = $orderLines;

        return $this;
    }

    /**
     * Gets orderRefunds
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderRefunds[]|null
     */
    public function getOrderRefunds()
    {
        return $this->container['orderRefunds'];
    }

    /**
     * Sets orderRefunds
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderRefunds[]|null $orderRefunds The list of refunds aggregated by group identifier<br/>Available when feature ‘order level tax calculation’ is enabled
     *
     * @return self
     */
    public function setOrderRefunds($orderRefunds)
    {
        if (is_null($orderRefunds)) {
            throw new \InvalidArgumentException('non-nullable orderRefunds cannot be null');
        }
        $this->container['orderRefunds'] = $orderRefunds;

        return $this;
    }

    /**
     * Gets orderState
     *
     * @return string|null
     */
    public function getOrderState()
    {
        return $this->container['orderState'];
    }

    /**
     * Sets orderState
     *
     * @param string|null $orderState Order's state
     *
     * @return self
     */
    public function setOrderState($orderState)
    {
        if (is_null($orderState)) {
            throw new \InvalidArgumentException('non-nullable orderState cannot be null');
        }
        $this->container['orderState'] = $orderState;

        return $this;
    }

    /**
     * Gets orderStateReasonCode
     *
     * @return string|null
     */
    public function getOrderStateReasonCode()
    {
        return $this->container['orderStateReasonCode'];
    }

    /**
     * Sets orderStateReasonCode
     *
     * @param string|null $orderStateReasonCode Reason's code of the order state
     *
     * @return self
     */
    public function setOrderStateReasonCode($orderStateReasonCode)
    {
        if (is_null($orderStateReasonCode)) {
            throw new \InvalidArgumentException('non-nullable orderStateReasonCode cannot be null');
        }
        $this->container['orderStateReasonCode'] = $orderStateReasonCode;

        return $this;
    }

    /**
     * Gets orderStateReasonLabel
     *
     * @return string|null
     */
    public function getOrderStateReasonLabel()
    {
        return $this->container['orderStateReasonLabel'];
    }

    /**
     * Sets orderStateReasonLabel
     *
     * @param string|null $orderStateReasonLabel Reason's label of the order state
     *
     * @return self
     */
    public function setOrderStateReasonLabel($orderStateReasonLabel)
    {
        if (is_null($orderStateReasonLabel)) {
            throw new \InvalidArgumentException('non-nullable orderStateReasonLabel cannot be null');
        }
        $this->container['orderStateReasonLabel'] = $orderStateReasonLabel;

        return $this;
    }

    /**
     * Gets orderTaxMode
     *
     * @return string|null
     */
    public function getOrderTaxMode()
    {
        return $this->container['orderTaxMode'];
    }

    /**
     * Sets orderTaxMode
     *
     * @param string|null $orderTaxMode Please note: In case there is no tax, the prices will show the same amount in TAX_EXCLUDED and TAX_INCLUDED mode. The tax mode is only useful if taxes are specified in the order.<br>Possible values: <ul><li><code>TAX_EXCLUDED</code>: the price fields (price, unit price, shipping price, cancellation amount, refund amount and order total prices) are expressed without tax (taxes should be added to these prices in order to get the full amount including taxes).</li><li><code>TAX_INCLUDED</code>: the price fields include the tax amount. </li></ul>
     *
     * @return self
     */
    public function setOrderTaxMode($orderTaxMode)
    {
        if (is_null($orderTaxMode)) {
            throw new \InvalidArgumentException('non-nullable orderTaxMode cannot be null');
        }
        $this->container['orderTaxMode'] = $orderTaxMode;

        return $this;
    }

    /**
     * Gets orderTaxes
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderTaxes[]|null
     */
    public function getOrderTaxes()
    {
        return $this->container['orderTaxes'];
    }

    /**
     * Sets orderTaxes
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersOrderTaxes[]|null $orderTaxes Total amount of taxes aggregated per tax code and rate<br/>Available when feature ‘order level tax calculation’ is enabled
     *
     * @return self
     */
    public function setOrderTaxes($orderTaxes)
    {
        if (is_null($orderTaxes)) {
            throw new \InvalidArgumentException('non-nullable orderTaxes cannot be null');
        }
        $this->container['orderTaxes'] = $orderTaxes;

        return $this;
    }

    /**
     * Gets paymentDuration
     *
     * @return int|null
     */
    public function getPaymentDuration()
    {
        return $this->container['paymentDuration'];
    }

    /**
     * Sets paymentDuration
     *
     * @param int|null $paymentDuration The payment's duration (i.e. the delay after which the order is supposed to be paid), in days.<br/>Only applicable for <code>PAY_ON_DUE_DATE</code> orders, null otherwise.<br/>Note that this field has currently no impact on the order workflow, it is provided for information purposes.
     *
     * @return self
     */
    public function setPaymentDuration($paymentDuration)
    {
        if (is_null($paymentDuration)) {
            throw new \InvalidArgumentException('non-nullable paymentDuration cannot be null');
        }
        $this->container['paymentDuration'] = $paymentDuration;

        return $this;
    }

    /**
     * Gets paymentType
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->container['paymentType'];
    }

    /**
     * Sets paymentType
     *
     * @param string|null $paymentType The payment's type used by the customer to pay this order
     *
     * @return self
     */
    public function setPaymentType($paymentType)
    {
        if (is_null($paymentType)) {
            throw new \InvalidArgumentException('non-nullable paymentType cannot be null');
        }
        $this->container['paymentType'] = $paymentType;

        return $this;
    }

    /**
     * Gets paymentWorkflow
     *
     * @return string|null
     */
    public function getPaymentWorkflow()
    {
        return $this->container['paymentWorkflow'];
    }

    /**
     * Sets paymentWorkflow
     *
     * @param string|null $paymentWorkflow The payment workflow followed by the order
     *
     * @return self
     */
    public function setPaymentWorkflow($paymentWorkflow)
    {
        if (is_null($paymentWorkflow)) {
            throw new \InvalidArgumentException('non-nullable paymentWorkflow cannot be null');
        }
        $this->container['paymentWorkflow'] = $paymentWorkflow;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Order's price (sum of order line's price)
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets promotions
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersPromotions|null
     */
    public function getPromotions()
    {
        return $this->container['promotions'];
    }

    /**
     * Sets promotions
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersPromotions|null $promotions promotions
     *
     * @return self
     */
    public function setPromotions($promotions)
    {
        if (is_null($promotions)) {
            throw new \InvalidArgumentException('non-nullable promotions cannot be null');
        }
        $this->container['promotions'] = $promotions;

        return $this;
    }

    /**
     * Gets quoteId
     *
     * @return string|null
     */
    public function getQuoteId()
    {
        return $this->container['quoteId'];
    }

    /**
     * Sets quoteId
     *
     * @param string|null $quoteId Quote's id from which the order has been placed, or null if it was not from a quote
     *
     * @return self
     */
    public function setQuoteId($quoteId)
    {
        if (is_null($quoteId)) {
            throw new \InvalidArgumentException('non-nullable quoteId cannot be null');
        }
        $this->container['quoteId'] = $quoteId;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersReferences|null
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \OpenAPI\Client\Mirakl\Model\OR11Response200OrdersReferences|null $references references
     *
     * @return self
     */
    public function setReferences($references)
    {
        if (is_null($references)) {
            throw new \InvalidArgumentException('non-nullable references cannot be null');
        }
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets shippingCarrierCode
     *
     * @return string|null
     */
    public function getShippingCarrierCode()
    {
        return $this->container['shippingCarrierCode'];
    }

    /**
     * Sets shippingCarrierCode
     *
     * @param string|null $shippingCarrierCode Shipping carrier code (associated with the Shipping company label)
     *
     * @return self
     */
    public function setShippingCarrierCode($shippingCarrierCode)
    {
        if (is_null($shippingCarrierCode)) {
            throw new \InvalidArgumentException('non-nullable shippingCarrierCode cannot be null');
        }
        $this->container['shippingCarrierCode'] = $shippingCarrierCode;

        return $this;
    }

    /**
     * Gets shippingCarrierStandardCode
     *
     * @return string|null
     */
    public function getShippingCarrierStandardCode()
    {
        return $this->container['shippingCarrierStandardCode'];
    }

    /**
     * Sets shippingCarrierStandardCode
     *
     * @param string|null $shippingCarrierStandardCode Shipping carrier standard code (associated with the shipping carrier code)
     *
     * @return self
     */
    public function setShippingCarrierStandardCode($shippingCarrierStandardCode)
    {
        if (is_null($shippingCarrierStandardCode)) {
            throw new \InvalidArgumentException('non-nullable shippingCarrierStandardCode cannot be null');
        }
        $this->container['shippingCarrierStandardCode'] = $shippingCarrierStandardCode;

        return $this;
    }

    /**
     * Gets shippingCompany
     *
     * @return string|null
     */
    public function getShippingCompany()
    {
        return $this->container['shippingCompany'];
    }

    /**
     * Sets shippingCompany
     *
     * @param string|null $shippingCompany Shipping company
     *
     * @return self
     */
    public function setShippingCompany($shippingCompany)
    {
        if (is_null($shippingCompany)) {
            throw new \InvalidArgumentException('non-nullable shippingCompany cannot be null');
        }
        $this->container['shippingCompany'] = $shippingCompany;

        return $this;
    }

    /**
     * Gets shippingDeadline
     *
     * @return \DateTime|null
     */
    public function getShippingDeadline()
    {
        return $this->container['shippingDeadline'];
    }

    /**
     * Sets shippingDeadline
     *
     * @param \DateTime|null $shippingDeadline Order's shipping deadline
     *
     * @return self
     */
    public function setShippingDeadline($shippingDeadline)
    {
        if (is_null($shippingDeadline)) {
            throw new \InvalidArgumentException('non-nullable shippingDeadline cannot be null');
        }
        $this->container['shippingDeadline'] = $shippingDeadline;

        return $this;
    }

    /**
     * Gets shippingPrice
     *
     * @return float|null
     */
    public function getShippingPrice()
    {
        return $this->container['shippingPrice'];
    }

    /**
     * Sets shippingPrice
     *
     * @param float|null $shippingPrice Order's shipping price (sum of order line's shipping price)
     *
     * @return self
     */
    public function setShippingPrice($shippingPrice)
    {
        if (is_null($shippingPrice)) {
            throw new \InvalidArgumentException('non-nullable shippingPrice cannot be null');
        }
        $this->container['shippingPrice'] = $shippingPrice;

        return $this;
    }

    /**
     * Gets shippingPudoId
     *
     * @return string|null
     */
    public function getShippingPudoId()
    {
        return $this->container['shippingPudoId'];
    }

    /**
     * Sets shippingPudoId
     *
     * @param string|null $shippingPudoId PickUp DropOff (PUDO) point identifier
     *
     * @return self
     */
    public function setShippingPudoId($shippingPudoId)
    {
        if (is_null($shippingPudoId)) {
            throw new \InvalidArgumentException('non-nullable shippingPudoId cannot be null');
        }
        $this->container['shippingPudoId'] = $shippingPudoId;

        return $this;
    }

    /**
     * Gets shippingTracking
     *
     * @return string|null
     */
    public function getShippingTracking()
    {
        return $this->container['shippingTracking'];
    }

    /**
     * Sets shippingTracking
     *
     * @param string|null $shippingTracking Shipping tracking
     *
     * @return self
     */
    public function setShippingTracking($shippingTracking)
    {
        if (is_null($shippingTracking)) {
            throw new \InvalidArgumentException('non-nullable shippingTracking cannot be null');
        }
        $this->container['shippingTracking'] = $shippingTracking;

        return $this;
    }

    /**
     * Gets shippingTrackingUrl
     *
     * @return string|null
     */
    public function getShippingTrackingUrl()
    {
        return $this->container['shippingTrackingUrl'];
    }

    /**
     * Sets shippingTrackingUrl
     *
     * @param string|null $shippingTrackingUrl Shipping tracking url
     *
     * @return self
     */
    public function setShippingTrackingUrl($shippingTrackingUrl)
    {
        if (is_null($shippingTrackingUrl)) {
            throw new \InvalidArgumentException('non-nullable shippingTrackingUrl cannot be null');
        }
        $this->container['shippingTrackingUrl'] = $shippingTrackingUrl;

        return $this;
    }

    /**
     * Gets shippingTypeCode
     *
     * @return string|null
     */
    public function getShippingTypeCode()
    {
        return $this->container['shippingTypeCode'];
    }

    /**
     * Sets shippingTypeCode
     *
     * @param string|null $shippingTypeCode Code of shipping's type
     *
     * @return self
     */
    public function setShippingTypeCode($shippingTypeCode)
    {
        if (is_null($shippingTypeCode)) {
            throw new \InvalidArgumentException('non-nullable shippingTypeCode cannot be null');
        }
        $this->container['shippingTypeCode'] = $shippingTypeCode;

        return $this;
    }

    /**
     * Gets shippingTypeLabel
     *
     * @return string|null
     */
    public function getShippingTypeLabel()
    {
        return $this->container['shippingTypeLabel'];
    }

    /**
     * Sets shippingTypeLabel
     *
     * @param string|null $shippingTypeLabel Label of shipping's type
     *
     * @return self
     */
    public function setShippingTypeLabel($shippingTypeLabel)
    {
        if (is_null($shippingTypeLabel)) {
            throw new \InvalidArgumentException('non-nullable shippingTypeLabel cannot be null');
        }
        $this->container['shippingTypeLabel'] = $shippingTypeLabel;

        return $this;
    }

    /**
     * Gets shippingTypeStandardCode
     *
     * @return string|null
     */
    public function getShippingTypeStandardCode()
    {
        return $this->container['shippingTypeStandardCode'];
    }

    /**
     * Sets shippingTypeStandardCode
     *
     * @param string|null $shippingTypeStandardCode Shipping type's standard code
     *
     * @return self
     */
    public function setShippingTypeStandardCode($shippingTypeStandardCode)
    {
        if (is_null($shippingTypeStandardCode)) {
            throw new \InvalidArgumentException('non-nullable shippingTypeStandardCode cannot be null');
        }
        $this->container['shippingTypeStandardCode'] = $shippingTypeStandardCode;

        return $this;
    }

    /**
     * Gets shippingZoneCode
     *
     * @return string|null
     */
    public function getShippingZoneCode()
    {
        return $this->container['shippingZoneCode'];
    }

    /**
     * Sets shippingZoneCode
     *
     * @param string|null $shippingZoneCode Code of shipping's zone
     *
     * @return self
     */
    public function setShippingZoneCode($shippingZoneCode)
    {
        if (is_null($shippingZoneCode)) {
            throw new \InvalidArgumentException('non-nullable shippingZoneCode cannot be null');
        }
        $this->container['shippingZoneCode'] = $shippingZoneCode;

        return $this;
    }

    /**
     * Gets shippingZoneLabel
     *
     * @return string|null
     */
    public function getShippingZoneLabel()
    {
        return $this->container['shippingZoneLabel'];
    }

    /**
     * Sets shippingZoneLabel
     *
     * @param string|null $shippingZoneLabel Label of shipping's zone
     *
     * @return self
     */
    public function setShippingZoneLabel($shippingZoneLabel)
    {
        if (is_null($shippingZoneLabel)) {
            throw new \InvalidArgumentException('non-nullable shippingZoneLabel cannot be null');
        }
        $this->container['shippingZoneLabel'] = $shippingZoneLabel;

        return $this;
    }

    /**
     * Gets totalCommission
     *
     * @return float|null
     */
    public function getTotalCommission()
    {
        return $this->container['totalCommission'];
    }

    /**
     * Sets totalCommission
     *
     * @param float|null $totalCommission Order's total commission (sum of the order line's total commission)
     *
     * @return self
     */
    public function setTotalCommission($totalCommission)
    {
        if (is_null($totalCommission)) {
            throw new \InvalidArgumentException('non-nullable totalCommission cannot be null');
        }
        $this->container['totalCommission'] = $totalCommission;

        return $this;
    }

    /**
     * Gets totalPrice
     *
     * @return float|null
     */
    public function getTotalPrice()
    {
        return $this->container['totalPrice'];
    }

    /**
     * Sets totalPrice
     *
     * @param float|null $totalPrice Total order's price (sum of the order's price with shipping price and fees).
     *
     * @return self
     */
    public function setTotalPrice($totalPrice)
    {
        if (is_null($totalPrice)) {
            throw new \InvalidArgumentException('non-nullable totalPrice cannot be null');
        }
        $this->container['totalPrice'] = $totalPrice;

        return $this;
    }

    /**
     * Gets transactionDate
     *
     * @return \DateTime|null
     */
    public function getTransactionDate()
    {
        return $this->container['transactionDate'];
    }

    /**
     * Sets transactionDate
     *
     * @param \DateTime|null $transactionDate Payment's transaction date
     *
     * @return self
     */
    public function setTransactionDate($transactionDate)
    {
        if (is_null($transactionDate)) {
            throw new \InvalidArgumentException('non-nullable transactionDate cannot be null');
        }
        $this->container['transactionDate'] = $transactionDate;

        return $this;
    }

    /**
     * Gets transactionNumber
     *
     * @return string|null
     */
    public function getTransactionNumber()
    {
        return $this->container['transactionNumber'];
    }

    /**
     * Sets transactionNumber
     *
     * @param string|null $transactionNumber Payment's transaction number
     *
     * @return self
     */
    public function setTransactionNumber($transactionNumber)
    {
        if (is_null($transactionNumber)) {
            throw new \InvalidArgumentException('non-nullable transactionNumber cannot be null');
        }
        $this->container['transactionNumber'] = $transactionNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


