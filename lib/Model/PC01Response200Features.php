<?php
/**
 * PC01Response200Features
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * PC01Response200Features Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PC01Response200Features implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PC01_Response_200_Features';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'circularEconomyDataCollection' => 'bool',
        'competitivePricingTool' => 'bool',
        'directPaymentCustomerStore' => '\OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesDirectPaymentCustomerStore',
        'disableSellerAlternativeCarrier' => 'bool',
        'kycStatusPerSeller' => 'bool',
        'leadTimeToShipBySellersEnabled' => 'string',
        'multiCurrency' => 'bool',
        'noReplyNeeded' => 'bool',
        'offerPricesDecimals' => 'string',
        'operatorCsvDelimiter' => 'string',
        'orderConditions' => '\OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesOrderConditions',
        'orderTaxMode' => 'string',
        'orderWorkflows' => '\OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesOrderWorkflows',
        'paymentConfirmation' => 'bool',
        'pricing' => '\OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesPricing',
        'productDataValidationByChannel' => 'bool',
        'shipment' => '\OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesShipment',
        'shopTaxOptions' => '\OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesShopTaxOptions',
        'taxCollection' => '\OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesTaxCollection',
        'taxIdNumber' => '\OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesTaxIdNumber'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'circularEconomyDataCollection' => null,
        'competitivePricingTool' => null,
        'directPaymentCustomerStore' => null,
        'disableSellerAlternativeCarrier' => null,
        'kycStatusPerSeller' => null,
        'leadTimeToShipBySellersEnabled' => null,
        'multiCurrency' => null,
        'noReplyNeeded' => null,
        'offerPricesDecimals' => null,
        'operatorCsvDelimiter' => null,
        'orderConditions' => null,
        'orderTaxMode' => null,
        'orderWorkflows' => null,
        'paymentConfirmation' => null,
        'pricing' => null,
        'productDataValidationByChannel' => null,
        'shipment' => null,
        'shopTaxOptions' => null,
        'taxCollection' => null,
        'taxIdNumber' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'circularEconomyDataCollection' => false,
        'competitivePricingTool' => false,
        'directPaymentCustomerStore' => false,
        'disableSellerAlternativeCarrier' => false,
        'kycStatusPerSeller' => false,
        'leadTimeToShipBySellersEnabled' => false,
        'multiCurrency' => false,
        'noReplyNeeded' => false,
        'offerPricesDecimals' => false,
        'operatorCsvDelimiter' => false,
        'orderConditions' => false,
        'orderTaxMode' => false,
        'orderWorkflows' => false,
        'paymentConfirmation' => false,
        'pricing' => false,
        'productDataValidationByChannel' => false,
        'shipment' => false,
        'shopTaxOptions' => false,
        'taxCollection' => false,
        'taxIdNumber' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'circularEconomyDataCollection' => 'circular_economy_data_collection',
        'competitivePricingTool' => 'competitive_pricing_tool',
        'directPaymentCustomerStore' => 'direct_payment_customer_store',
        'disableSellerAlternativeCarrier' => 'disable_seller_alternative_carrier',
        'kycStatusPerSeller' => 'kyc_status_per_seller',
        'leadTimeToShipBySellersEnabled' => 'lead_time_to_ship_by_sellers_enabled',
        'multiCurrency' => 'multi_currency',
        'noReplyNeeded' => 'no_reply_needed',
        'offerPricesDecimals' => 'offer_prices_decimals',
        'operatorCsvDelimiter' => 'operator_csv_delimiter',
        'orderConditions' => 'order_conditions',
        'orderTaxMode' => 'order_tax_mode',
        'orderWorkflows' => 'order_workflows',
        'paymentConfirmation' => 'payment_confirmation',
        'pricing' => 'pricing',
        'productDataValidationByChannel' => 'product_data_validation_by_channel',
        'shipment' => 'shipment',
        'shopTaxOptions' => 'shop_tax_options',
        'taxCollection' => 'tax_collection',
        'taxIdNumber' => 'tax_id_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'circularEconomyDataCollection' => 'setCircularEconomyDataCollection',
        'competitivePricingTool' => 'setCompetitivePricingTool',
        'directPaymentCustomerStore' => 'setDirectPaymentCustomerStore',
        'disableSellerAlternativeCarrier' => 'setDisableSellerAlternativeCarrier',
        'kycStatusPerSeller' => 'setKycStatusPerSeller',
        'leadTimeToShipBySellersEnabled' => 'setLeadTimeToShipBySellersEnabled',
        'multiCurrency' => 'setMultiCurrency',
        'noReplyNeeded' => 'setNoReplyNeeded',
        'offerPricesDecimals' => 'setOfferPricesDecimals',
        'operatorCsvDelimiter' => 'setOperatorCsvDelimiter',
        'orderConditions' => 'setOrderConditions',
        'orderTaxMode' => 'setOrderTaxMode',
        'orderWorkflows' => 'setOrderWorkflows',
        'paymentConfirmation' => 'setPaymentConfirmation',
        'pricing' => 'setPricing',
        'productDataValidationByChannel' => 'setProductDataValidationByChannel',
        'shipment' => 'setShipment',
        'shopTaxOptions' => 'setShopTaxOptions',
        'taxCollection' => 'setTaxCollection',
        'taxIdNumber' => 'setTaxIdNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'circularEconomyDataCollection' => 'getCircularEconomyDataCollection',
        'competitivePricingTool' => 'getCompetitivePricingTool',
        'directPaymentCustomerStore' => 'getDirectPaymentCustomerStore',
        'disableSellerAlternativeCarrier' => 'getDisableSellerAlternativeCarrier',
        'kycStatusPerSeller' => 'getKycStatusPerSeller',
        'leadTimeToShipBySellersEnabled' => 'getLeadTimeToShipBySellersEnabled',
        'multiCurrency' => 'getMultiCurrency',
        'noReplyNeeded' => 'getNoReplyNeeded',
        'offerPricesDecimals' => 'getOfferPricesDecimals',
        'operatorCsvDelimiter' => 'getOperatorCsvDelimiter',
        'orderConditions' => 'getOrderConditions',
        'orderTaxMode' => 'getOrderTaxMode',
        'orderWorkflows' => 'getOrderWorkflows',
        'paymentConfirmation' => 'getPaymentConfirmation',
        'pricing' => 'getPricing',
        'productDataValidationByChannel' => 'getProductDataValidationByChannel',
        'shipment' => 'getShipment',
        'shopTaxOptions' => 'getShopTaxOptions',
        'taxCollection' => 'getTaxCollection',
        'taxIdNumber' => 'getTaxIdNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('circularEconomyDataCollection', $data ?? [], null);
        $this->setIfExists('competitivePricingTool', $data ?? [], null);
        $this->setIfExists('directPaymentCustomerStore', $data ?? [], null);
        $this->setIfExists('disableSellerAlternativeCarrier', $data ?? [], null);
        $this->setIfExists('kycStatusPerSeller', $data ?? [], null);
        $this->setIfExists('leadTimeToShipBySellersEnabled', $data ?? [], null);
        $this->setIfExists('multiCurrency', $data ?? [], null);
        $this->setIfExists('noReplyNeeded', $data ?? [], null);
        $this->setIfExists('offerPricesDecimals', $data ?? [], null);
        $this->setIfExists('operatorCsvDelimiter', $data ?? [], null);
        $this->setIfExists('orderConditions', $data ?? [], null);
        $this->setIfExists('orderTaxMode', $data ?? [], null);
        $this->setIfExists('orderWorkflows', $data ?? [], null);
        $this->setIfExists('paymentConfirmation', $data ?? [], null);
        $this->setIfExists('pricing', $data ?? [], null);
        $this->setIfExists('productDataValidationByChannel', $data ?? [], null);
        $this->setIfExists('shipment', $data ?? [], null);
        $this->setIfExists('shopTaxOptions', $data ?? [], null);
        $this->setIfExists('taxCollection', $data ?? [], null);
        $this->setIfExists('taxIdNumber', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets circularEconomyDataCollection
     *
     * @return bool|null
     */
    public function getCircularEconomyDataCollection()
    {
        return $this->container['circularEconomyDataCollection'];
    }

    /**
     * Sets circularEconomyDataCollection
     *
     * @param bool|null $circularEconomyDataCollection Allows operators to collect data related to the circular economy regulation
     *
     * @return self
     */
    public function setCircularEconomyDataCollection($circularEconomyDataCollection)
    {
        if (is_null($circularEconomyDataCollection)) {
            throw new \InvalidArgumentException('non-nullable circularEconomyDataCollection cannot be null');
        }
        $this->container['circularEconomyDataCollection'] = $circularEconomyDataCollection;

        return $this;
    }

    /**
     * Gets competitivePricingTool
     *
     * @return bool|null
     */
    public function getCompetitivePricingTool()
    {
        return $this->container['competitivePricingTool'];
    }

    /**
     * Sets competitivePricingTool
     *
     * @param bool|null $competitivePricingTool The competitive pricing tool allows stores to view and possibly match competing Marketplace offers
     *
     * @return self
     */
    public function setCompetitivePricingTool($competitivePricingTool)
    {
        if (is_null($competitivePricingTool)) {
            throw new \InvalidArgumentException('non-nullable competitivePricingTool cannot be null');
        }
        $this->container['competitivePricingTool'] = $competitivePricingTool;

        return $this;
    }

    /**
     * Gets directPaymentCustomerStore
     *
     * @return \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesDirectPaymentCustomerStore|null
     */
    public function getDirectPaymentCustomerStore()
    {
        return $this->container['directPaymentCustomerStore'];
    }

    /**
     * Sets directPaymentCustomerStore
     *
     * @param \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesDirectPaymentCustomerStore|null $directPaymentCustomerStore directPaymentCustomerStore
     *
     * @return self
     */
    public function setDirectPaymentCustomerStore($directPaymentCustomerStore)
    {
        if (is_null($directPaymentCustomerStore)) {
            throw new \InvalidArgumentException('non-nullable directPaymentCustomerStore cannot be null');
        }
        $this->container['directPaymentCustomerStore'] = $directPaymentCustomerStore;

        return $this;
    }

    /**
     * Gets disableSellerAlternativeCarrier
     *
     * @return bool|null
     */
    public function getDisableSellerAlternativeCarrier()
    {
        return $this->container['disableSellerAlternativeCarrier'];
    }

    /**
     * Sets disableSellerAlternativeCarrier
     *
     * @param bool|null $disableSellerAlternativeCarrier Prevent stores from specifying alternatives carriers outside those predefined by the operator
     *
     * @return self
     */
    public function setDisableSellerAlternativeCarrier($disableSellerAlternativeCarrier)
    {
        if (is_null($disableSellerAlternativeCarrier)) {
            throw new \InvalidArgumentException('non-nullable disableSellerAlternativeCarrier cannot be null');
        }
        $this->container['disableSellerAlternativeCarrier'] = $disableSellerAlternativeCarrier;

        return $this;
    }

    /**
     * Gets kycStatusPerSeller
     *
     * @return bool|null
     */
    public function getKycStatusPerSeller()
    {
        return $this->container['kycStatusPerSeller'];
    }

    /**
     * Sets kycStatusPerSeller
     *
     * @param bool|null $kycStatusPerSeller Allows PSPs to provide operators with seller KYC statuses
     *
     * @return self
     */
    public function setKycStatusPerSeller($kycStatusPerSeller)
    {
        if (is_null($kycStatusPerSeller)) {
            throw new \InvalidArgumentException('non-nullable kycStatusPerSeller cannot be null');
        }
        $this->container['kycStatusPerSeller'] = $kycStatusPerSeller;

        return $this;
    }

    /**
     * Gets leadTimeToShipBySellersEnabled
     *
     * @return string|null
     */
    public function getLeadTimeToShipBySellersEnabled()
    {
        return $this->container['leadTimeToShipBySellersEnabled'];
    }

    /**
     * Sets leadTimeToShipBySellersEnabled
     *
     * @param string|null $leadTimeToShipBySellersEnabled Allows sellers to override the default lead time to ship
     *
     * @return self
     */
    public function setLeadTimeToShipBySellersEnabled($leadTimeToShipBySellersEnabled)
    {
        if (is_null($leadTimeToShipBySellersEnabled)) {
            throw new \InvalidArgumentException('non-nullable leadTimeToShipBySellersEnabled cannot be null');
        }
        $this->container['leadTimeToShipBySellersEnabled'] = $leadTimeToShipBySellersEnabled;

        return $this;
    }

    /**
     * Gets multiCurrency
     *
     * @return bool|null
     */
    public function getMultiCurrency()
    {
        return $this->container['multiCurrency'];
    }

    /**
     * Sets multiCurrency
     *
     * @param bool|null $multiCurrency Defines if platform support multi currencies
     *
     * @return self
     */
    public function setMultiCurrency($multiCurrency)
    {
        if (is_null($multiCurrency)) {
            throw new \InvalidArgumentException('non-nullable multiCurrency cannot be null');
        }
        $this->container['multiCurrency'] = $multiCurrency;

        return $this;
    }

    /**
     * Gets noReplyNeeded
     *
     * @return bool|null
     */
    public function getNoReplyNeeded()
    {
        return $this->container['noReplyNeeded'];
    }

    /**
     * Sets noReplyNeeded
     *
     * @param bool|null $noReplyNeeded Allows to end order-related conversations when the last message sent from customer does not specifically require a reply
     *
     * @return self
     */
    public function setNoReplyNeeded($noReplyNeeded)
    {
        if (is_null($noReplyNeeded)) {
            throw new \InvalidArgumentException('non-nullable noReplyNeeded cannot be null');
        }
        $this->container['noReplyNeeded'] = $noReplyNeeded;

        return $this;
    }

    /**
     * Gets offerPricesDecimals
     *
     * @return string|null
     */
    public function getOfferPricesDecimals()
    {
        return $this->container['offerPricesDecimals'];
    }

    /**
     * Sets offerPricesDecimals
     *
     * @param string|null $offerPricesDecimals Defines maximum number of decimals in offer prices
     *
     * @return self
     */
    public function setOfferPricesDecimals($offerPricesDecimals)
    {
        if (is_null($offerPricesDecimals)) {
            throw new \InvalidArgumentException('non-nullable offerPricesDecimals cannot be null');
        }
        $this->container['offerPricesDecimals'] = $offerPricesDecimals;

        return $this;
    }

    /**
     * Gets operatorCsvDelimiter
     *
     * @return string|null
     */
    public function getOperatorCsvDelimiter()
    {
        return $this->container['operatorCsvDelimiter'];
    }

    /**
     * Sets operatorCsvDelimiter
     *
     * @param string|null $operatorCsvDelimiter The delimiter used in the CSV files exported from the back office. COMMA: ',' delimiter. SEMICOLON: ';' delimiter.
     *
     * @return self
     */
    public function setOperatorCsvDelimiter($operatorCsvDelimiter)
    {
        if (is_null($operatorCsvDelimiter)) {
            throw new \InvalidArgumentException('non-nullable operatorCsvDelimiter cannot be null');
        }
        $this->container['operatorCsvDelimiter'] = $operatorCsvDelimiter;

        return $this;
    }

    /**
     * Gets orderConditions
     *
     * @return \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesOrderConditions|null
     */
    public function getOrderConditions()
    {
        return $this->container['orderConditions'];
    }

    /**
     * Sets orderConditions
     *
     * @param \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesOrderConditions|null $orderConditions orderConditions
     *
     * @return self
     */
    public function setOrderConditions($orderConditions)
    {
        if (is_null($orderConditions)) {
            throw new \InvalidArgumentException('non-nullable orderConditions cannot be null');
        }
        $this->container['orderConditions'] = $orderConditions;

        return $this;
    }

    /**
     * Gets orderTaxMode
     *
     * @return string|null
     */
    public function getOrderTaxMode()
    {
        return $this->container['orderTaxMode'];
    }

    /**
     * Sets orderTaxMode
     *
     * @param string|null $orderTaxMode Prices with tax included or excluded in order-related APIs. TAX_INCLUDED: Prices with tax included. TAX_EXCLUDED: Prices with tax excluded.
     *
     * @return self
     */
    public function setOrderTaxMode($orderTaxMode)
    {
        if (is_null($orderTaxMode)) {
            throw new \InvalidArgumentException('non-nullable orderTaxMode cannot be null');
        }
        $this->container['orderTaxMode'] = $orderTaxMode;

        return $this;
    }

    /**
     * Gets orderWorkflows
     *
     * @return \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesOrderWorkflows|null
     */
    public function getOrderWorkflows()
    {
        return $this->container['orderWorkflows'];
    }

    /**
     * Sets orderWorkflows
     *
     * @param \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesOrderWorkflows|null $orderWorkflows orderWorkflows
     *
     * @return self
     */
    public function setOrderWorkflows($orderWorkflows)
    {
        if (is_null($orderWorkflows)) {
            throw new \InvalidArgumentException('non-nullable orderWorkflows cannot be null');
        }
        $this->container['orderWorkflows'] = $orderWorkflows;

        return $this;
    }

    /**
     * Gets paymentConfirmation
     *
     * @return bool|null
     */
    public function getPaymentConfirmation()
    {
        return $this->container['paymentConfirmation'];
    }

    /**
     * Sets paymentConfirmation
     *
     * @param bool|null $paymentConfirmation Allows the operator to mark an accounting document as \"Paid\" when the corresponding amount is confirmed to be paid to the seller
     *
     * @return self
     */
    public function setPaymentConfirmation($paymentConfirmation)
    {
        if (is_null($paymentConfirmation)) {
            throw new \InvalidArgumentException('non-nullable paymentConfirmation cannot be null');
        }
        $this->container['paymentConfirmation'] = $paymentConfirmation;

        return $this;
    }

    /**
     * Gets pricing
     *
     * @return \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesPricing|null
     */
    public function getPricing()
    {
        return $this->container['pricing'];
    }

    /**
     * Sets pricing
     *
     * @param \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesPricing|null $pricing pricing
     *
     * @return self
     */
    public function setPricing($pricing)
    {
        if (is_null($pricing)) {
            throw new \InvalidArgumentException('non-nullable pricing cannot be null');
        }
        $this->container['pricing'] = $pricing;

        return $this;
    }

    /**
     * Gets productDataValidationByChannel
     *
     * @return bool|null
     */
    public function getProductDataValidationByChannel()
    {
        return $this->container['productDataValidationByChannel'];
    }

    /**
     * Sets productDataValidationByChannel
     *
     * @param bool|null $productDataValidationByChannel Facilitates the management of attributes in a multilingual context
     *
     * @return self
     */
    public function setProductDataValidationByChannel($productDataValidationByChannel)
    {
        if (is_null($productDataValidationByChannel)) {
            throw new \InvalidArgumentException('non-nullable productDataValidationByChannel cannot be null');
        }
        $this->container['productDataValidationByChannel'] = $productDataValidationByChannel;

        return $this;
    }

    /**
     * Gets shipment
     *
     * @return \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesShipment|null
     */
    public function getShipment()
    {
        return $this->container['shipment'];
    }

    /**
     * Sets shipment
     *
     * @param \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesShipment|null $shipment shipment
     *
     * @return self
     */
    public function setShipment($shipment)
    {
        if (is_null($shipment)) {
            throw new \InvalidArgumentException('non-nullable shipment cannot be null');
        }
        $this->container['shipment'] = $shipment;

        return $this;
    }

    /**
     * Gets shopTaxOptions
     *
     * @return \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesShopTaxOptions|null
     */
    public function getShopTaxOptions()
    {
        return $this->container['shopTaxOptions'];
    }

    /**
     * Sets shopTaxOptions
     *
     * @param \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesShopTaxOptions|null $shopTaxOptions shopTaxOptions
     *
     * @return self
     */
    public function setShopTaxOptions($shopTaxOptions)
    {
        if (is_null($shopTaxOptions)) {
            throw new \InvalidArgumentException('non-nullable shopTaxOptions cannot be null');
        }
        $this->container['shopTaxOptions'] = $shopTaxOptions;

        return $this;
    }

    /**
     * Gets taxCollection
     *
     * @return \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesTaxCollection|null
     */
    public function getTaxCollection()
    {
        return $this->container['taxCollection'];
    }

    /**
     * Sets taxCollection
     *
     * @param \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesTaxCollection|null $taxCollection taxCollection
     *
     * @return self
     */
    public function setTaxCollection($taxCollection)
    {
        if (is_null($taxCollection)) {
            throw new \InvalidArgumentException('non-nullable taxCollection cannot be null');
        }
        $this->container['taxCollection'] = $taxCollection;

        return $this;
    }

    /**
     * Gets taxIdNumber
     *
     * @return \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesTaxIdNumber|null
     */
    public function getTaxIdNumber()
    {
        return $this->container['taxIdNumber'];
    }

    /**
     * Sets taxIdNumber
     *
     * @param \OpenAPI\Client\Mirakl\Model\PC01Response200FeaturesTaxIdNumber|null $taxIdNumber taxIdNumber
     *
     * @return self
     */
    public function setTaxIdNumber($taxIdNumber)
    {
        if (is_null($taxIdNumber)) {
            throw new \InvalidArgumentException('non-nullable taxIdNumber cannot be null');
        }
        $this->container['taxIdNumber'] = $taxIdNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


