<?php
/**
 * Order
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * The version of the OpenAPI document: 2.18.3
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'idOrder' => 'string',
        'tsCreatedIso' => '\DateTime',
        'isMarketplaceDeemedSupplier' => 'bool',
        'orderUnitsCount' => 'int',
        'tsUnitsUpdatedIso' => '\DateTime',
        'storefront' => '\OpenAPI\Client\Mirakl\Model\Storefront',
        'fulfillmentType' => '\OpenAPI\Client\Mirakl\Model\FulfillmentType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'idOrder' => null,
        'tsCreatedIso' => 'date-time',
        'isMarketplaceDeemedSupplier' => null,
        'orderUnitsCount' => 'int32',
        'tsUnitsUpdatedIso' => 'date-time',
        'storefront' => null,
        'fulfillmentType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'idOrder' => false,
        'tsCreatedIso' => false,
        'isMarketplaceDeemedSupplier' => false,
        'orderUnitsCount' => false,
        'tsUnitsUpdatedIso' => false,
        'storefront' => false,
        'fulfillmentType' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'idOrder' => 'id_order',
        'tsCreatedIso' => 'ts_created_iso',
        'isMarketplaceDeemedSupplier' => 'is_marketplace_deemed_supplier',
        'orderUnitsCount' => 'order_units_count',
        'tsUnitsUpdatedIso' => 'ts_units_updated_iso',
        'storefront' => 'storefront',
        'fulfillmentType' => 'fulfillment_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'idOrder' => 'setIdOrder',
        'tsCreatedIso' => 'setTsCreatedIso',
        'isMarketplaceDeemedSupplier' => 'setIsMarketplaceDeemedSupplier',
        'orderUnitsCount' => 'setOrderUnitsCount',
        'tsUnitsUpdatedIso' => 'setTsUnitsUpdatedIso',
        'storefront' => 'setStorefront',
        'fulfillmentType' => 'setFulfillmentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'idOrder' => 'getIdOrder',
        'tsCreatedIso' => 'getTsCreatedIso',
        'isMarketplaceDeemedSupplier' => 'getIsMarketplaceDeemedSupplier',
        'orderUnitsCount' => 'getOrderUnitsCount',
        'tsUnitsUpdatedIso' => 'getTsUnitsUpdatedIso',
        'storefront' => 'getStorefront',
        'fulfillmentType' => 'getFulfillmentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('idOrder', $data ?? [], null);
        $this->setIfExists('tsCreatedIso', $data ?? [], null);
        $this->setIfExists('isMarketplaceDeemedSupplier', $data ?? [], null);
        $this->setIfExists('orderUnitsCount', $data ?? [], null);
        $this->setIfExists('tsUnitsUpdatedIso', $data ?? [], null);
        $this->setIfExists('storefront', $data ?? [], null);
        $this->setIfExists('fulfillmentType', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['idOrder'] === null) {
            $invalidProperties[] = "'idOrder' can't be null";
        }
        if ($this->container['tsCreatedIso'] === null) {
            $invalidProperties[] = "'tsCreatedIso' can't be null";
        }
        if ($this->container['isMarketplaceDeemedSupplier'] === null) {
            $invalidProperties[] = "'isMarketplaceDeemedSupplier' can't be null";
        }
        if ($this->container['orderUnitsCount'] === null) {
            $invalidProperties[] = "'orderUnitsCount' can't be null";
        }
        if ($this->container['tsUnitsUpdatedIso'] === null) {
            $invalidProperties[] = "'tsUnitsUpdatedIso' can't be null";
        }
        if ($this->container['storefront'] === null) {
            $invalidProperties[] = "'storefront' can't be null";
        }
        if ($this->container['fulfillmentType'] === null) {
            $invalidProperties[] = "'fulfillmentType' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets idOrder
     *
     * @return string
     */
    public function getIdOrder()
    {
        return $this->container['idOrder'];
    }

    /**
     * Sets idOrder
     *
     * @param string $idOrder idOrder
     *
     * @return self
     */
    public function setIdOrder($idOrder)
    {
        if (is_null($idOrder)) {
            throw new \InvalidArgumentException('non-nullable idOrder cannot be null');
        }
        $this->container['idOrder'] = $idOrder;

        return $this;
    }

    /**
     * Gets tsCreatedIso
     *
     * @return \DateTime
     */
    public function getTsCreatedIso()
    {
        return $this->container['tsCreatedIso'];
    }

    /**
     * Sets tsCreatedIso
     *
     * @param \DateTime $tsCreatedIso tsCreatedIso
     *
     * @return self
     */
    public function setTsCreatedIso($tsCreatedIso)
    {
        if (is_null($tsCreatedIso)) {
            throw new \InvalidArgumentException('non-nullable tsCreatedIso cannot be null');
        }
        $this->container['tsCreatedIso'] = $tsCreatedIso;

        return $this;
    }

    /**
     * Gets isMarketplaceDeemedSupplier
     *
     * @return bool
     */
    public function getIsMarketplaceDeemedSupplier()
    {
        return $this->container['isMarketplaceDeemedSupplier'];
    }

    /**
     * Sets isMarketplaceDeemedSupplier
     *
     * @param bool $isMarketplaceDeemedSupplier isMarketplaceDeemedSupplier
     *
     * @return self
     */
    public function setIsMarketplaceDeemedSupplier($isMarketplaceDeemedSupplier)
    {
        if (is_null($isMarketplaceDeemedSupplier)) {
            throw new \InvalidArgumentException('non-nullable isMarketplaceDeemedSupplier cannot be null');
        }
        $this->container['isMarketplaceDeemedSupplier'] = $isMarketplaceDeemedSupplier;

        return $this;
    }

    /**
     * Gets orderUnitsCount
     *
     * @return int
     */
    public function getOrderUnitsCount()
    {
        return $this->container['orderUnitsCount'];
    }

    /**
     * Sets orderUnitsCount
     *
     * @param int $orderUnitsCount orderUnitsCount
     *
     * @return self
     */
    public function setOrderUnitsCount($orderUnitsCount)
    {
        if (is_null($orderUnitsCount)) {
            throw new \InvalidArgumentException('non-nullable orderUnitsCount cannot be null');
        }
        $this->container['orderUnitsCount'] = $orderUnitsCount;

        return $this;
    }

    /**
     * Gets tsUnitsUpdatedIso
     *
     * @return \DateTime
     */
    public function getTsUnitsUpdatedIso()
    {
        return $this->container['tsUnitsUpdatedIso'];
    }

    /**
     * Sets tsUnitsUpdatedIso
     *
     * @param \DateTime $tsUnitsUpdatedIso tsUnitsUpdatedIso
     *
     * @return self
     */
    public function setTsUnitsUpdatedIso($tsUnitsUpdatedIso)
    {
        if (is_null($tsUnitsUpdatedIso)) {
            throw new \InvalidArgumentException('non-nullable tsUnitsUpdatedIso cannot be null');
        }
        $this->container['tsUnitsUpdatedIso'] = $tsUnitsUpdatedIso;

        return $this;
    }

    /**
     * Gets storefront
     *
     * @return \OpenAPI\Client\Mirakl\Model\Storefront
     */
    public function getStorefront()
    {
        return $this->container['storefront'];
    }

    /**
     * Sets storefront
     *
     * @param \OpenAPI\Client\Mirakl\Model\Storefront $storefront storefront
     *
     * @return self
     */
    public function setStorefront($storefront)
    {
        if (is_null($storefront)) {
            throw new \InvalidArgumentException('non-nullable storefront cannot be null');
        }
        $this->container['storefront'] = $storefront;

        return $this;
    }

    /**
     * Gets fulfillmentType
     *
     * @return \OpenAPI\Client\Mirakl\Model\FulfillmentType
     */
    public function getFulfillmentType()
    {
        return $this->container['fulfillmentType'];
    }

    /**
     * Sets fulfillmentType
     *
     * @param \OpenAPI\Client\Mirakl\Model\FulfillmentType $fulfillmentType fulfillmentType
     *
     * @return self
     */
    public function setFulfillmentType($fulfillmentType)
    {
        if (is_null($fulfillmentType)) {
            throw new \InvalidArgumentException('non-nullable fulfillmentType cannot be null');
        }
        $this->container['fulfillmentType'] = $fulfillmentType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


