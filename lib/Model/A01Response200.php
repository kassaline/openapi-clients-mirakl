<?php
/**
 * A01Response200
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * A01Response200 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class A01Response200 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'A01_Response_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'applicableTaxes' => '\OpenAPI\Client\Mirakl\Model\A01Response200ApplicableTaxes[]',
        'approvalDelay' => 'int',
        'approvalRate' => 'float',
        'banner' => 'string',
        'billingInfo' => '\OpenAPI\Client\Mirakl\Model\A01Response200BillingInfo',
        'channels' => 'string[]',
        'closedFrom' => '\DateTime',
        'closedTo' => '\DateTime',
        'contactInformations' => '\OpenAPI\Client\Mirakl\Model\A01Response200ContactInformations',
        'currencyIsoCode' => 'string',
        'dateCreated' => '\DateTime',
        'defaultBillingInformation' => '\OpenAPI\Client\Mirakl\Model\A01Response200DefaultBillingInformation',
        'description' => 'string',
        'domains' => 'string[]',
        'evaluationsCount' => 'int',
        'freeShipping' => 'bool',
        'grade' => 'float',
        'isProfessional' => 'bool',
        'kyc' => '\OpenAPI\Client\Mirakl\Model\A01Response200Kyc',
        'lastUpdatedDate' => '\DateTime',
        'logo' => 'string',
        'model' => 'string',
        'offersCount' => 'int',
        'orderMessagesResponseDelay' => 'int',
        'ordersCount' => 'int',
        'paymentDetails' => '\OpenAPI\Client\Mirakl\Model\A01Response200PaymentDetails',
        'paymentInfo' => '\OpenAPI\Client\Mirakl\Model\A01Response200PaymentInfo',
        'paymentMethodMandatory' => 'bool',
        'premium' => 'bool',
        'proDetails' => '\OpenAPI\Client\Mirakl\Model\A01Response200ProDetails',
        'producerIdentifiers' => '\OpenAPI\Client\Mirakl\Model\A01Response200ProducerIdentifiers[]',
        'recyclingPolicy' => 'string',
        'returnPolicy' => 'string',
        'shipping' => '\OpenAPI\Client\Mirakl\Model\A01Response200Shipping',
        'shippingCountry' => 'string',
        'shippingTypes' => 'string[]',
        'shippingZones' => 'string[]',
        'shippings' => '\OpenAPI\Client\Mirakl\Model\A01Response200Shippings[]',
        'shopAdditionalFields' => '\OpenAPI\Client\Mirakl\Model\A01Response200ShopAdditionalFields[]',
        'shopId' => 'int',
        'shopName' => 'string',
        'shopState' => 'string',
        'specificBillingInformations' => '\OpenAPI\Client\Mirakl\Model\A01Response200SpecificBillingInformations[]',
        'suspensionType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'applicableTaxes' => null,
        'approvalDelay' => 'int64',
        'approvalRate' => null,
        'banner' => null,
        'billingInfo' => null,
        'channels' => null,
        'closedFrom' => 'date-time',
        'closedTo' => 'date-time',
        'contactInformations' => null,
        'currencyIsoCode' => null,
        'dateCreated' => 'date-time',
        'defaultBillingInformation' => null,
        'description' => null,
        'domains' => null,
        'evaluationsCount' => 'int64',
        'freeShipping' => null,
        'grade' => null,
        'isProfessional' => null,
        'kyc' => null,
        'lastUpdatedDate' => 'date-time',
        'logo' => null,
        'model' => null,
        'offersCount' => 'int64',
        'orderMessagesResponseDelay' => 'int64',
        'ordersCount' => 'int64',
        'paymentDetails' => null,
        'paymentInfo' => null,
        'paymentMethodMandatory' => null,
        'premium' => null,
        'proDetails' => null,
        'producerIdentifiers' => null,
        'recyclingPolicy' => null,
        'returnPolicy' => null,
        'shipping' => null,
        'shippingCountry' => null,
        'shippingTypes' => null,
        'shippingZones' => null,
        'shippings' => null,
        'shopAdditionalFields' => null,
        'shopId' => 'int64',
        'shopName' => null,
        'shopState' => null,
        'specificBillingInformations' => null,
        'suspensionType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'applicableTaxes' => false,
        'approvalDelay' => false,
        'approvalRate' => false,
        'banner' => false,
        'billingInfo' => false,
        'channels' => false,
        'closedFrom' => false,
        'closedTo' => false,
        'contactInformations' => false,
        'currencyIsoCode' => false,
        'dateCreated' => false,
        'defaultBillingInformation' => false,
        'description' => false,
        'domains' => false,
        'evaluationsCount' => false,
        'freeShipping' => false,
        'grade' => false,
        'isProfessional' => false,
        'kyc' => false,
        'lastUpdatedDate' => false,
        'logo' => false,
        'model' => false,
        'offersCount' => false,
        'orderMessagesResponseDelay' => false,
        'ordersCount' => false,
        'paymentDetails' => false,
        'paymentInfo' => false,
        'paymentMethodMandatory' => false,
        'premium' => false,
        'proDetails' => false,
        'producerIdentifiers' => false,
        'recyclingPolicy' => false,
        'returnPolicy' => false,
        'shipping' => false,
        'shippingCountry' => false,
        'shippingTypes' => false,
        'shippingZones' => false,
        'shippings' => false,
        'shopAdditionalFields' => false,
        'shopId' => false,
        'shopName' => false,
        'shopState' => false,
        'specificBillingInformations' => false,
        'suspensionType' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applicableTaxes' => 'applicable_taxes',
        'approvalDelay' => 'approval_delay',
        'approvalRate' => 'approval_rate',
        'banner' => 'banner',
        'billingInfo' => 'billing_info',
        'channels' => 'channels',
        'closedFrom' => 'closed_from',
        'closedTo' => 'closed_to',
        'contactInformations' => 'contact_informations',
        'currencyIsoCode' => 'currency_iso_code',
        'dateCreated' => 'date_created',
        'defaultBillingInformation' => 'default_billing_information',
        'description' => 'description',
        'domains' => 'domains',
        'evaluationsCount' => 'evaluations_count',
        'freeShipping' => 'free_shipping',
        'grade' => 'grade',
        'isProfessional' => 'is_professional',
        'kyc' => 'kyc',
        'lastUpdatedDate' => 'last_updated_date',
        'logo' => 'logo',
        'model' => 'model',
        'offersCount' => 'offers_count',
        'orderMessagesResponseDelay' => 'order_messages_response_delay',
        'ordersCount' => 'orders_count',
        'paymentDetails' => 'payment_details',
        'paymentInfo' => 'payment_info',
        'paymentMethodMandatory' => 'payment_method_mandatory',
        'premium' => 'premium',
        'proDetails' => 'pro_details',
        'producerIdentifiers' => 'producer_identifiers',
        'recyclingPolicy' => 'recycling_policy',
        'returnPolicy' => 'return_policy',
        'shipping' => 'shipping',
        'shippingCountry' => 'shipping_country',
        'shippingTypes' => 'shipping_types',
        'shippingZones' => 'shipping_zones',
        'shippings' => 'shippings',
        'shopAdditionalFields' => 'shop_additional_fields',
        'shopId' => 'shop_id',
        'shopName' => 'shop_name',
        'shopState' => 'shop_state',
        'specificBillingInformations' => 'specific_billing_informations',
        'suspensionType' => 'suspension_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applicableTaxes' => 'setApplicableTaxes',
        'approvalDelay' => 'setApprovalDelay',
        'approvalRate' => 'setApprovalRate',
        'banner' => 'setBanner',
        'billingInfo' => 'setBillingInfo',
        'channels' => 'setChannels',
        'closedFrom' => 'setClosedFrom',
        'closedTo' => 'setClosedTo',
        'contactInformations' => 'setContactInformations',
        'currencyIsoCode' => 'setCurrencyIsoCode',
        'dateCreated' => 'setDateCreated',
        'defaultBillingInformation' => 'setDefaultBillingInformation',
        'description' => 'setDescription',
        'domains' => 'setDomains',
        'evaluationsCount' => 'setEvaluationsCount',
        'freeShipping' => 'setFreeShipping',
        'grade' => 'setGrade',
        'isProfessional' => 'setIsProfessional',
        'kyc' => 'setKyc',
        'lastUpdatedDate' => 'setLastUpdatedDate',
        'logo' => 'setLogo',
        'model' => 'setModel',
        'offersCount' => 'setOffersCount',
        'orderMessagesResponseDelay' => 'setOrderMessagesResponseDelay',
        'ordersCount' => 'setOrdersCount',
        'paymentDetails' => 'setPaymentDetails',
        'paymentInfo' => 'setPaymentInfo',
        'paymentMethodMandatory' => 'setPaymentMethodMandatory',
        'premium' => 'setPremium',
        'proDetails' => 'setProDetails',
        'producerIdentifiers' => 'setProducerIdentifiers',
        'recyclingPolicy' => 'setRecyclingPolicy',
        'returnPolicy' => 'setReturnPolicy',
        'shipping' => 'setShipping',
        'shippingCountry' => 'setShippingCountry',
        'shippingTypes' => 'setShippingTypes',
        'shippingZones' => 'setShippingZones',
        'shippings' => 'setShippings',
        'shopAdditionalFields' => 'setShopAdditionalFields',
        'shopId' => 'setShopId',
        'shopName' => 'setShopName',
        'shopState' => 'setShopState',
        'specificBillingInformations' => 'setSpecificBillingInformations',
        'suspensionType' => 'setSuspensionType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applicableTaxes' => 'getApplicableTaxes',
        'approvalDelay' => 'getApprovalDelay',
        'approvalRate' => 'getApprovalRate',
        'banner' => 'getBanner',
        'billingInfo' => 'getBillingInfo',
        'channels' => 'getChannels',
        'closedFrom' => 'getClosedFrom',
        'closedTo' => 'getClosedTo',
        'contactInformations' => 'getContactInformations',
        'currencyIsoCode' => 'getCurrencyIsoCode',
        'dateCreated' => 'getDateCreated',
        'defaultBillingInformation' => 'getDefaultBillingInformation',
        'description' => 'getDescription',
        'domains' => 'getDomains',
        'evaluationsCount' => 'getEvaluationsCount',
        'freeShipping' => 'getFreeShipping',
        'grade' => 'getGrade',
        'isProfessional' => 'getIsProfessional',
        'kyc' => 'getKyc',
        'lastUpdatedDate' => 'getLastUpdatedDate',
        'logo' => 'getLogo',
        'model' => 'getModel',
        'offersCount' => 'getOffersCount',
        'orderMessagesResponseDelay' => 'getOrderMessagesResponseDelay',
        'ordersCount' => 'getOrdersCount',
        'paymentDetails' => 'getPaymentDetails',
        'paymentInfo' => 'getPaymentInfo',
        'paymentMethodMandatory' => 'getPaymentMethodMandatory',
        'premium' => 'getPremium',
        'proDetails' => 'getProDetails',
        'producerIdentifiers' => 'getProducerIdentifiers',
        'recyclingPolicy' => 'getRecyclingPolicy',
        'returnPolicy' => 'getReturnPolicy',
        'shipping' => 'getShipping',
        'shippingCountry' => 'getShippingCountry',
        'shippingTypes' => 'getShippingTypes',
        'shippingZones' => 'getShippingZones',
        'shippings' => 'getShippings',
        'shopAdditionalFields' => 'getShopAdditionalFields',
        'shopId' => 'getShopId',
        'shopName' => 'getShopName',
        'shopState' => 'getShopState',
        'specificBillingInformations' => 'getSpecificBillingInformations',
        'suspensionType' => 'getSuspensionType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('applicableTaxes', $data ?? [], null);
        $this->setIfExists('approvalDelay', $data ?? [], null);
        $this->setIfExists('approvalRate', $data ?? [], null);
        $this->setIfExists('banner', $data ?? [], null);
        $this->setIfExists('billingInfo', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('closedFrom', $data ?? [], null);
        $this->setIfExists('closedTo', $data ?? [], null);
        $this->setIfExists('contactInformations', $data ?? [], null);
        $this->setIfExists('currencyIsoCode', $data ?? [], null);
        $this->setIfExists('dateCreated', $data ?? [], null);
        $this->setIfExists('defaultBillingInformation', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('domains', $data ?? [], null);
        $this->setIfExists('evaluationsCount', $data ?? [], null);
        $this->setIfExists('freeShipping', $data ?? [], null);
        $this->setIfExists('grade', $data ?? [], null);
        $this->setIfExists('isProfessional', $data ?? [], null);
        $this->setIfExists('kyc', $data ?? [], null);
        $this->setIfExists('lastUpdatedDate', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('offersCount', $data ?? [], null);
        $this->setIfExists('orderMessagesResponseDelay', $data ?? [], null);
        $this->setIfExists('ordersCount', $data ?? [], null);
        $this->setIfExists('paymentDetails', $data ?? [], null);
        $this->setIfExists('paymentInfo', $data ?? [], null);
        $this->setIfExists('paymentMethodMandatory', $data ?? [], null);
        $this->setIfExists('premium', $data ?? [], null);
        $this->setIfExists('proDetails', $data ?? [], null);
        $this->setIfExists('producerIdentifiers', $data ?? [], null);
        $this->setIfExists('recyclingPolicy', $data ?? [], null);
        $this->setIfExists('returnPolicy', $data ?? [], null);
        $this->setIfExists('shipping', $data ?? [], null);
        $this->setIfExists('shippingCountry', $data ?? [], null);
        $this->setIfExists('shippingTypes', $data ?? [], null);
        $this->setIfExists('shippingZones', $data ?? [], null);
        $this->setIfExists('shippings', $data ?? [], null);
        $this->setIfExists('shopAdditionalFields', $data ?? [], null);
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('shopName', $data ?? [], null);
        $this->setIfExists('shopState', $data ?? [], null);
        $this->setIfExists('specificBillingInformations', $data ?? [], null);
        $this->setIfExists('suspensionType', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['recyclingPolicy']) && (mb_strlen($this->container['recyclingPolicy']) > 5000)) {
            $invalidProperties[] = "invalid value for 'recyclingPolicy', the character length must be smaller than or equal to 5000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets applicableTaxes
     *
     * @return \OpenAPI\Client\Mirakl\Model\A01Response200ApplicableTaxes[]|null
     */
    public function getApplicableTaxes()
    {
        return $this->container['applicableTaxes'];
    }

    /**
     * Sets applicableTaxes
     *
     * @param \OpenAPI\Client\Mirakl\Model\A01Response200ApplicableTaxes[]|null $applicableTaxes List of the shop's applicable taxes
     *
     * @return self
     */
    public function setApplicableTaxes($applicableTaxes)
    {
        if (is_null($applicableTaxes)) {
            throw new \InvalidArgumentException('non-nullable applicableTaxes cannot be null');
        }
        $this->container['applicableTaxes'] = $applicableTaxes;

        return $this;
    }

    /**
     * Gets approvalDelay
     *
     * @return int|null
     */
    public function getApprovalDelay()
    {
        return $this->container['approvalDelay'];
    }

    /**
     * Sets approvalDelay
     *
     * @param int|null $approvalDelay Average time for a shop to accept or refuse an order (in seconds)
     *
     * @return self
     */
    public function setApprovalDelay($approvalDelay)
    {
        if (is_null($approvalDelay)) {
            throw new \InvalidArgumentException('non-nullable approvalDelay cannot be null');
        }
        $this->container['approvalDelay'] = $approvalDelay;

        return $this;
    }

    /**
     * Gets approvalRate
     *
     * @return float|null
     */
    public function getApprovalRate()
    {
        return $this->container['approvalRate'];
    }

    /**
     * Sets approvalRate
     *
     * @param float|null $approvalRate Rate of accepted orders
     *
     * @return self
     */
    public function setApprovalRate($approvalRate)
    {
        if (is_null($approvalRate)) {
            throw new \InvalidArgumentException('non-nullable approvalRate cannot be null');
        }
        $this->container['approvalRate'] = $approvalRate;

        return $this;
    }

    /**
     * Gets banner
     *
     * @return string|null
     */
    public function getBanner()
    {
        return $this->container['banner'];
    }

    /**
     * Sets banner
     *
     * @param string|null $banner Url of the shop's banner image
     *
     * @return self
     */
    public function setBanner($banner)
    {
        if (is_null($banner)) {
            throw new \InvalidArgumentException('non-nullable banner cannot be null');
        }
        $this->container['banner'] = $banner;

        return $this;
    }

    /**
     * Gets billingInfo
     *
     * @return \OpenAPI\Client\Mirakl\Model\A01Response200BillingInfo|null
     * @deprecated
     */
    public function getBillingInfo()
    {
        return $this->container['billingInfo'];
    }

    /**
     * Sets billingInfo
     *
     * @param \OpenAPI\Client\Mirakl\Model\A01Response200BillingInfo|null $billingInfo billingInfo
     *
     * @return self
     * @deprecated
     */
    public function setBillingInfo($billingInfo)
    {
        if (is_null($billingInfo)) {
            throw new \InvalidArgumentException('non-nullable billingInfo cannot be null');
        }
        $this->container['billingInfo'] = $billingInfo;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return string[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param string[]|null $channels List of the channel codes associated to the shop
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets closedFrom
     *
     * @return \DateTime|null
     */
    public function getClosedFrom()
    {
        return $this->container['closedFrom'];
    }

    /**
     * Sets closedFrom
     *
     * @param \DateTime|null $closedFrom The start date of the closing of the shop
     *
     * @return self
     */
    public function setClosedFrom($closedFrom)
    {
        if (is_null($closedFrom)) {
            throw new \InvalidArgumentException('non-nullable closedFrom cannot be null');
        }
        $this->container['closedFrom'] = $closedFrom;

        return $this;
    }

    /**
     * Gets closedTo
     *
     * @return \DateTime|null
     */
    public function getClosedTo()
    {
        return $this->container['closedTo'];
    }

    /**
     * Sets closedTo
     *
     * @param \DateTime|null $closedTo The end date of the closing of the shop
     *
     * @return self
     */
    public function setClosedTo($closedTo)
    {
        if (is_null($closedTo)) {
            throw new \InvalidArgumentException('non-nullable closedTo cannot be null');
        }
        $this->container['closedTo'] = $closedTo;

        return $this;
    }

    /**
     * Gets contactInformations
     *
     * @return \OpenAPI\Client\Mirakl\Model\A01Response200ContactInformations|null
     */
    public function getContactInformations()
    {
        return $this->container['contactInformations'];
    }

    /**
     * Sets contactInformations
     *
     * @param \OpenAPI\Client\Mirakl\Model\A01Response200ContactInformations|null $contactInformations contactInformations
     *
     * @return self
     */
    public function setContactInformations($contactInformations)
    {
        if (is_null($contactInformations)) {
            throw new \InvalidArgumentException('non-nullable contactInformations cannot be null');
        }
        $this->container['contactInformations'] = $contactInformations;

        return $this;
    }

    /**
     * Gets currencyIsoCode
     *
     * @return string|null
     */
    public function getCurrencyIsoCode()
    {
        return $this->container['currencyIsoCode'];
    }

    /**
     * Sets currencyIsoCode
     *
     * @param string|null $currencyIsoCode The currency of the shop (iso format)
     *
     * @return self
     */
    public function setCurrencyIsoCode($currencyIsoCode)
    {
        if (is_null($currencyIsoCode)) {
            throw new \InvalidArgumentException('non-nullable currencyIsoCode cannot be null');
        }
        $this->container['currencyIsoCode'] = $currencyIsoCode;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime|null $dateCreated Creation date of the shop
     *
     * @return self
     */
    public function setDateCreated($dateCreated)
    {
        if (is_null($dateCreated)) {
            throw new \InvalidArgumentException('non-nullable dateCreated cannot be null');
        }
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets defaultBillingInformation
     *
     * @return \OpenAPI\Client\Mirakl\Model\A01Response200DefaultBillingInformation|null
     */
    public function getDefaultBillingInformation()
    {
        return $this->container['defaultBillingInformation'];
    }

    /**
     * Sets defaultBillingInformation
     *
     * @param \OpenAPI\Client\Mirakl\Model\A01Response200DefaultBillingInformation|null $defaultBillingInformation defaultBillingInformation
     *
     * @return self
     */
    public function setDefaultBillingInformation($defaultBillingInformation)
    {
        if (is_null($defaultBillingInformation)) {
            throw new \InvalidArgumentException('non-nullable defaultBillingInformation cannot be null');
        }
        $this->container['defaultBillingInformation'] = $defaultBillingInformation;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the shop, max length: 3000 characters.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return string[]|null
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param string[]|null $domains Shop domains
     *
     * @return self
     */
    public function setDomains($domains)
    {
        if (is_null($domains)) {
            throw new \InvalidArgumentException('non-nullable domains cannot be null');
        }
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets evaluationsCount
     *
     * @return int|null
     */
    public function getEvaluationsCount()
    {
        return $this->container['evaluationsCount'];
    }

    /**
     * Sets evaluationsCount
     *
     * @param int|null $evaluationsCount Number of evaluations for the shop
     *
     * @return self
     */
    public function setEvaluationsCount($evaluationsCount)
    {
        if (is_null($evaluationsCount)) {
            throw new \InvalidArgumentException('non-nullable evaluationsCount cannot be null');
        }
        $this->container['evaluationsCount'] = $evaluationsCount;

        return $this;
    }

    /**
     * Gets freeShipping
     *
     * @return bool|null
     */
    public function getFreeShipping()
    {
        return $this->container['freeShipping'];
    }

    /**
     * Sets freeShipping
     *
     * @param bool|null $freeShipping Whether or not this shop offers free shipping to customers
     *
     * @return self
     */
    public function setFreeShipping($freeShipping)
    {
        if (is_null($freeShipping)) {
            throw new \InvalidArgumentException('non-nullable freeShipping cannot be null');
        }
        $this->container['freeShipping'] = $freeShipping;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return float|null
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param float|null $grade Global grade of the shop
     *
     * @return self
     */
    public function setGrade($grade)
    {
        if (is_null($grade)) {
            throw new \InvalidArgumentException('non-nullable grade cannot be null');
        }
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets isProfessional
     *
     * @return bool|null
     */
    public function getIsProfessional()
    {
        return $this->container['isProfessional'];
    }

    /**
     * Sets isProfessional
     *
     * @param bool|null $isProfessional Whether or not the shop is professional
     *
     * @return self
     */
    public function setIsProfessional($isProfessional)
    {
        if (is_null($isProfessional)) {
            throw new \InvalidArgumentException('non-nullable isProfessional cannot be null');
        }
        $this->container['isProfessional'] = $isProfessional;

        return $this;
    }

    /**
     * Gets kyc
     *
     * @return \OpenAPI\Client\Mirakl\Model\A01Response200Kyc|null
     */
    public function getKyc()
    {
        return $this->container['kyc'];
    }

    /**
     * Sets kyc
     *
     * @param \OpenAPI\Client\Mirakl\Model\A01Response200Kyc|null $kyc kyc
     *
     * @return self
     */
    public function setKyc($kyc)
    {
        if (is_null($kyc)) {
            throw new \InvalidArgumentException('non-nullable kyc cannot be null');
        }
        $this->container['kyc'] = $kyc;

        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \DateTime|null
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \DateTime|null $lastUpdatedDate The date of the last modification of the shop. Note: The following statistics fields do not update the <code>last_updated</code> date: <ul>     <li><code>orders_count</code></li>     <li><code>offers_count</code></li>     <li><code>evaluations_count</code></li>     <li><code>grade</code></li>     <li><code>approval_rate</code></li>     <li><code>approval_delay</code></li>     <li><code>order_messages_response_delay</code></li> </ul>
     *
     * @return self
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        if (is_null($lastUpdatedDate)) {
            throw new \InvalidArgumentException('non-nullable lastUpdatedDate cannot be null');
        }
        $this->container['lastUpdatedDate'] = $lastUpdatedDate;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo Url of the shop's logo image
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            throw new \InvalidArgumentException('non-nullable logo cannot be null');
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model Shop platform model, current possible values : <ul>     <li><code>MARKETPLACE</code></li>     <li><code>DROPSHIP</code></li>     <li><code>ONE_CREDITOR</code></li> </ul>
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets offersCount
     *
     * @return int|null
     */
    public function getOffersCount()
    {
        return $this->container['offersCount'];
    }

    /**
     * Sets offersCount
     *
     * @param int|null $offersCount Total count of active offers of the shop
     *
     * @return self
     */
    public function setOffersCount($offersCount)
    {
        if (is_null($offersCount)) {
            throw new \InvalidArgumentException('non-nullable offersCount cannot be null');
        }
        $this->container['offersCount'] = $offersCount;

        return $this;
    }

    /**
     * Gets orderMessagesResponseDelay
     *
     * @return int|null
     */
    public function getOrderMessagesResponseDelay()
    {
        return $this->container['orderMessagesResponseDelay'];
    }

    /**
     * Sets orderMessagesResponseDelay
     *
     * @param int|null $orderMessagesResponseDelay Average time for a shop to answer to an order message (in seconds)
     *
     * @return self
     */
    public function setOrderMessagesResponseDelay($orderMessagesResponseDelay)
    {
        if (is_null($orderMessagesResponseDelay)) {
            throw new \InvalidArgumentException('non-nullable orderMessagesResponseDelay cannot be null');
        }
        $this->container['orderMessagesResponseDelay'] = $orderMessagesResponseDelay;

        return $this;
    }

    /**
     * Gets ordersCount
     *
     * @return int|null
     */
    public function getOrdersCount()
    {
        return $this->container['ordersCount'];
    }

    /**
     * Sets ordersCount
     *
     * @param int|null $ordersCount Total count of debited orders (or if Pay on Delivery, accepted) of the shop
     *
     * @return self
     */
    public function setOrdersCount($ordersCount)
    {
        if (is_null($ordersCount)) {
            throw new \InvalidArgumentException('non-nullable ordersCount cannot be null');
        }
        $this->container['ordersCount'] = $ordersCount;

        return $this;
    }

    /**
     * Gets paymentDetails
     *
     * @return \OpenAPI\Client\Mirakl\Model\A01Response200PaymentDetails|null
     */
    public function getPaymentDetails()
    {
        return $this->container['paymentDetails'];
    }

    /**
     * Sets paymentDetails
     *
     * @param \OpenAPI\Client\Mirakl\Model\A01Response200PaymentDetails|null $paymentDetails paymentDetails
     *
     * @return self
     */
    public function setPaymentDetails($paymentDetails)
    {
        if (is_null($paymentDetails)) {
            throw new \InvalidArgumentException('non-nullable paymentDetails cannot be null');
        }
        $this->container['paymentDetails'] = $paymentDetails;

        return $this;
    }

    /**
     * Gets paymentInfo
     *
     * @return \OpenAPI\Client\Mirakl\Model\A01Response200PaymentInfo|null
     */
    public function getPaymentInfo()
    {
        return $this->container['paymentInfo'];
    }

    /**
     * Sets paymentInfo
     *
     * @param \OpenAPI\Client\Mirakl\Model\A01Response200PaymentInfo|null $paymentInfo paymentInfo
     *
     * @return self
     */
    public function setPaymentInfo($paymentInfo)
    {
        if (is_null($paymentInfo)) {
            throw new \InvalidArgumentException('non-nullable paymentInfo cannot be null');
        }
        $this->container['paymentInfo'] = $paymentInfo;

        return $this;
    }

    /**
     * Gets paymentMethodMandatory
     *
     * @return bool|null
     */
    public function getPaymentMethodMandatory()
    {
        return $this->container['paymentMethodMandatory'];
    }

    /**
     * Sets paymentMethodMandatory
     *
     * @param bool|null $paymentMethodMandatory Payment method mandatory
     *
     * @return self
     */
    public function setPaymentMethodMandatory($paymentMethodMandatory)
    {
        if (is_null($paymentMethodMandatory)) {
            throw new \InvalidArgumentException('non-nullable paymentMethodMandatory cannot be null');
        }
        $this->container['paymentMethodMandatory'] = $paymentMethodMandatory;

        return $this;
    }

    /**
     * Gets premium
     *
     * @return bool|null
     */
    public function getPremium()
    {
        return $this->container['premium'];
    }

    /**
     * Sets premium
     *
     * @param bool|null $premium Whether or not the shop is premium
     *
     * @return self
     */
    public function setPremium($premium)
    {
        if (is_null($premium)) {
            throw new \InvalidArgumentException('non-nullable premium cannot be null');
        }
        $this->container['premium'] = $premium;

        return $this;
    }

    /**
     * Gets proDetails
     *
     * @return \OpenAPI\Client\Mirakl\Model\A01Response200ProDetails|null
     * @deprecated
     */
    public function getProDetails()
    {
        return $this->container['proDetails'];
    }

    /**
     * Sets proDetails
     *
     * @param \OpenAPI\Client\Mirakl\Model\A01Response200ProDetails|null $proDetails proDetails
     *
     * @return self
     * @deprecated
     */
    public function setProDetails($proDetails)
    {
        if (is_null($proDetails)) {
            throw new \InvalidArgumentException('non-nullable proDetails cannot be null');
        }
        $this->container['proDetails'] = $proDetails;

        return $this;
    }

    /**
     * Gets producerIdentifiers
     *
     * @return \OpenAPI\Client\Mirakl\Model\A01Response200ProducerIdentifiers[]|null
     */
    public function getProducerIdentifiers()
    {
        return $this->container['producerIdentifiers'];
    }

    /**
     * Sets producerIdentifiers
     *
     * @param \OpenAPI\Client\Mirakl\Model\A01Response200ProducerIdentifiers[]|null $producerIdentifiers List of shop’s producer identifiers per Extended Producer Responsibility (EPR) categories. Only available if the operator setting <em>Activate data collection related to circular economy regulations</em> is enabled.
     *
     * @return self
     */
    public function setProducerIdentifiers($producerIdentifiers)
    {
        if (is_null($producerIdentifiers)) {
            throw new \InvalidArgumentException('non-nullable producerIdentifiers cannot be null');
        }
        $this->container['producerIdentifiers'] = $producerIdentifiers;

        return $this;
    }

    /**
     * Gets recyclingPolicy
     *
     * @return string|null
     */
    public function getRecyclingPolicy()
    {
        return $this->container['recyclingPolicy'];
    }

    /**
     * Sets recyclingPolicy
     *
     * @param string|null $recyclingPolicy Recycling policy - only available if the operator setting <em>Activate data collection related to circular economy regulations</em> has been enabled.
     *
     * @return self
     */
    public function setRecyclingPolicy($recyclingPolicy)
    {
        if (is_null($recyclingPolicy)) {
            throw new \InvalidArgumentException('non-nullable recyclingPolicy cannot be null');
        }
        if ((mb_strlen($recyclingPolicy) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $recyclingPolicy when calling A01Response200., must be smaller than or equal to 5000.');
        }

        $this->container['recyclingPolicy'] = $recyclingPolicy;

        return $this;
    }

    /**
     * Gets returnPolicy
     *
     * @return string|null
     */
    public function getReturnPolicy()
    {
        return $this->container['returnPolicy'];
    }

    /**
     * Sets returnPolicy
     *
     * @param string|null $returnPolicy Terms of restitution, max length: 60000 characters.
     *
     * @return self
     */
    public function setReturnPolicy($returnPolicy)
    {
        if (is_null($returnPolicy)) {
            throw new \InvalidArgumentException('non-nullable returnPolicy cannot be null');
        }
        $this->container['returnPolicy'] = $returnPolicy;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return \OpenAPI\Client\Mirakl\Model\A01Response200Shipping|null
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param \OpenAPI\Client\Mirakl\Model\A01Response200Shipping|null $shipping shipping
     *
     * @return self
     */
    public function setShipping($shipping)
    {
        if (is_null($shipping)) {
            throw new \InvalidArgumentException('non-nullable shipping cannot be null');
        }
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets shippingCountry
     *
     * @return string|null
     */
    public function getShippingCountry()
    {
        return $this->container['shippingCountry'];
    }

    /**
     * Sets shippingCountry
     *
     * @param string|null $shippingCountry Code ISO 3166-1 alpha-3 of the shipping country
     *
     * @return self
     */
    public function setShippingCountry($shippingCountry)
    {
        if (is_null($shippingCountry)) {
            throw new \InvalidArgumentException('non-nullable shippingCountry cannot be null');
        }
        $this->container['shippingCountry'] = $shippingCountry;

        return $this;
    }

    /**
     * Gets shippingTypes
     *
     * @return string[]|null
     * @deprecated
     */
    public function getShippingTypes()
    {
        return $this->container['shippingTypes'];
    }

    /**
     * Sets shippingTypes
     *
     * @param string[]|null $shippingTypes List of shipping types of the shop
     *
     * @return self
     * @deprecated
     */
    public function setShippingTypes($shippingTypes)
    {
        if (is_null($shippingTypes)) {
            throw new \InvalidArgumentException('non-nullable shippingTypes cannot be null');
        }
        $this->container['shippingTypes'] = $shippingTypes;

        return $this;
    }

    /**
     * Gets shippingZones
     *
     * @return string[]|null
     * @deprecated
     */
    public function getShippingZones()
    {
        return $this->container['shippingZones'];
    }

    /**
     * Sets shippingZones
     *
     * @param string[]|null $shippingZones List of shipping zones of the shop
     *
     * @return self
     * @deprecated
     */
    public function setShippingZones($shippingZones)
    {
        if (is_null($shippingZones)) {
            throw new \InvalidArgumentException('non-nullable shippingZones cannot be null');
        }
        $this->container['shippingZones'] = $shippingZones;

        return $this;
    }

    /**
     * Gets shippings
     *
     * @return \OpenAPI\Client\Mirakl\Model\A01Response200Shippings[]|null
     */
    public function getShippings()
    {
        return $this->container['shippings'];
    }

    /**
     * Sets shippings
     *
     * @param \OpenAPI\Client\Mirakl\Model\A01Response200Shippings[]|null $shippings All the pair shipping zone / shipping type accepted by the shop
     *
     * @return self
     */
    public function setShippings($shippings)
    {
        if (is_null($shippings)) {
            throw new \InvalidArgumentException('non-nullable shippings cannot be null');
        }
        $this->container['shippings'] = $shippings;

        return $this;
    }

    /**
     * Gets shopAdditionalFields
     *
     * @return \OpenAPI\Client\Mirakl\Model\A01Response200ShopAdditionalFields[]|null
     */
    public function getShopAdditionalFields()
    {
        return $this->container['shopAdditionalFields'];
    }

    /**
     * Sets shopAdditionalFields
     *
     * @param \OpenAPI\Client\Mirakl\Model\A01Response200ShopAdditionalFields[]|null $shopAdditionalFields List of additional fields
     *
     * @return self
     */
    public function setShopAdditionalFields($shopAdditionalFields)
    {
        if (is_null($shopAdditionalFields)) {
            throw new \InvalidArgumentException('non-nullable shopAdditionalFields cannot be null');
        }
        $this->container['shopAdditionalFields'] = $shopAdditionalFields;

        return $this;
    }

    /**
     * Gets shopId
     *
     * @return int|null
     */
    public function getShopId()
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId
     *
     * @param int|null $shopId The identifier of the shop
     *
     * @return self
     */
    public function setShopId($shopId)
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets shopName
     *
     * @return string|null
     */
    public function getShopName()
    {
        return $this->container['shopName'];
    }

    /**
     * Sets shopName
     *
     * @param string|null $shopName The name of the shop
     *
     * @return self
     */
    public function setShopName($shopName)
    {
        if (is_null($shopName)) {
            throw new \InvalidArgumentException('non-nullable shopName cannot be null');
        }
        $this->container['shopName'] = $shopName;

        return $this;
    }

    /**
     * Gets shopState
     *
     * @return string|null
     */
    public function getShopState()
    {
        return $this->container['shopState'];
    }

    /**
     * Sets shopState
     *
     * @param string|null $shopState The state of the shop
     *
     * @return self
     */
    public function setShopState($shopState)
    {
        if (is_null($shopState)) {
            throw new \InvalidArgumentException('non-nullable shopState cannot be null');
        }
        $this->container['shopState'] = $shopState;

        return $this;
    }

    /**
     * Gets specificBillingInformations
     *
     * @return \OpenAPI\Client\Mirakl\Model\A01Response200SpecificBillingInformations[]|null
     */
    public function getSpecificBillingInformations()
    {
        return $this->container['specificBillingInformations'];
    }

    /**
     * Sets specificBillingInformations
     *
     * @param \OpenAPI\Client\Mirakl\Model\A01Response200SpecificBillingInformations[]|null $specificBillingInformations The list of specific billing information of the shop, used for invoicing and reporting purposes <br/><i>Applies only when the shop is <code>professional</code></i>
     *
     * @return self
     */
    public function setSpecificBillingInformations($specificBillingInformations)
    {
        if (is_null($specificBillingInformations)) {
            throw new \InvalidArgumentException('non-nullable specificBillingInformations cannot be null');
        }
        $this->container['specificBillingInformations'] = $specificBillingInformations;

        return $this;
    }

    /**
     * Gets suspensionType
     *
     * @return string|null
     */
    public function getSuspensionType()
    {
        return $this->container['suspensionType'];
    }

    /**
     * Sets suspensionType
     *
     * @param string|null $suspensionType Shop suspension type, current possible values:<ul><li><code>MANUAL</code>: Shop account has been manually suspended in the back-office</li><li><code>PENDING_APPROVAL</code>: Shop account has been suspended at creation</li><li><code>AUTOMATIC_SUSPENSION</code>: Shop account has been suspended by Mirakl Quality Control</li><li><code>INCOMPLETE_PROFILE</code>: Shop account is suspended because some mandatory fields are missing in its profile</li></ul>
     *
     * @return self
     */
    public function setSuspensionType($suspensionType)
    {
        if (is_null($suspensionType)) {
            throw new \InvalidArgumentException('non-nullable suspensionType cannot be null');
        }
        $this->container['suspensionType'] = $suspensionType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


