<?php
/**
 * ShippingGroupOption
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * The version of the OpenAPI document: 2.18.3
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * ShippingGroupOption Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShippingGroupOption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShippingGroupOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => '\OpenAPI\Client\Mirakl\Model\SellerApiShippingGroupRegionOptionNameEnum',
        'costFirst' => 'int',
        'costNext' => 'int',
        'costMax' => 'int',
        'costFree' => 'int',
        'cutOffTime' => 'string',
        'transportTimeMin' => 'int',
        'transportTimeMax' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'costFirst' => 'int32',
        'costNext' => 'int32',
        'costMax' => 'int32',
        'costFree' => 'int32',
        'cutOffTime' => null,
        'transportTimeMin' => 'int32',
        'transportTimeMax' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'costFirst' => false,
        'costNext' => false,
        'costMax' => false,
        'costFree' => false,
        'cutOffTime' => false,
        'transportTimeMin' => false,
        'transportTimeMax' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'costFirst' => 'cost_first',
        'costNext' => 'cost_next',
        'costMax' => 'cost_max',
        'costFree' => 'cost_free',
        'cutOffTime' => 'cut_off_time',
        'transportTimeMin' => 'transport_time_min',
        'transportTimeMax' => 'transport_time_max'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'costFirst' => 'setCostFirst',
        'costNext' => 'setCostNext',
        'costMax' => 'setCostMax',
        'costFree' => 'setCostFree',
        'cutOffTime' => 'setCutOffTime',
        'transportTimeMin' => 'setTransportTimeMin',
        'transportTimeMax' => 'setTransportTimeMax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'costFirst' => 'getCostFirst',
        'costNext' => 'getCostNext',
        'costMax' => 'getCostMax',
        'costFree' => 'getCostFree',
        'cutOffTime' => 'getCutOffTime',
        'transportTimeMin' => 'getTransportTimeMin',
        'transportTimeMax' => 'getTransportTimeMax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('costFirst', $data ?? [], null);
        $this->setIfExists('costNext', $data ?? [], null);
        $this->setIfExists('costMax', $data ?? [], null);
        $this->setIfExists('costFree', $data ?? [], null);
        $this->setIfExists('cutOffTime', $data ?? [], null);
        $this->setIfExists('transportTimeMin', $data ?? [], null);
        $this->setIfExists('transportTimeMax', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['costFirst'] === null) {
            $invalidProperties[] = "'costFirst' can't be null";
        }
        if (($this->container['costFirst'] < 0)) {
            $invalidProperties[] = "invalid value for 'costFirst', must be bigger than or equal to 0.";
        }

        if ($this->container['costNext'] === null) {
            $invalidProperties[] = "'costNext' can't be null";
        }
        if (($this->container['costNext'] < 0)) {
            $invalidProperties[] = "invalid value for 'costNext', must be bigger than or equal to 0.";
        }

        if ($this->container['costMax'] === null) {
            $invalidProperties[] = "'costMax' can't be null";
        }
        if (($this->container['costMax'] < 0)) {
            $invalidProperties[] = "invalid value for 'costMax', must be bigger than or equal to 0.";
        }

        if ($this->container['costFree'] === null) {
            $invalidProperties[] = "'costFree' can't be null";
        }
        if (($this->container['costFree'] < 0)) {
            $invalidProperties[] = "invalid value for 'costFree', must be bigger than or equal to 0.";
        }

        if ($this->container['cutOffTime'] === null) {
            $invalidProperties[] = "'cutOffTime' can't be null";
        }
        if ($this->container['transportTimeMin'] === null) {
            $invalidProperties[] = "'transportTimeMin' can't be null";
        }
        if (($this->container['transportTimeMin'] < 1)) {
            $invalidProperties[] = "invalid value for 'transportTimeMin', must be bigger than or equal to 1.";
        }

        if ($this->container['transportTimeMax'] === null) {
            $invalidProperties[] = "'transportTimeMax' can't be null";
        }
        if (($this->container['transportTimeMax'] < 1)) {
            $invalidProperties[] = "invalid value for 'transportTimeMax', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return \OpenAPI\Client\Mirakl\Model\SellerApiShippingGroupRegionOptionNameEnum
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \OpenAPI\Client\Mirakl\Model\SellerApiShippingGroupRegionOptionNameEnum $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets costFirst
     *
     * @return int
     */
    public function getCostFirst()
    {
        return $this->container['costFirst'];
    }

    /**
     * Sets costFirst
     *
     * @param int $costFirst Shipping cost for the first item of this shipping group.
     *
     * @return self
     */
    public function setCostFirst($costFirst)
    {
        if (is_null($costFirst)) {
            throw new \InvalidArgumentException('non-nullable costFirst cannot be null');
        }

        if (($costFirst < 0)) {
            throw new \InvalidArgumentException('invalid value for $costFirst when calling ShippingGroupOption., must be bigger than or equal to 0.');
        }

        $this->container['costFirst'] = $costFirst;

        return $this;
    }

    /**
     * Gets costNext
     *
     * @return int
     */
    public function getCostNext()
    {
        return $this->container['costNext'];
    }

    /**
     * Sets costNext
     *
     * @param int $costNext Shipping cost of all further items of this shipping group.
     *
     * @return self
     */
    public function setCostNext($costNext)
    {
        if (is_null($costNext)) {
            throw new \InvalidArgumentException('non-nullable costNext cannot be null');
        }

        if (($costNext < 0)) {
            throw new \InvalidArgumentException('invalid value for $costNext when calling ShippingGroupOption., must be bigger than or equal to 0.');
        }

        $this->container['costNext'] = $costNext;

        return $this;
    }

    /**
     * Gets costMax
     *
     * @return int
     */
    public function getCostMax()
    {
        return $this->container['costMax'];
    }

    /**
     * Sets costMax
     *
     * @param int $costMax Maximum shipping cost
     *
     * @return self
     */
    public function setCostMax($costMax)
    {
        if (is_null($costMax)) {
            throw new \InvalidArgumentException('non-nullable costMax cannot be null');
        }

        if (($costMax < 0)) {
            throw new \InvalidArgumentException('invalid value for $costMax when calling ShippingGroupOption., must be bigger than or equal to 0.');
        }

        $this->container['costMax'] = $costMax;

        return $this;
    }

    /**
     * Gets costFree
     *
     * @return int
     */
    public function getCostFree()
    {
        return $this->container['costFree'];
    }

    /**
     * Sets costFree
     *
     * @param int $costFree Order value from which shipping will be free.
     *
     * @return self
     */
    public function setCostFree($costFree)
    {
        if (is_null($costFree)) {
            throw new \InvalidArgumentException('non-nullable costFree cannot be null');
        }

        if (($costFree < 0)) {
            throw new \InvalidArgumentException('invalid value for $costFree when calling ShippingGroupOption., must be bigger than or equal to 0.');
        }

        $this->container['costFree'] = $costFree;

        return $this;
    }

    /**
     * Gets cutOffTime
     *
     * @return string
     */
    public function getCutOffTime()
    {
        return $this->container['cutOffTime'];
    }

    /**
     * Sets cutOffTime
     *
     * @param string $cutOffTime cutOffTime
     *
     * @return self
     */
    public function setCutOffTime($cutOffTime)
    {
        if (is_null($cutOffTime)) {
            throw new \InvalidArgumentException('non-nullable cutOffTime cannot be null');
        }
        $this->container['cutOffTime'] = $cutOffTime;

        return $this;
    }

    /**
     * Gets transportTimeMin
     *
     * @return int
     */
    public function getTransportTimeMin()
    {
        return $this->container['transportTimeMin'];
    }

    /**
     * Sets transportTimeMin
     *
     * @param int $transportTimeMin Minimal time carrier needs from picking up the order until delivering it to the customer.
     *
     * @return self
     */
    public function setTransportTimeMin($transportTimeMin)
    {
        if (is_null($transportTimeMin)) {
            throw new \InvalidArgumentException('non-nullable transportTimeMin cannot be null');
        }

        if (($transportTimeMin < 1)) {
            throw new \InvalidArgumentException('invalid value for $transportTimeMin when calling ShippingGroupOption., must be bigger than or equal to 1.');
        }

        $this->container['transportTimeMin'] = $transportTimeMin;

        return $this;
    }

    /**
     * Gets transportTimeMax
     *
     * @return int
     */
    public function getTransportTimeMax()
    {
        return $this->container['transportTimeMax'];
    }

    /**
     * Sets transportTimeMax
     *
     * @param int $transportTimeMax Maximal time carrier needs from picking up the order until delivering it to the customer.
     *
     * @return self
     */
    public function setTransportTimeMax($transportTimeMax)
    {
        if (is_null($transportTimeMax)) {
            throw new \InvalidArgumentException('non-nullable transportTimeMax cannot be null');
        }

        if (($transportTimeMax < 1)) {
            throw new \InvalidArgumentException('invalid value for $transportTimeMax when calling ShippingGroupOption., must be bigger than or equal to 1.');
        }

        $this->container['transportTimeMax'] = $transportTimeMax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


