<?php
/**
 * OF24RequestOffers
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * OF24RequestOffers Class Doc Comment
 *
 * @category Class
 * @description Offers list
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OF24RequestOffers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OF24_Request_Offers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allPrices' => '\OpenAPI\Client\Mirakl\Model\OF24RequestOffersAllPrices[]',
        'allowQuoteRequests' => 'bool',
        'availableEnded' => 'string',
        'availableStarted' => 'string',
        'description' => 'string',
        'discount' => '\OpenAPI\Client\Mirakl\Model\OF24RequestOffersDiscount',
        'ecoContributions' => '\OpenAPI\Client\Mirakl\Model\OF24RequestOffersEcoContributions[]',
        'internalDescription' => 'string',
        'leadtimeToShip' => 'int',
        'logisticClass' => 'string',
        'maxOrderQuantity' => 'int',
        'minOrderQuantity' => 'int',
        'minQuantityAlert' => 'int',
        'offerAdditionalFields' => '\OpenAPI\Client\Mirakl\Model\OF24RequestOffersOfferAdditionalFields[]',
        'packageQuantity' => 'int',
        'price' => 'float',
        'priceAdditionalInfo' => 'string',
        'pricingUnit' => 'string',
        'productId' => 'string',
        'productIdType' => 'string',
        'productTaxCode' => 'string',
        'quantity' => 'int',
        'shopSku' => 'string',
        'stateCode' => 'string',
        'updateDelete' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allPrices' => null,
        'allowQuoteRequests' => null,
        'availableEnded' => null,
        'availableStarted' => null,
        'description' => null,
        'discount' => null,
        'ecoContributions' => null,
        'internalDescription' => null,
        'leadtimeToShip' => 'int32',
        'logisticClass' => null,
        'maxOrderQuantity' => 'int32',
        'minOrderQuantity' => 'int32',
        'minQuantityAlert' => 'int32',
        'offerAdditionalFields' => null,
        'packageQuantity' => 'int32',
        'price' => null,
        'priceAdditionalInfo' => null,
        'pricingUnit' => null,
        'productId' => null,
        'productIdType' => null,
        'productTaxCode' => null,
        'quantity' => 'int32',
        'shopSku' => null,
        'stateCode' => null,
        'updateDelete' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allPrices' => false,
        'allowQuoteRequests' => false,
        'availableEnded' => false,
        'availableStarted' => false,
        'description' => false,
        'discount' => false,
        'ecoContributions' => false,
        'internalDescription' => false,
        'leadtimeToShip' => false,
        'logisticClass' => false,
        'maxOrderQuantity' => false,
        'minOrderQuantity' => false,
        'minQuantityAlert' => false,
        'offerAdditionalFields' => false,
        'packageQuantity' => false,
        'price' => false,
        'priceAdditionalInfo' => false,
        'pricingUnit' => false,
        'productId' => false,
        'productIdType' => false,
        'productTaxCode' => false,
        'quantity' => false,
        'shopSku' => false,
        'stateCode' => false,
        'updateDelete' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allPrices' => 'all_prices',
        'allowQuoteRequests' => 'allow_quote_requests',
        'availableEnded' => 'available_ended',
        'availableStarted' => 'available_started',
        'description' => 'description',
        'discount' => 'discount',
        'ecoContributions' => 'eco_contributions',
        'internalDescription' => 'internal_description',
        'leadtimeToShip' => 'leadtime_to_ship',
        'logisticClass' => 'logistic_class',
        'maxOrderQuantity' => 'max_order_quantity',
        'minOrderQuantity' => 'min_order_quantity',
        'minQuantityAlert' => 'min_quantity_alert',
        'offerAdditionalFields' => 'offer_additional_fields',
        'packageQuantity' => 'package_quantity',
        'price' => 'price',
        'priceAdditionalInfo' => 'price_additional_info',
        'pricingUnit' => 'pricing_unit',
        'productId' => 'product_id',
        'productIdType' => 'product_id_type',
        'productTaxCode' => 'product_tax_code',
        'quantity' => 'quantity',
        'shopSku' => 'shop_sku',
        'stateCode' => 'state_code',
        'updateDelete' => 'update_delete'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allPrices' => 'setAllPrices',
        'allowQuoteRequests' => 'setAllowQuoteRequests',
        'availableEnded' => 'setAvailableEnded',
        'availableStarted' => 'setAvailableStarted',
        'description' => 'setDescription',
        'discount' => 'setDiscount',
        'ecoContributions' => 'setEcoContributions',
        'internalDescription' => 'setInternalDescription',
        'leadtimeToShip' => 'setLeadtimeToShip',
        'logisticClass' => 'setLogisticClass',
        'maxOrderQuantity' => 'setMaxOrderQuantity',
        'minOrderQuantity' => 'setMinOrderQuantity',
        'minQuantityAlert' => 'setMinQuantityAlert',
        'offerAdditionalFields' => 'setOfferAdditionalFields',
        'packageQuantity' => 'setPackageQuantity',
        'price' => 'setPrice',
        'priceAdditionalInfo' => 'setPriceAdditionalInfo',
        'pricingUnit' => 'setPricingUnit',
        'productId' => 'setProductId',
        'productIdType' => 'setProductIdType',
        'productTaxCode' => 'setProductTaxCode',
        'quantity' => 'setQuantity',
        'shopSku' => 'setShopSku',
        'stateCode' => 'setStateCode',
        'updateDelete' => 'setUpdateDelete'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allPrices' => 'getAllPrices',
        'allowQuoteRequests' => 'getAllowQuoteRequests',
        'availableEnded' => 'getAvailableEnded',
        'availableStarted' => 'getAvailableStarted',
        'description' => 'getDescription',
        'discount' => 'getDiscount',
        'ecoContributions' => 'getEcoContributions',
        'internalDescription' => 'getInternalDescription',
        'leadtimeToShip' => 'getLeadtimeToShip',
        'logisticClass' => 'getLogisticClass',
        'maxOrderQuantity' => 'getMaxOrderQuantity',
        'minOrderQuantity' => 'getMinOrderQuantity',
        'minQuantityAlert' => 'getMinQuantityAlert',
        'offerAdditionalFields' => 'getOfferAdditionalFields',
        'packageQuantity' => 'getPackageQuantity',
        'price' => 'getPrice',
        'priceAdditionalInfo' => 'getPriceAdditionalInfo',
        'pricingUnit' => 'getPricingUnit',
        'productId' => 'getProductId',
        'productIdType' => 'getProductIdType',
        'productTaxCode' => 'getProductTaxCode',
        'quantity' => 'getQuantity',
        'shopSku' => 'getShopSku',
        'stateCode' => 'getStateCode',
        'updateDelete' => 'getUpdateDelete'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('allPrices', $data ?? [], null);
        $this->setIfExists('allowQuoteRequests', $data ?? [], null);
        $this->setIfExists('availableEnded', $data ?? [], null);
        $this->setIfExists('availableStarted', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('ecoContributions', $data ?? [], null);
        $this->setIfExists('internalDescription', $data ?? [], null);
        $this->setIfExists('leadtimeToShip', $data ?? [], null);
        $this->setIfExists('logisticClass', $data ?? [], null);
        $this->setIfExists('maxOrderQuantity', $data ?? [], null);
        $this->setIfExists('minOrderQuantity', $data ?? [], null);
        $this->setIfExists('minQuantityAlert', $data ?? [], null);
        $this->setIfExists('offerAdditionalFields', $data ?? [], null);
        $this->setIfExists('packageQuantity', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('priceAdditionalInfo', $data ?? [], null);
        $this->setIfExists('pricingUnit', $data ?? [], null);
        $this->setIfExists('productId', $data ?? [], null);
        $this->setIfExists('productIdType', $data ?? [], null);
        $this->setIfExists('productTaxCode', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('shopSku', $data ?? [], null);
        $this->setIfExists('stateCode', $data ?? [], null);
        $this->setIfExists('updateDelete', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allPrices
     *
     * @return \OpenAPI\Client\Mirakl\Model\OF24RequestOffersAllPrices[]|null
     */
    public function getAllPrices()
    {
        return $this->container['allPrices'];
    }

    /**
     * Sets allPrices
     *
     * @param \OpenAPI\Client\Mirakl\Model\OF24RequestOffersAllPrices[]|null $allPrices The volume and channel prices. Not applicable for Dropship offers.
     *
     * @return self
     */
    public function setAllPrices($allPrices)
    {
        if (is_null($allPrices)) {
            throw new \InvalidArgumentException('non-nullable allPrices cannot be null');
        }
        $this->container['allPrices'] = $allPrices;

        return $this;
    }

    /**
     * Gets allowQuoteRequests
     *
     * @return bool|null
     */
    public function getAllowQuoteRequests()
    {
        return $this->container['allowQuoteRequests'];
    }

    /**
     * Sets allowQuoteRequests
     *
     * @param bool|null $allowQuoteRequests Whether the offer is eligible for quotation. Offer update: if not provided, will be set to false.
     *
     * @return self
     */
    public function setAllowQuoteRequests($allowQuoteRequests)
    {
        if (is_null($allowQuoteRequests)) {
            throw new \InvalidArgumentException('non-nullable allowQuoteRequests cannot be null');
        }
        $this->container['allowQuoteRequests'] = $allowQuoteRequests;

        return $this;
    }

    /**
     * Gets availableEnded
     *
     * @return string|null
     */
    public function getAvailableEnded()
    {
        return $this->container['availableEnded'];
    }

    /**
     * Sets availableEnded
     *
     * @param string|null $availableEnded End date of the period of availability. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setAvailableEnded($availableEnded)
    {
        if (is_null($availableEnded)) {
            throw new \InvalidArgumentException('non-nullable availableEnded cannot be null');
        }
        $this->container['availableEnded'] = $availableEnded;

        return $this;
    }

    /**
     * Gets availableStarted
     *
     * @return string|null
     */
    public function getAvailableStarted()
    {
        return $this->container['availableStarted'];
    }

    /**
     * Sets availableStarted
     *
     * @param string|null $availableStarted Started date of the period of availability. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setAvailableStarted($availableStarted)
    {
        if (is_null($availableStarted)) {
            throw new \InvalidArgumentException('non-nullable availableStarted cannot be null');
        }
        $this->container['availableStarted'] = $availableStarted;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the offer. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return \OpenAPI\Client\Mirakl\Model\OF24RequestOffersDiscount|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param \OpenAPI\Client\Mirakl\Model\OF24RequestOffersDiscount|null $discount discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets ecoContributions
     *
     * @return \OpenAPI\Client\Mirakl\Model\OF24RequestOffersEcoContributions[]|null
     */
    public function getEcoContributions()
    {
        return $this->container['ecoContributions'];
    }

    /**
     * Sets ecoContributions
     *
     * @param \OpenAPI\Client\Mirakl\Model\OF24RequestOffersEcoContributions[]|null $ecoContributions Eco-contributions of the offer - only available if the operator setting <em>Activate data collection related to circular economy regulations</em> has been enabled. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setEcoContributions($ecoContributions)
    {
        if (is_null($ecoContributions)) {
            throw new \InvalidArgumentException('non-nullable ecoContributions cannot be null');
        }
        $this->container['ecoContributions'] = $ecoContributions;

        return $this;
    }

    /**
     * Gets internalDescription
     *
     * @return string|null
     */
    public function getInternalDescription()
    {
        return $this->container['internalDescription'];
    }

    /**
     * Sets internalDescription
     *
     * @param string|null $internalDescription Internal description of the offer. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setInternalDescription($internalDescription)
    {
        if (is_null($internalDescription)) {
            throw new \InvalidArgumentException('non-nullable internalDescription cannot be null');
        }
        $this->container['internalDescription'] = $internalDescription;

        return $this;
    }

    /**
     * Gets leadtimeToShip
     *
     * @return int|null
     */
    public function getLeadtimeToShip()
    {
        return $this->container['leadtimeToShip'];
    }

    /**
     * Sets leadtimeToShip
     *
     * @param int|null $leadtimeToShip Leadtime to ship of the offer, in days. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setLeadtimeToShip($leadtimeToShip)
    {
        if (is_null($leadtimeToShip)) {
            throw new \InvalidArgumentException('non-nullable leadtimeToShip cannot be null');
        }
        $this->container['leadtimeToShip'] = $leadtimeToShip;

        return $this;
    }

    /**
     * Gets logisticClass
     *
     * @return string|null
     */
    public function getLogisticClass()
    {
        return $this->container['logisticClass'];
    }

    /**
     * Sets logisticClass
     *
     * @param string|null $logisticClass Offer logistic class. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setLogisticClass($logisticClass)
    {
        if (is_null($logisticClass)) {
            throw new \InvalidArgumentException('non-nullable logisticClass cannot be null');
        }
        $this->container['logisticClass'] = $logisticClass;

        return $this;
    }

    /**
     * Gets maxOrderQuantity
     *
     * @return int|null
     */
    public function getMaxOrderQuantity()
    {
        return $this->container['maxOrderQuantity'];
    }

    /**
     * Sets maxOrderQuantity
     *
     * @param int|null $maxOrderQuantity The maximum quantity of product items per order. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setMaxOrderQuantity($maxOrderQuantity)
    {
        if (is_null($maxOrderQuantity)) {
            throw new \InvalidArgumentException('non-nullable maxOrderQuantity cannot be null');
        }
        $this->container['maxOrderQuantity'] = $maxOrderQuantity;

        return $this;
    }

    /**
     * Gets minOrderQuantity
     *
     * @return int|null
     */
    public function getMinOrderQuantity()
    {
        return $this->container['minOrderQuantity'];
    }

    /**
     * Sets minOrderQuantity
     *
     * @param int|null $minOrderQuantity The minimum quantity of product items per order. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setMinOrderQuantity($minOrderQuantity)
    {
        if (is_null($minOrderQuantity)) {
            throw new \InvalidArgumentException('non-nullable minOrderQuantity cannot be null');
        }
        $this->container['minOrderQuantity'] = $minOrderQuantity;

        return $this;
    }

    /**
     * Gets minQuantityAlert
     *
     * @return int|null
     */
    public function getMinQuantityAlert()
    {
        return $this->container['minQuantityAlert'];
    }

    /**
     * Sets minQuantityAlert
     *
     * @param int|null $minQuantityAlert The minimum stock level that triggers an email alert. No alerts are sent if this field is not specified. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setMinQuantityAlert($minQuantityAlert)
    {
        if (is_null($minQuantityAlert)) {
            throw new \InvalidArgumentException('non-nullable minQuantityAlert cannot be null');
        }
        $this->container['minQuantityAlert'] = $minQuantityAlert;

        return $this;
    }

    /**
     * Gets offerAdditionalFields
     *
     * @return \OpenAPI\Client\Mirakl\Model\OF24RequestOffersOfferAdditionalFields[]|null
     */
    public function getOfferAdditionalFields()
    {
        return $this->container['offerAdditionalFields'];
    }

    /**
     * Sets offerAdditionalFields
     *
     * @param \OpenAPI\Client\Mirakl\Model\OF24RequestOffersOfferAdditionalFields[]|null $offerAdditionalFields Custom fields of the offer
     *
     * @return self
     */
    public function setOfferAdditionalFields($offerAdditionalFields)
    {
        if (is_null($offerAdditionalFields)) {
            throw new \InvalidArgumentException('non-nullable offerAdditionalFields cannot be null');
        }
        $this->container['offerAdditionalFields'] = $offerAdditionalFields;

        return $this;
    }

    /**
     * Gets packageQuantity
     *
     * @return int|null
     */
    public function getPackageQuantity()
    {
        return $this->container['packageQuantity'];
    }

    /**
     * Sets packageQuantity
     *
     * @param int|null $packageQuantity The indivisible selling quantity of the same product. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setPackageQuantity($packageQuantity)
    {
        if (is_null($packageQuantity)) {
            throw new \InvalidArgumentException('non-nullable packageQuantity cannot be null');
        }
        $this->container['packageQuantity'] = $packageQuantity;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Price of the offer. For Dropship specifically: the purchasing price of the offer, also referred to as cost or wholesale price.
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets priceAdditionalInfo
     *
     * @return string|null
     */
    public function getPriceAdditionalInfo()
    {
        return $this->container['priceAdditionalInfo'];
    }

    /**
     * Sets priceAdditionalInfo
     *
     * @param string|null $priceAdditionalInfo Price additional information of the offer. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setPriceAdditionalInfo($priceAdditionalInfo)
    {
        if (is_null($priceAdditionalInfo)) {
            throw new \InvalidArgumentException('non-nullable priceAdditionalInfo cannot be null');
        }
        $this->container['priceAdditionalInfo'] = $priceAdditionalInfo;

        return $this;
    }

    /**
     * Gets pricingUnit
     *
     * @return string|null
     */
    public function getPricingUnit()
    {
        return $this->container['pricingUnit'];
    }

    /**
     * Sets pricingUnit
     *
     * @param string|null $pricingUnit The unit corresponding to the submitted price when the price per measurement unit feature is used.
     *
     * @return self
     */
    public function setPricingUnit($pricingUnit)
    {
        if (is_null($pricingUnit)) {
            throw new \InvalidArgumentException('non-nullable pricingUnit cannot be null');
        }
        $this->container['pricingUnit'] = $pricingUnit;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param string|null $productId Reference of the product associated with the offer. Required at offer creation. Optional at offer update.
     *
     * @return self
     */
    public function setProductId($productId)
    {
        if (is_null($productId)) {
            throw new \InvalidArgumentException('non-nullable productId cannot be null');
        }
        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets productIdType
     *
     * @return string|null
     */
    public function getProductIdType()
    {
        return $this->container['productIdType'];
    }

    /**
     * Sets productIdType
     *
     * @param string|null $productIdType Reference type of the product associated with the offer. Required at offer creation. Optional at offer update.
     *
     * @return self
     */
    public function setProductIdType($productIdType)
    {
        if (is_null($productIdType)) {
            throw new \InvalidArgumentException('non-nullable productIdType cannot be null');
        }
        $this->container['productIdType'] = $productIdType;

        return $this;
    }

    /**
     * Gets productTaxCode
     *
     * @return string|null
     */
    public function getProductTaxCode()
    {
        return $this->container['productTaxCode'];
    }

    /**
     * Sets productTaxCode
     *
     * @param string|null $productTaxCode Product tax code associated to the offer. When Operator mandatorily collects product tax codes on offers, required at offer creation and update. When Operator optionally collects product tax codes on offers, if no value is provided at offer update, existing data will be deleted.
     *
     * @return self
     */
    public function setProductTaxCode($productTaxCode)
    {
        if (is_null($productTaxCode)) {
            throw new \InvalidArgumentException('non-nullable productTaxCode cannot be null');
        }
        $this->container['productTaxCode'] = $productTaxCode;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Quantity available of the offer. Offer update: if not provided, will be set to 0.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets shopSku
     *
     * @return string|null
     */
    public function getShopSku()
    {
        return $this->container['shopSku'];
    }

    /**
     * Sets shopSku
     *
     * @param string|null $shopSku Sku of the offer
     *
     * @return self
     */
    public function setShopSku($shopSku)
    {
        if (is_null($shopSku)) {
            throw new \InvalidArgumentException('non-nullable shopSku cannot be null');
        }
        $this->container['shopSku'] = $shopSku;

        return $this;
    }

    /**
     * Gets stateCode
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['stateCode'];
    }

    /**
     * Sets stateCode
     *
     * @param string|null $stateCode State of the offer
     *
     * @return self
     */
    public function setStateCode($stateCode)
    {
        if (is_null($stateCode)) {
            throw new \InvalidArgumentException('non-nullable stateCode cannot be null');
        }
        $this->container['stateCode'] = $stateCode;

        return $this;
    }

    /**
     * Gets updateDelete
     *
     * @return string|null
     */
    public function getUpdateDelete()
    {
        return $this->container['updateDelete'];
    }

    /**
     * Sets updateDelete
     *
     * @param string|null $updateDelete Update delete flag. Could be empty (means \"update\"), \"update\" or \"delete\".
     *
     * @return self
     */
    public function setUpdateDelete($updateDelete)
    {
        if (is_null($updateDelete)) {
            throw new \InvalidArgumentException('non-nullable updateDelete cannot be null');
        }
        $this->container['updateDelete'] = $updateDelete;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


