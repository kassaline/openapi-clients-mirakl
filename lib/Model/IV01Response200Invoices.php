<?php
/**
 * IV01Response200Invoices
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * IV01Response200Invoices Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IV01Response200Invoices implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IV01_Response_200_Invoices';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currencyIsoCode' => 'string',
        'dateCreated' => '\DateTime',
        'details' => '\OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesDetails[]',
        'dueDate' => '\DateTime',
        'id' => 'string',
        'invoiceId' => 'int',
        'issueDate' => '\DateTime',
        'issuingUser' => '\OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesIssuingUser',
        'payment' => '\OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesPayment',
        'shopAddress' => '\OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesShopAddress',
        'shopCorporateName' => 'string',
        'shopId' => 'int',
        'shopModel' => 'string',
        'shopName' => 'string',
        'shopOperatorInternalId' => 'string',
        'shopTaxNumber' => 'string',
        'state' => 'string',
        'totalAmountExclTaxes' => 'float',
        'totalAmountInclTaxes' => 'float',
        'totalTaxes' => '\OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesTotalTaxes[]',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'currencyIsoCode' => null,
        'dateCreated' => 'date-time',
        'details' => null,
        'dueDate' => 'date-time',
        'id' => null,
        'invoiceId' => 'int64',
        'issueDate' => 'date-time',
        'issuingUser' => null,
        'payment' => null,
        'shopAddress' => null,
        'shopCorporateName' => null,
        'shopId' => 'int64',
        'shopModel' => null,
        'shopName' => null,
        'shopOperatorInternalId' => null,
        'shopTaxNumber' => null,
        'state' => null,
        'totalAmountExclTaxes' => null,
        'totalAmountInclTaxes' => null,
        'totalTaxes' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'currencyIsoCode' => false,
        'dateCreated' => false,
        'details' => false,
        'dueDate' => false,
        'id' => false,
        'invoiceId' => false,
        'issueDate' => false,
        'issuingUser' => false,
        'payment' => false,
        'shopAddress' => false,
        'shopCorporateName' => false,
        'shopId' => false,
        'shopModel' => false,
        'shopName' => false,
        'shopOperatorInternalId' => false,
        'shopTaxNumber' => false,
        'state' => false,
        'totalAmountExclTaxes' => false,
        'totalAmountInclTaxes' => false,
        'totalTaxes' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currencyIsoCode' => 'currency_iso_code',
        'dateCreated' => 'date_created',
        'details' => 'details',
        'dueDate' => 'due_date',
        'id' => 'id',
        'invoiceId' => 'invoice_id',
        'issueDate' => 'issue_date',
        'issuingUser' => 'issuing_user',
        'payment' => 'payment',
        'shopAddress' => 'shop_address',
        'shopCorporateName' => 'shop_corporate_name',
        'shopId' => 'shop_id',
        'shopModel' => 'shop_model',
        'shopName' => 'shop_name',
        'shopOperatorInternalId' => 'shop_operator_internal_id',
        'shopTaxNumber' => 'shop_tax_number',
        'state' => 'state',
        'totalAmountExclTaxes' => 'total_amount_excl_taxes',
        'totalAmountInclTaxes' => 'total_amount_incl_taxes',
        'totalTaxes' => 'total_taxes',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currencyIsoCode' => 'setCurrencyIsoCode',
        'dateCreated' => 'setDateCreated',
        'details' => 'setDetails',
        'dueDate' => 'setDueDate',
        'id' => 'setId',
        'invoiceId' => 'setInvoiceId',
        'issueDate' => 'setIssueDate',
        'issuingUser' => 'setIssuingUser',
        'payment' => 'setPayment',
        'shopAddress' => 'setShopAddress',
        'shopCorporateName' => 'setShopCorporateName',
        'shopId' => 'setShopId',
        'shopModel' => 'setShopModel',
        'shopName' => 'setShopName',
        'shopOperatorInternalId' => 'setShopOperatorInternalId',
        'shopTaxNumber' => 'setShopTaxNumber',
        'state' => 'setState',
        'totalAmountExclTaxes' => 'setTotalAmountExclTaxes',
        'totalAmountInclTaxes' => 'setTotalAmountInclTaxes',
        'totalTaxes' => 'setTotalTaxes',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currencyIsoCode' => 'getCurrencyIsoCode',
        'dateCreated' => 'getDateCreated',
        'details' => 'getDetails',
        'dueDate' => 'getDueDate',
        'id' => 'getId',
        'invoiceId' => 'getInvoiceId',
        'issueDate' => 'getIssueDate',
        'issuingUser' => 'getIssuingUser',
        'payment' => 'getPayment',
        'shopAddress' => 'getShopAddress',
        'shopCorporateName' => 'getShopCorporateName',
        'shopId' => 'getShopId',
        'shopModel' => 'getShopModel',
        'shopName' => 'getShopName',
        'shopOperatorInternalId' => 'getShopOperatorInternalId',
        'shopTaxNumber' => 'getShopTaxNumber',
        'state' => 'getState',
        'totalAmountExclTaxes' => 'getTotalAmountExclTaxes',
        'totalAmountInclTaxes' => 'getTotalAmountInclTaxes',
        'totalTaxes' => 'getTotalTaxes',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('currencyIsoCode', $data ?? [], null);
        $this->setIfExists('dateCreated', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('dueDate', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('invoiceId', $data ?? [], null);
        $this->setIfExists('issueDate', $data ?? [], null);
        $this->setIfExists('issuingUser', $data ?? [], null);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('shopAddress', $data ?? [], null);
        $this->setIfExists('shopCorporateName', $data ?? [], null);
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('shopModel', $data ?? [], null);
        $this->setIfExists('shopName', $data ?? [], null);
        $this->setIfExists('shopOperatorInternalId', $data ?? [], null);
        $this->setIfExists('shopTaxNumber', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('totalAmountExclTaxes', $data ?? [], null);
        $this->setIfExists('totalAmountInclTaxes', $data ?? [], null);
        $this->setIfExists('totalTaxes', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currencyIsoCode
     *
     * @return string|null
     */
    public function getCurrencyIsoCode()
    {
        return $this->container['currencyIsoCode'];
    }

    /**
     * Sets currencyIsoCode
     *
     * @param string|null $currencyIsoCode The currency of the shop
     *
     * @return self
     */
    public function setCurrencyIsoCode($currencyIsoCode)
    {
        if (is_null($currencyIsoCode)) {
            throw new \InvalidArgumentException('non-nullable currencyIsoCode cannot be null');
        }
        $this->container['currencyIsoCode'] = $currencyIsoCode;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime|null $dateCreated Accounting document creation date
     *
     * @return self
     */
    public function setDateCreated($dateCreated)
    {
        if (is_null($dateCreated)) {
            throw new \InvalidArgumentException('non-nullable dateCreated cannot be null');
        }
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesDetails[]|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesDetails[]|null $details Accounting details
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param \DateTime|null $dueDate Due date for the payment of the accounting document
     *
     * @return self
     */
    public function setDueDate($dueDate)
    {
        if (is_null($dueDate)) {
            throw new \InvalidArgumentException('non-nullable dueDate cannot be null');
        }
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Accounting document identifier (use it for draft document)
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoiceId
     *
     * @return int|null
     */
    public function getInvoiceId()
    {
        return $this->container['invoiceId'];
    }

    /**
     * Sets invoiceId
     *
     * @param int|null $invoiceId Accounting document identifier (present if the accounting document is issued)
     *
     * @return self
     */
    public function setInvoiceId($invoiceId)
    {
        if (is_null($invoiceId)) {
            throw new \InvalidArgumentException('non-nullable invoiceId cannot be null');
        }
        $this->container['invoiceId'] = $invoiceId;

        return $this;
    }

    /**
     * Gets issueDate
     *
     * @return \DateTime|null
     */
    public function getIssueDate()
    {
        return $this->container['issueDate'];
    }

    /**
     * Sets issueDate
     *
     * @param \DateTime|null $issueDate Issue date of an accounting document
     *
     * @return self
     */
    public function setIssueDate($issueDate)
    {
        if (is_null($issueDate)) {
            throw new \InvalidArgumentException('non-nullable issueDate cannot be null');
        }
        $this->container['issueDate'] = $issueDate;

        return $this;
    }

    /**
     * Gets issuingUser
     *
     * @return \OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesIssuingUser|null
     */
    public function getIssuingUser()
    {
        return $this->container['issuingUser'];
    }

    /**
     * Sets issuingUser
     *
     * @param \OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesIssuingUser|null $issuingUser issuingUser
     *
     * @return self
     */
    public function setIssuingUser($issuingUser)
    {
        if (is_null($issuingUser)) {
            throw new \InvalidArgumentException('non-nullable issuingUser cannot be null');
        }
        $this->container['issuingUser'] = $issuingUser;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesPayment|null
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesPayment|null $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        if (is_null($payment)) {
            throw new \InvalidArgumentException('non-nullable payment cannot be null');
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets shopAddress
     *
     * @return \OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesShopAddress|null
     */
    public function getShopAddress()
    {
        return $this->container['shopAddress'];
    }

    /**
     * Sets shopAddress
     *
     * @param \OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesShopAddress|null $shopAddress shopAddress
     *
     * @return self
     */
    public function setShopAddress($shopAddress)
    {
        if (is_null($shopAddress)) {
            throw new \InvalidArgumentException('non-nullable shopAddress cannot be null');
        }
        $this->container['shopAddress'] = $shopAddress;

        return $this;
    }

    /**
     * Gets shopCorporateName
     *
     * @return string|null
     */
    public function getShopCorporateName()
    {
        return $this->container['shopCorporateName'];
    }

    /**
     * Sets shopCorporateName
     *
     * @param string|null $shopCorporateName Shop corporate name if it is a professional shop
     *
     * @return self
     */
    public function setShopCorporateName($shopCorporateName)
    {
        if (is_null($shopCorporateName)) {
            throw new \InvalidArgumentException('non-nullable shopCorporateName cannot be null');
        }
        $this->container['shopCorporateName'] = $shopCorporateName;

        return $this;
    }

    /**
     * Gets shopId
     *
     * @return int|null
     */
    public function getShopId()
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId
     *
     * @param int|null $shopId Shop id
     *
     * @return self
     */
    public function setShopId($shopId)
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets shopModel
     *
     * @return string|null
     */
    public function getShopModel()
    {
        return $this->container['shopModel'];
    }

    /**
     * Sets shopModel
     *
     * @param string|null $shopModel Shop model
     *
     * @return self
     */
    public function setShopModel($shopModel)
    {
        if (is_null($shopModel)) {
            throw new \InvalidArgumentException('non-nullable shopModel cannot be null');
        }
        $this->container['shopModel'] = $shopModel;

        return $this;
    }

    /**
     * Gets shopName
     *
     * @return string|null
     */
    public function getShopName()
    {
        return $this->container['shopName'];
    }

    /**
     * Sets shopName
     *
     * @param string|null $shopName Shop name
     *
     * @return self
     */
    public function setShopName($shopName)
    {
        if (is_null($shopName)) {
            throw new \InvalidArgumentException('non-nullable shopName cannot be null');
        }
        $this->container['shopName'] = $shopName;

        return $this;
    }

    /**
     * Gets shopOperatorInternalId
     *
     * @return string|null
     */
    public function getShopOperatorInternalId()
    {
        return $this->container['shopOperatorInternalId'];
    }

    /**
     * Sets shopOperatorInternalId
     *
     * @param string|null $shopOperatorInternalId Operator internal id for the shop
     *
     * @return self
     */
    public function setShopOperatorInternalId($shopOperatorInternalId)
    {
        if (is_null($shopOperatorInternalId)) {
            throw new \InvalidArgumentException('non-nullable shopOperatorInternalId cannot be null');
        }
        $this->container['shopOperatorInternalId'] = $shopOperatorInternalId;

        return $this;
    }

    /**
     * Gets shopTaxNumber
     *
     * @return string|null
     */
    public function getShopTaxNumber()
    {
        return $this->container['shopTaxNumber'];
    }

    /**
     * Sets shopTaxNumber
     *
     * @param string|null $shopTaxNumber Shop tax number if it is a professional shop
     *
     * @return self
     */
    public function setShopTaxNumber($shopTaxNumber)
    {
        if (is_null($shopTaxNumber)) {
            throw new \InvalidArgumentException('non-nullable shopTaxNumber cannot be null');
        }
        $this->container['shopTaxNumber'] = $shopTaxNumber;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state Accounting document state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets totalAmountExclTaxes
     *
     * @return float|null
     */
    public function getTotalAmountExclTaxes()
    {
        return $this->container['totalAmountExclTaxes'];
    }

    /**
     * Sets totalAmountExclTaxes
     *
     * @param float|null $totalAmountExclTaxes Total amount charged to the shop (excluding taxes)
     *
     * @return self
     */
    public function setTotalAmountExclTaxes($totalAmountExclTaxes)
    {
        if (is_null($totalAmountExclTaxes)) {
            throw new \InvalidArgumentException('non-nullable totalAmountExclTaxes cannot be null');
        }
        $this->container['totalAmountExclTaxes'] = $totalAmountExclTaxes;

        return $this;
    }

    /**
     * Gets totalAmountInclTaxes
     *
     * @return float|null
     */
    public function getTotalAmountInclTaxes()
    {
        return $this->container['totalAmountInclTaxes'];
    }

    /**
     * Sets totalAmountInclTaxes
     *
     * @param float|null $totalAmountInclTaxes Total amount charged to the shop (including taxes)
     *
     * @return self
     */
    public function setTotalAmountInclTaxes($totalAmountInclTaxes)
    {
        if (is_null($totalAmountInclTaxes)) {
            throw new \InvalidArgumentException('non-nullable totalAmountInclTaxes cannot be null');
        }
        $this->container['totalAmountInclTaxes'] = $totalAmountInclTaxes;

        return $this;
    }

    /**
     * Gets totalTaxes
     *
     * @return \OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesTotalTaxes[]|null
     */
    public function getTotalTaxes()
    {
        return $this->container['totalTaxes'];
    }

    /**
     * Sets totalTaxes
     *
     * @param \OpenAPI\Client\Mirakl\Model\IV01Response200InvoicesTotalTaxes[]|null $totalTaxes Total taxes
     *
     * @return self
     */
    public function setTotalTaxes($totalTaxes)
    {
        if (is_null($totalTaxes)) {
            throw new \InvalidArgumentException('non-nullable totalTaxes cannot be null');
        }
        $this->container['totalTaxes'] = $totalTaxes;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Accounting document type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


