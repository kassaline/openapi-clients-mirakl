<?php
/**
 * TL02Response200DataEntities
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * TL02Response200DataEntities Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TL02Response200DataEntities implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TL02_Response_200_Data_Entities';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel' => '\OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesChannel',
        'debit' => '\OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesDebit',
        'domain' => 'string',
        'fee' => '\OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesFee',
        'manualAccountingDocument' => '\OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesManualAccountingDocument',
        'order' => '\OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesOrder',
        'orderFee' => '\OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesOrderFee',
        'orderLine' => '\OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesOrderLine',
        'orderTax' => '\OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesOrderTax',
        'refund' => '\OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesRefund',
        'shipment' => '\OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesShipment',
        'shopTax' => '\OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesShopTax',
        'transactionInfo' => '\OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesTransactionInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel' => null,
        'debit' => null,
        'domain' => null,
        'fee' => null,
        'manualAccountingDocument' => null,
        'order' => null,
        'orderFee' => null,
        'orderLine' => null,
        'orderTax' => null,
        'refund' => null,
        'shipment' => null,
        'shopTax' => null,
        'transactionInfo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'channel' => false,
        'debit' => false,
        'domain' => false,
        'fee' => false,
        'manualAccountingDocument' => false,
        'order' => false,
        'orderFee' => false,
        'orderLine' => false,
        'orderTax' => false,
        'refund' => false,
        'shipment' => false,
        'shopTax' => false,
        'transactionInfo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel' => 'channel',
        'debit' => 'debit',
        'domain' => 'domain',
        'fee' => 'fee',
        'manualAccountingDocument' => 'manual_accounting_document',
        'order' => 'order',
        'orderFee' => 'order_fee',
        'orderLine' => 'order_line',
        'orderTax' => 'order_tax',
        'refund' => 'refund',
        'shipment' => 'shipment',
        'shopTax' => 'shop_tax',
        'transactionInfo' => 'transaction_info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel' => 'setChannel',
        'debit' => 'setDebit',
        'domain' => 'setDomain',
        'fee' => 'setFee',
        'manualAccountingDocument' => 'setManualAccountingDocument',
        'order' => 'setOrder',
        'orderFee' => 'setOrderFee',
        'orderLine' => 'setOrderLine',
        'orderTax' => 'setOrderTax',
        'refund' => 'setRefund',
        'shipment' => 'setShipment',
        'shopTax' => 'setShopTax',
        'transactionInfo' => 'setTransactionInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel' => 'getChannel',
        'debit' => 'getDebit',
        'domain' => 'getDomain',
        'fee' => 'getFee',
        'manualAccountingDocument' => 'getManualAccountingDocument',
        'order' => 'getOrder',
        'orderFee' => 'getOrderFee',
        'orderLine' => 'getOrderLine',
        'orderTax' => 'getOrderTax',
        'refund' => 'getRefund',
        'shipment' => 'getShipment',
        'shopTax' => 'getShopTax',
        'transactionInfo' => 'getTransactionInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('debit', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('fee', $data ?? [], null);
        $this->setIfExists('manualAccountingDocument', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('orderFee', $data ?? [], null);
        $this->setIfExists('orderLine', $data ?? [], null);
        $this->setIfExists('orderTax', $data ?? [], null);
        $this->setIfExists('refund', $data ?? [], null);
        $this->setIfExists('shipment', $data ?? [], null);
        $this->setIfExists('shopTax', $data ?? [], null);
        $this->setIfExists('transactionInfo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel
     *
     * @return \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesChannel|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesChannel|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets debit
     *
     * @return \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesDebit|null
     */
    public function getDebit()
    {
        return $this->container['debit'];
    }

    /**
     * Sets debit
     *
     * @param \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesDebit|null $debit debit
     *
     * @return self
     */
    public function setDebit($debit)
    {
        if (is_null($debit)) {
            throw new \InvalidArgumentException('non-nullable debit cannot be null');
        }
        $this->container['debit'] = $debit;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain The domain of the entities related to the transaction line (PRODUCT or SERVICE)
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesFee|null
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesFee|null $fee fee
     *
     * @return self
     */
    public function setFee($fee)
    {
        if (is_null($fee)) {
            throw new \InvalidArgumentException('non-nullable fee cannot be null');
        }
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets manualAccountingDocument
     *
     * @return \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesManualAccountingDocument|null
     */
    public function getManualAccountingDocument()
    {
        return $this->container['manualAccountingDocument'];
    }

    /**
     * Sets manualAccountingDocument
     *
     * @param \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesManualAccountingDocument|null $manualAccountingDocument manualAccountingDocument
     *
     * @return self
     */
    public function setManualAccountingDocument($manualAccountingDocument)
    {
        if (is_null($manualAccountingDocument)) {
            throw new \InvalidArgumentException('non-nullable manualAccountingDocument cannot be null');
        }
        $this->container['manualAccountingDocument'] = $manualAccountingDocument;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesOrder|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesOrder|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets orderFee
     *
     * @return \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesOrderFee|null
     */
    public function getOrderFee()
    {
        return $this->container['orderFee'];
    }

    /**
     * Sets orderFee
     *
     * @param \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesOrderFee|null $orderFee orderFee
     *
     * @return self
     */
    public function setOrderFee($orderFee)
    {
        if (is_null($orderFee)) {
            throw new \InvalidArgumentException('non-nullable orderFee cannot be null');
        }
        $this->container['orderFee'] = $orderFee;

        return $this;
    }

    /**
     * Gets orderLine
     *
     * @return \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesOrderLine|null
     */
    public function getOrderLine()
    {
        return $this->container['orderLine'];
    }

    /**
     * Sets orderLine
     *
     * @param \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesOrderLine|null $orderLine orderLine
     *
     * @return self
     */
    public function setOrderLine($orderLine)
    {
        if (is_null($orderLine)) {
            throw new \InvalidArgumentException('non-nullable orderLine cannot be null');
        }
        $this->container['orderLine'] = $orderLine;

        return $this;
    }

    /**
     * Gets orderTax
     *
     * @return \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesOrderTax|null
     */
    public function getOrderTax()
    {
        return $this->container['orderTax'];
    }

    /**
     * Sets orderTax
     *
     * @param \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesOrderTax|null $orderTax orderTax
     *
     * @return self
     */
    public function setOrderTax($orderTax)
    {
        if (is_null($orderTax)) {
            throw new \InvalidArgumentException('non-nullable orderTax cannot be null');
        }
        $this->container['orderTax'] = $orderTax;

        return $this;
    }

    /**
     * Gets refund
     *
     * @return \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesRefund|null
     */
    public function getRefund()
    {
        return $this->container['refund'];
    }

    /**
     * Sets refund
     *
     * @param \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesRefund|null $refund refund
     *
     * @return self
     */
    public function setRefund($refund)
    {
        if (is_null($refund)) {
            throw new \InvalidArgumentException('non-nullable refund cannot be null');
        }
        $this->container['refund'] = $refund;

        return $this;
    }

    /**
     * Gets shipment
     *
     * @return \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesShipment|null
     */
    public function getShipment()
    {
        return $this->container['shipment'];
    }

    /**
     * Sets shipment
     *
     * @param \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesShipment|null $shipment shipment
     *
     * @return self
     */
    public function setShipment($shipment)
    {
        if (is_null($shipment)) {
            throw new \InvalidArgumentException('non-nullable shipment cannot be null');
        }
        $this->container['shipment'] = $shipment;

        return $this;
    }

    /**
     * Gets shopTax
     *
     * @return \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesShopTax|null
     */
    public function getShopTax()
    {
        return $this->container['shopTax'];
    }

    /**
     * Sets shopTax
     *
     * @param \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesShopTax|null $shopTax shopTax
     *
     * @return self
     */
    public function setShopTax($shopTax)
    {
        if (is_null($shopTax)) {
            throw new \InvalidArgumentException('non-nullable shopTax cannot be null');
        }
        $this->container['shopTax'] = $shopTax;

        return $this;
    }

    /**
     * Gets transactionInfo
     *
     * @return \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesTransactionInfo|null
     */
    public function getTransactionInfo()
    {
        return $this->container['transactionInfo'];
    }

    /**
     * Sets transactionInfo
     *
     * @param \OpenAPI\Client\Mirakl\Model\TL02Response200DataEntitiesTransactionInfo|null $transactionInfo transactionInfo
     *
     * @return self
     */
    public function setTransactionInfo($transactionInfo)
    {
        if (is_null($transactionInfo)) {
            throw new \InvalidArgumentException('non-nullable transactionInfo cannot be null');
        }
        $this->container['transactionInfo'] = $transactionInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


