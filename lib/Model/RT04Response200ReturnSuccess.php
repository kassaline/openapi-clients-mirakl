<?php
/**
 * RT04Response200ReturnSuccess
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * RT04Response200ReturnSuccess Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RT04Response200ReturnSuccess implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RT04_Response_200_ReturnSuccess';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dateCreated' => '\DateTime',
        'description' => 'string',
        'documents' => '\OpenAPI\Client\Mirakl\Model\RT04Response200ReturnSuccessDocuments[]',
        'id' => 'string',
        'labelUrl' => 'string',
        'lastUpdated' => '\DateTime',
        'methodCode' => 'string',
        'orderCommercialId' => 'string',
        'orderId' => 'string',
        'reasonCode' => 'string',
        'rejectionReasonCode' => 'string',
        'returnAddress' => '\OpenAPI\Client\Mirakl\Model\RT04Response200ReturnSuccessReturnAddress',
        'returnLines' => '\OpenAPI\Client\Mirakl\Model\RT04Response200ReturnSuccessReturnLines[]',
        'rma' => 'string',
        'state' => 'string',
        'tracking' => '\OpenAPI\Client\Mirakl\Model\RT04Response200ReturnSuccessTracking'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dateCreated' => 'date-time',
        'description' => null,
        'documents' => null,
        'id' => null,
        'labelUrl' => null,
        'lastUpdated' => 'date-time',
        'methodCode' => null,
        'orderCommercialId' => null,
        'orderId' => null,
        'reasonCode' => null,
        'rejectionReasonCode' => null,
        'returnAddress' => null,
        'returnLines' => null,
        'rma' => null,
        'state' => null,
        'tracking' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dateCreated' => false,
        'description' => false,
        'documents' => false,
        'id' => false,
        'labelUrl' => false,
        'lastUpdated' => false,
        'methodCode' => false,
        'orderCommercialId' => false,
        'orderId' => false,
        'reasonCode' => false,
        'rejectionReasonCode' => false,
        'returnAddress' => false,
        'returnLines' => false,
        'rma' => false,
        'state' => false,
        'tracking' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dateCreated' => 'date_created',
        'description' => 'description',
        'documents' => 'documents',
        'id' => 'id',
        'labelUrl' => 'label_url',
        'lastUpdated' => 'last_updated',
        'methodCode' => 'method_code',
        'orderCommercialId' => 'order_commercial_id',
        'orderId' => 'order_id',
        'reasonCode' => 'reason_code',
        'rejectionReasonCode' => 'rejection_reason_code',
        'returnAddress' => 'return_address',
        'returnLines' => 'return_lines',
        'rma' => 'rma',
        'state' => 'state',
        'tracking' => 'tracking'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dateCreated' => 'setDateCreated',
        'description' => 'setDescription',
        'documents' => 'setDocuments',
        'id' => 'setId',
        'labelUrl' => 'setLabelUrl',
        'lastUpdated' => 'setLastUpdated',
        'methodCode' => 'setMethodCode',
        'orderCommercialId' => 'setOrderCommercialId',
        'orderId' => 'setOrderId',
        'reasonCode' => 'setReasonCode',
        'rejectionReasonCode' => 'setRejectionReasonCode',
        'returnAddress' => 'setReturnAddress',
        'returnLines' => 'setReturnLines',
        'rma' => 'setRma',
        'state' => 'setState',
        'tracking' => 'setTracking'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dateCreated' => 'getDateCreated',
        'description' => 'getDescription',
        'documents' => 'getDocuments',
        'id' => 'getId',
        'labelUrl' => 'getLabelUrl',
        'lastUpdated' => 'getLastUpdated',
        'methodCode' => 'getMethodCode',
        'orderCommercialId' => 'getOrderCommercialId',
        'orderId' => 'getOrderId',
        'reasonCode' => 'getReasonCode',
        'rejectionReasonCode' => 'getRejectionReasonCode',
        'returnAddress' => 'getReturnAddress',
        'returnLines' => 'getReturnLines',
        'rma' => 'getRma',
        'state' => 'getState',
        'tracking' => 'getTracking'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('dateCreated', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('labelUrl', $data ?? [], null);
        $this->setIfExists('lastUpdated', $data ?? [], null);
        $this->setIfExists('methodCode', $data ?? [], null);
        $this->setIfExists('orderCommercialId', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('reasonCode', $data ?? [], null);
        $this->setIfExists('rejectionReasonCode', $data ?? [], null);
        $this->setIfExists('returnAddress', $data ?? [], null);
        $this->setIfExists('returnLines', $data ?? [], null);
        $this->setIfExists('rma', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('tracking', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dateCreated
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime|null $dateCreated Return creation date
     *
     * @return self
     */
    public function setDateCreated($dateCreated)
    {
        if (is_null($dateCreated)) {
            throw new \InvalidArgumentException('non-nullable dateCreated cannot be null');
        }
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \OpenAPI\Client\Mirakl\Model\RT04Response200ReturnSuccessDocuments[]|null
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \OpenAPI\Client\Mirakl\Model\RT04Response200ReturnSuccessDocuments[]|null $documents Return documents
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        if (is_null($documents)) {
            throw new \InvalidArgumentException('non-nullable documents cannot be null');
        }
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Return id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets labelUrl
     *
     * @return string|null
     */
    public function getLabelUrl()
    {
        return $this->container['labelUrl'];
    }

    /**
     * Sets labelUrl
     *
     * @param string|null $labelUrl Label URL
     *
     * @return self
     */
    public function setLabelUrl($labelUrl)
    {
        if (is_null($labelUrl)) {
            throw new \InvalidArgumentException('non-nullable labelUrl cannot be null');
        }
        $this->container['labelUrl'] = $labelUrl;

        return $this;
    }

    /**
     * Gets lastUpdated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['lastUpdated'];
    }

    /**
     * Sets lastUpdated
     *
     * @param \DateTime|null $lastUpdated Return last updated date
     *
     * @return self
     */
    public function setLastUpdated($lastUpdated)
    {
        if (is_null($lastUpdated)) {
            throw new \InvalidArgumentException('non-nullable lastUpdated cannot be null');
        }
        $this->container['lastUpdated'] = $lastUpdated;

        return $this;
    }

    /**
     * Gets methodCode
     *
     * @return string|null
     */
    public function getMethodCode()
    {
        return $this->container['methodCode'];
    }

    /**
     * Sets methodCode
     *
     * @param string|null $methodCode Return method code
     *
     * @return self
     */
    public function setMethodCode($methodCode)
    {
        if (is_null($methodCode)) {
            throw new \InvalidArgumentException('non-nullable methodCode cannot be null');
        }
        $this->container['methodCode'] = $methodCode;

        return $this;
    }

    /**
     * Gets orderCommercialId
     *
     * @return string|null
     */
    public function getOrderCommercialId()
    {
        return $this->container['orderCommercialId'];
    }

    /**
     * Sets orderCommercialId
     *
     * @param string|null $orderCommercialId Order commercial id
     *
     * @return self
     */
    public function setOrderCommercialId($orderCommercialId)
    {
        if (is_null($orderCommercialId)) {
            throw new \InvalidArgumentException('non-nullable orderCommercialId cannot be null');
        }
        $this->container['orderCommercialId'] = $orderCommercialId;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string|null $orderId Order id
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets reasonCode
     *
     * @return string|null
     */
    public function getReasonCode()
    {
        return $this->container['reasonCode'];
    }

    /**
     * Sets reasonCode
     *
     * @param string|null $reasonCode Return reason code
     *
     * @return self
     */
    public function setReasonCode($reasonCode)
    {
        if (is_null($reasonCode)) {
            throw new \InvalidArgumentException('non-nullable reasonCode cannot be null');
        }
        $this->container['reasonCode'] = $reasonCode;

        return $this;
    }

    /**
     * Gets rejectionReasonCode
     *
     * @return string|null
     */
    public function getRejectionReasonCode()
    {
        return $this->container['rejectionReasonCode'];
    }

    /**
     * Sets rejectionReasonCode
     *
     * @param string|null $rejectionReasonCode Return rejection reason code
     *
     * @return self
     */
    public function setRejectionReasonCode($rejectionReasonCode)
    {
        if (is_null($rejectionReasonCode)) {
            throw new \InvalidArgumentException('non-nullable rejectionReasonCode cannot be null');
        }
        $this->container['rejectionReasonCode'] = $rejectionReasonCode;

        return $this;
    }

    /**
     * Gets returnAddress
     *
     * @return \OpenAPI\Client\Mirakl\Model\RT04Response200ReturnSuccessReturnAddress|null
     */
    public function getReturnAddress()
    {
        return $this->container['returnAddress'];
    }

    /**
     * Sets returnAddress
     *
     * @param \OpenAPI\Client\Mirakl\Model\RT04Response200ReturnSuccessReturnAddress|null $returnAddress returnAddress
     *
     * @return self
     */
    public function setReturnAddress($returnAddress)
    {
        if (is_null($returnAddress)) {
            throw new \InvalidArgumentException('non-nullable returnAddress cannot be null');
        }
        $this->container['returnAddress'] = $returnAddress;

        return $this;
    }

    /**
     * Gets returnLines
     *
     * @return \OpenAPI\Client\Mirakl\Model\RT04Response200ReturnSuccessReturnLines[]|null
     */
    public function getReturnLines()
    {
        return $this->container['returnLines'];
    }

    /**
     * Sets returnLines
     *
     * @param \OpenAPI\Client\Mirakl\Model\RT04Response200ReturnSuccessReturnLines[]|null $returnLines Return lines
     *
     * @return self
     */
    public function setReturnLines($returnLines)
    {
        if (is_null($returnLines)) {
            throw new \InvalidArgumentException('non-nullable returnLines cannot be null');
        }
        $this->container['returnLines'] = $returnLines;

        return $this;
    }

    /**
     * Gets rma
     *
     * @return string|null
     */
    public function getRma()
    {
        return $this->container['rma'];
    }

    /**
     * Sets rma
     *
     * @param string|null $rma Return RMA
     *
     * @return self
     */
    public function setRma($rma)
    {
        if (is_null($rma)) {
            throw new \InvalidArgumentException('non-nullable rma cannot be null');
        }
        $this->container['rma'] = $rma;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state Return state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets tracking
     *
     * @return \OpenAPI\Client\Mirakl\Model\RT04Response200ReturnSuccessTracking|null
     */
    public function getTracking()
    {
        return $this->container['tracking'];
    }

    /**
     * Sets tracking
     *
     * @param \OpenAPI\Client\Mirakl\Model\RT04Response200ReturnSuccessTracking|null $tracking tracking
     *
     * @return self
     */
    public function setTracking($tracking)
    {
        if (is_null($tracking)) {
            throw new \InvalidArgumentException('non-nullable tracking cannot be null');
        }
        $this->container['tracking'] = $tracking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


