<?php
/**
 * OrderLineResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Connect APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * OrderLineResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderLineResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderLineResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adjustments' => '\OpenAPI\Client\Mirakl\Model\Adjustment[]',
        'canCancel' => 'bool',
        'canRefund' => 'bool',
        'channelOrderLineId' => 'string',
        'customAttributes' => '\OpenAPI\Client\Mirakl\Model\CustomAttributeResponse[]',
        'id' => 'string',
        'price' => '\OpenAPI\Client\Mirakl\Model\Money',
        'product' => '\OpenAPI\Client\Mirakl\Model\OrderProduct',
        'quantity' => 'int',
        'shippingTaxes' => '\OpenAPI\Client\Mirakl\Model\Tax[]',
        'status' => 'string',
        'statusReason' => 'string',
        'taxes' => '\OpenAPI\Client\Mirakl\Model\Tax[]',
        'totalShippingPrice' => '\OpenAPI\Client\Mirakl\Model\Money'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'adjustments' => null,
        'canCancel' => null,
        'canRefund' => null,
        'channelOrderLineId' => null,
        'customAttributes' => null,
        'id' => null,
        'price' => null,
        'product' => null,
        'quantity' => null,
        'shippingTaxes' => null,
        'status' => null,
        'statusReason' => null,
        'taxes' => null,
        'totalShippingPrice' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'adjustments' => false,
        'canCancel' => false,
        'canRefund' => false,
        'channelOrderLineId' => false,
        'customAttributes' => false,
        'id' => false,
        'price' => false,
        'product' => false,
        'quantity' => false,
        'shippingTaxes' => false,
        'status' => false,
        'statusReason' => false,
        'taxes' => false,
        'totalShippingPrice' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adjustments' => 'adjustments',
        'canCancel' => 'can_cancel',
        'canRefund' => 'can_refund',
        'channelOrderLineId' => 'channel_order_line_id',
        'customAttributes' => 'custom_attributes',
        'id' => 'id',
        'price' => 'price',
        'product' => 'product',
        'quantity' => 'quantity',
        'shippingTaxes' => 'shipping_taxes',
        'status' => 'status',
        'statusReason' => 'status_reason',
        'taxes' => 'taxes',
        'totalShippingPrice' => 'total_shipping_price'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adjustments' => 'setAdjustments',
        'canCancel' => 'setCanCancel',
        'canRefund' => 'setCanRefund',
        'channelOrderLineId' => 'setChannelOrderLineId',
        'customAttributes' => 'setCustomAttributes',
        'id' => 'setId',
        'price' => 'setPrice',
        'product' => 'setProduct',
        'quantity' => 'setQuantity',
        'shippingTaxes' => 'setShippingTaxes',
        'status' => 'setStatus',
        'statusReason' => 'setStatusReason',
        'taxes' => 'setTaxes',
        'totalShippingPrice' => 'setTotalShippingPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adjustments' => 'getAdjustments',
        'canCancel' => 'getCanCancel',
        'canRefund' => 'getCanRefund',
        'channelOrderLineId' => 'getChannelOrderLineId',
        'customAttributes' => 'getCustomAttributes',
        'id' => 'getId',
        'price' => 'getPrice',
        'product' => 'getProduct',
        'quantity' => 'getQuantity',
        'shippingTaxes' => 'getShippingTaxes',
        'status' => 'getStatus',
        'statusReason' => 'getStatusReason',
        'taxes' => 'getTaxes',
        'totalShippingPrice' => 'getTotalShippingPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('adjustments', $data ?? [], null);
        $this->setIfExists('canCancel', $data ?? [], null);
        $this->setIfExists('canRefund', $data ?? [], null);
        $this->setIfExists('channelOrderLineId', $data ?? [], null);
        $this->setIfExists('customAttributes', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('shippingTaxes', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('statusReason', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('totalShippingPrice', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adjustments
     *
     * @return \OpenAPI\Client\Mirakl\Model\Adjustment[]|null
     */
    public function getAdjustments()
    {
        return $this->container['adjustments'];
    }

    /**
     * Sets adjustments
     *
     * @param \OpenAPI\Client\Mirakl\Model\Adjustment[]|null $adjustments Cancelation or refund details related to an order line
     *
     * @return self
     */
    public function setAdjustments($adjustments)
    {
        if (is_null($adjustments)) {
            throw new \InvalidArgumentException('non-nullable adjustments cannot be null');
        }
        $this->container['adjustments'] = $adjustments;

        return $this;
    }

    /**
     * Gets canCancel
     *
     * @return bool|null
     */
    public function getCanCancel()
    {
        return $this->container['canCancel'];
    }

    /**
     * Sets canCancel
     *
     * @param bool|null $canCancel Indicate whether the order line can be cancelled
     *
     * @return self
     */
    public function setCanCancel($canCancel)
    {
        if (is_null($canCancel)) {
            throw new \InvalidArgumentException('non-nullable canCancel cannot be null');
        }
        $this->container['canCancel'] = $canCancel;

        return $this;
    }

    /**
     * Gets canRefund
     *
     * @return bool|null
     */
    public function getCanRefund()
    {
        return $this->container['canRefund'];
    }

    /**
     * Sets canRefund
     *
     * @param bool|null $canRefund Indicate whether the order line can be refunded
     *
     * @return self
     */
    public function setCanRefund($canRefund)
    {
        if (is_null($canRefund)) {
            throw new \InvalidArgumentException('non-nullable canRefund cannot be null');
        }
        $this->container['canRefund'] = $canRefund;

        return $this;
    }

    /**
     * Gets channelOrderLineId
     *
     * @return string|null
     */
    public function getChannelOrderLineId()
    {
        return $this->container['channelOrderLineId'];
    }

    /**
     * Sets channelOrderLineId
     *
     * @param string|null $channelOrderLineId Order line identifier on the sales channel. This identifier is not guaranteed to be unique as different channels can use the same identifier.
     *
     * @return self
     */
    public function setChannelOrderLineId($channelOrderLineId)
    {
        if (is_null($channelOrderLineId)) {
            throw new \InvalidArgumentException('non-nullable channelOrderLineId cannot be null');
        }
        $this->container['channelOrderLineId'] = $channelOrderLineId;

        return $this;
    }

    /**
     * Gets customAttributes
     *
     * @return \OpenAPI\Client\Mirakl\Model\CustomAttributeResponse[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['customAttributes'];
    }

    /**
     * Sets customAttributes
     *
     * @param \OpenAPI\Client\Mirakl\Model\CustomAttributeResponse[]|null $customAttributes Custom attributes
     *
     * @return self
     */
    public function setCustomAttributes($customAttributes)
    {
        if (is_null($customAttributes)) {
            throw new \InvalidArgumentException('non-nullable customAttributes cannot be null');
        }
        $this->container['customAttributes'] = $customAttributes;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique order line identifier used by Mirakl Connect. This identifier can be used as a primary key, but it must not be shared with final users.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \OpenAPI\Client\Mirakl\Model\Money|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \OpenAPI\Client\Mirakl\Model\Money|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \OpenAPI\Client\Mirakl\Model\OrderProduct|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \OpenAPI\Client\Mirakl\Model\OrderProduct|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Quantity of the ordered product after cancelations. Refunds and rejects do not change this field.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets shippingTaxes
     *
     * @return \OpenAPI\Client\Mirakl\Model\Tax[]|null
     */
    public function getShippingTaxes()
    {
        return $this->container['shippingTaxes'];
    }

    /**
     * Sets shippingTaxes
     *
     * @param \OpenAPI\Client\Mirakl\Model\Tax[]|null $shippingTaxes Taxes applied to shipping prices
     *
     * @return self
     */
    public function setShippingTaxes($shippingTaxes)
    {
        if (is_null($shippingTaxes)) {
            throw new \InvalidArgumentException('non-nullable shippingTaxes cannot be null');
        }
        $this->container['shippingTaxes'] = $shippingTaxes;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Order line status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusReason
     *
     * @return string|null
     */
    public function getStatusReason()
    {
        return $this->container['statusReason'];
    }

    /**
     * Sets statusReason
     *
     * @param string|null $statusReason Additional reason about the order line status. Availability depends on the order line status.
     *
     * @return self
     */
    public function setStatusReason($statusReason)
    {
        if (is_null($statusReason)) {
            throw new \InvalidArgumentException('non-nullable statusReason cannot be null');
        }
        $this->container['statusReason'] = $statusReason;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \OpenAPI\Client\Mirakl\Model\Tax[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \OpenAPI\Client\Mirakl\Model\Tax[]|null $taxes Taxes applied to product prices
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets totalShippingPrice
     *
     * @return \OpenAPI\Client\Mirakl\Model\Money|null
     */
    public function getTotalShippingPrice()
    {
        return $this->container['totalShippingPrice'];
    }

    /**
     * Sets totalShippingPrice
     *
     * @param \OpenAPI\Client\Mirakl\Model\Money|null $totalShippingPrice totalShippingPrice
     *
     * @return self
     */
    public function setTotalShippingPrice($totalShippingPrice)
    {
        if (is_null($totalShippingPrice)) {
            throw new \InvalidArgumentException('non-nullable totalShippingPrice cannot be null');
        }
        $this->container['totalShippingPrice'] = $totalShippingPrice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


