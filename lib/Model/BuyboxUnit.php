<?php
/**
 * BuyboxUnit
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * The version of the OpenAPI document: 2.18.3
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * BuyboxUnit Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BuyboxUnit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BuyboxUnit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'buyboxRank' => 'float',
        'seller' => 'string',
        'price' => 'float',
        'deliveryTimeMin' => 'float',
        'deliveryTimeMax' => 'float',
        'shippingRate' => 'float',
        'fulfillmentType' => '\OpenAPI\Client\Mirakl\Model\FulfillmentType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'buyboxRank' => 'double',
        'seller' => null,
        'price' => 'double',
        'deliveryTimeMin' => 'double',
        'deliveryTimeMax' => 'double',
        'shippingRate' => 'double',
        'fulfillmentType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'buyboxRank' => false,
        'seller' => false,
        'price' => false,
        'deliveryTimeMin' => false,
        'deliveryTimeMax' => false,
        'shippingRate' => false,
        'fulfillmentType' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buyboxRank' => 'buybox_rank',
        'seller' => 'seller',
        'price' => 'price',
        'deliveryTimeMin' => 'delivery_time_min',
        'deliveryTimeMax' => 'delivery_time_max',
        'shippingRate' => 'shipping_rate',
        'fulfillmentType' => 'fulfillment_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buyboxRank' => 'setBuyboxRank',
        'seller' => 'setSeller',
        'price' => 'setPrice',
        'deliveryTimeMin' => 'setDeliveryTimeMin',
        'deliveryTimeMax' => 'setDeliveryTimeMax',
        'shippingRate' => 'setShippingRate',
        'fulfillmentType' => 'setFulfillmentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buyboxRank' => 'getBuyboxRank',
        'seller' => 'getSeller',
        'price' => 'getPrice',
        'deliveryTimeMin' => 'getDeliveryTimeMin',
        'deliveryTimeMax' => 'getDeliveryTimeMax',
        'shippingRate' => 'getShippingRate',
        'fulfillmentType' => 'getFulfillmentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('buyboxRank', $data ?? [], null);
        $this->setIfExists('seller', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('deliveryTimeMin', $data ?? [], null);
        $this->setIfExists('deliveryTimeMax', $data ?? [], null);
        $this->setIfExists('shippingRate', $data ?? [], null);
        $this->setIfExists('fulfillmentType', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['buyboxRank'] === null) {
            $invalidProperties[] = "'buyboxRank' can't be null";
        }
        if ($this->container['seller'] === null) {
            $invalidProperties[] = "'seller' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['deliveryTimeMin'] === null) {
            $invalidProperties[] = "'deliveryTimeMin' can't be null";
        }
        if ($this->container['deliveryTimeMax'] === null) {
            $invalidProperties[] = "'deliveryTimeMax' can't be null";
        }
        if ($this->container['shippingRate'] === null) {
            $invalidProperties[] = "'shippingRate' can't be null";
        }
        if ($this->container['fulfillmentType'] === null) {
            $invalidProperties[] = "'fulfillmentType' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets buyboxRank
     *
     * @return float
     */
    public function getBuyboxRank()
    {
        return $this->container['buyboxRank'];
    }

    /**
     * Sets buyboxRank
     *
     * @param float $buyboxRank The rank of the offer in the buybox
     *
     * @return self
     */
    public function setBuyboxRank($buyboxRank)
    {
        if (is_null($buyboxRank)) {
            throw new \InvalidArgumentException('non-nullable buyboxRank cannot be null');
        }
        $this->container['buyboxRank'] = $buyboxRank;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return string
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param string $seller The seller name
     *
     * @return self
     */
    public function setSeller($seller)
    {
        if (is_null($seller)) {
            throw new \InvalidArgumentException('non-nullable seller cannot be null');
        }
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price The price listed in the marketplace in the currency of the storefront
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets deliveryTimeMin
     *
     * @return float
     */
    public function getDeliveryTimeMin()
    {
        return $this->container['deliveryTimeMin'];
    }

    /**
     * Sets deliveryTimeMin
     *
     * @param float $deliveryTimeMin deliveryTimeMin
     *
     * @return self
     */
    public function setDeliveryTimeMin($deliveryTimeMin)
    {
        if (is_null($deliveryTimeMin)) {
            throw new \InvalidArgumentException('non-nullable deliveryTimeMin cannot be null');
        }
        $this->container['deliveryTimeMin'] = $deliveryTimeMin;

        return $this;
    }

    /**
     * Gets deliveryTimeMax
     *
     * @return float
     */
    public function getDeliveryTimeMax()
    {
        return $this->container['deliveryTimeMax'];
    }

    /**
     * Sets deliveryTimeMax
     *
     * @param float $deliveryTimeMax deliveryTimeMax
     *
     * @return self
     */
    public function setDeliveryTimeMax($deliveryTimeMax)
    {
        if (is_null($deliveryTimeMax)) {
            throw new \InvalidArgumentException('non-nullable deliveryTimeMax cannot be null');
        }
        $this->container['deliveryTimeMax'] = $deliveryTimeMax;

        return $this;
    }

    /**
     * Gets shippingRate
     *
     * @return float
     */
    public function getShippingRate()
    {
        return $this->container['shippingRate'];
    }

    /**
     * Sets shippingRate
     *
     * @param float $shippingRate shippingRate
     *
     * @return self
     */
    public function setShippingRate($shippingRate)
    {
        if (is_null($shippingRate)) {
            throw new \InvalidArgumentException('non-nullable shippingRate cannot be null');
        }
        $this->container['shippingRate'] = $shippingRate;

        return $this;
    }

    /**
     * Gets fulfillmentType
     *
     * @return \OpenAPI\Client\Mirakl\Model\FulfillmentType
     */
    public function getFulfillmentType()
    {
        return $this->container['fulfillmentType'];
    }

    /**
     * Sets fulfillmentType
     *
     * @param \OpenAPI\Client\Mirakl\Model\FulfillmentType $fulfillmentType fulfillmentType
     *
     * @return self
     */
    public function setFulfillmentType($fulfillmentType)
    {
        if (is_null($fulfillmentType)) {
            throw new \InvalidArgumentException('non-nullable fulfillmentType cannot be null');
        }
        $this->container['fulfillmentType'] = $fulfillmentType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


