<?php
/**
 * ImportFilesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * The version of the OpenAPI document: 2.18.3
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Mirakl\ApiException;
use OpenAPI\Client\Mirakl\Configuration;
use OpenAPI\Client\Mirakl\HeaderSelector;
use OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * ImportFilesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ImportFilesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createInventoryCommandImportFile' => [
            'application/json',
        ],
        'createInventoryFeedImportFile' => [
            'application/json',
        ],
        'createOrderCommandImportFile' => [
            'application/json',
        ],
        'getInventoryCommandImportFile' => [
            'application/json',
        ],
        'getInventoryCommandImportFiles' => [
            'application/json',
        ],
        'getInventoryFeedImportFile' => [
            'application/json',
        ],
        'getInventoryFeedImportFiles' => [
            'application/json',
        ],
        'getOrderCommandImportFile' => [
            'application/json',
        ],
        'getOrderCommandImportFiles' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createInventoryCommandImportFile
     *
     * Add an INVENTORY_COMMAND file URL
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileInventoryCommandPostRequest $importFileInventoryCommandPostRequest importFileInventoryCommandPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInventoryCommandImportFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function createInventoryCommandImportFile($storefront, $importFileInventoryCommandPostRequest, string $contentType = self::contentTypes['createInventoryCommandImportFile'][0])
    {
        list($response) = $this->createInventoryCommandImportFileWithHttpInfo($storefront, $importFileInventoryCommandPostRequest, $contentType);
        return $response;
    }

    /**
     * Operation createInventoryCommandImportFileWithHttpInfo
     *
     * Add an INVENTORY_COMMAND file URL
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileInventoryCommandPostRequest $importFileInventoryCommandPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInventoryCommandImportFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInventoryCommandImportFileWithHttpInfo($storefront, $importFileInventoryCommandPostRequest, string $contentType = self::contentTypes['createInventoryCommandImportFile'][0])
    {
        $request = $this->createInventoryCommandImportFileRequest($storefront, $importFileInventoryCommandPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInventoryCommandImportFileAsync
     *
     * Add an INVENTORY_COMMAND file URL
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileInventoryCommandPostRequest $importFileInventoryCommandPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInventoryCommandImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInventoryCommandImportFileAsync($storefront, $importFileInventoryCommandPostRequest, string $contentType = self::contentTypes['createInventoryCommandImportFile'][0])
    {
        return $this->createInventoryCommandImportFileAsyncWithHttpInfo($storefront, $importFileInventoryCommandPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInventoryCommandImportFileAsyncWithHttpInfo
     *
     * Add an INVENTORY_COMMAND file URL
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileInventoryCommandPostRequest $importFileInventoryCommandPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInventoryCommandImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInventoryCommandImportFileAsyncWithHttpInfo($storefront, $importFileInventoryCommandPostRequest, string $contentType = self::contentTypes['createInventoryCommandImportFile'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand';
        $request = $this->createInventoryCommandImportFileRequest($storefront, $importFileInventoryCommandPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInventoryCommandImportFile'
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileInventoryCommandPostRequest $importFileInventoryCommandPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInventoryCommandImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createInventoryCommandImportFileRequest($storefront, $importFileInventoryCommandPostRequest, string $contentType = self::contentTypes['createInventoryCommandImportFile'][0])
    {

        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling createInventoryCommandImportFile'
            );
        }

        // verify the required parameter 'importFileInventoryCommandPostRequest' is set
        if ($importFileInventoryCommandPostRequest === null || (is_array($importFileInventoryCommandPostRequest) && count($importFileInventoryCommandPostRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $importFileInventoryCommandPostRequest when calling createInventoryCommandImportFile'
            );
        }


        $resourcePath = '/import-files/inventory-command';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $storefront,
            'storefront', // param base name
            'Storefront', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($importFileInventoryCommandPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($importFileInventoryCommandPostRequest));
            } else {
                $httpBody = $importFileInventoryCommandPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createInventoryFeedImportFile
     *
     * Add an INVENTORY_FEED file URL
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileInventoryFeedPostRequest $importFileInventoryFeedPostRequest importFileInventoryFeedPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInventoryFeedImportFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function createInventoryFeedImportFile($storefront, $importFileInventoryFeedPostRequest, string $contentType = self::contentTypes['createInventoryFeedImportFile'][0])
    {
        list($response) = $this->createInventoryFeedImportFileWithHttpInfo($storefront, $importFileInventoryFeedPostRequest, $contentType);
        return $response;
    }

    /**
     * Operation createInventoryFeedImportFileWithHttpInfo
     *
     * Add an INVENTORY_FEED file URL
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileInventoryFeedPostRequest $importFileInventoryFeedPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInventoryFeedImportFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInventoryFeedImportFileWithHttpInfo($storefront, $importFileInventoryFeedPostRequest, string $contentType = self::contentTypes['createInventoryFeedImportFile'][0])
    {
        $request = $this->createInventoryFeedImportFileRequest($storefront, $importFileInventoryFeedPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInventoryFeedImportFileAsync
     *
     * Add an INVENTORY_FEED file URL
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileInventoryFeedPostRequest $importFileInventoryFeedPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInventoryFeedImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInventoryFeedImportFileAsync($storefront, $importFileInventoryFeedPostRequest, string $contentType = self::contentTypes['createInventoryFeedImportFile'][0])
    {
        return $this->createInventoryFeedImportFileAsyncWithHttpInfo($storefront, $importFileInventoryFeedPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInventoryFeedImportFileAsyncWithHttpInfo
     *
     * Add an INVENTORY_FEED file URL
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileInventoryFeedPostRequest $importFileInventoryFeedPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInventoryFeedImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInventoryFeedImportFileAsyncWithHttpInfo($storefront, $importFileInventoryFeedPostRequest, string $contentType = self::contentTypes['createInventoryFeedImportFile'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed';
        $request = $this->createInventoryFeedImportFileRequest($storefront, $importFileInventoryFeedPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInventoryFeedImportFile'
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileInventoryFeedPostRequest $importFileInventoryFeedPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInventoryFeedImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createInventoryFeedImportFileRequest($storefront, $importFileInventoryFeedPostRequest, string $contentType = self::contentTypes['createInventoryFeedImportFile'][0])
    {

        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling createInventoryFeedImportFile'
            );
        }

        // verify the required parameter 'importFileInventoryFeedPostRequest' is set
        if ($importFileInventoryFeedPostRequest === null || (is_array($importFileInventoryFeedPostRequest) && count($importFileInventoryFeedPostRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $importFileInventoryFeedPostRequest when calling createInventoryFeedImportFile'
            );
        }


        $resourcePath = '/import-files/inventory-feed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $storefront,
            'storefront', // param base name
            'Storefront', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($importFileInventoryFeedPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($importFileInventoryFeedPostRequest));
            } else {
                $httpBody = $importFileInventoryFeedPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrderCommandImportFile
     *
     * Add an ORDER_COMMAND file URL
     *
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileOrderCommandPostRequest $importFileOrderCommandPostRequest importFileOrderCommandPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrderCommandImportFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function createOrderCommandImportFile($importFileOrderCommandPostRequest, string $contentType = self::contentTypes['createOrderCommandImportFile'][0])
    {
        list($response) = $this->createOrderCommandImportFileWithHttpInfo($importFileOrderCommandPostRequest, $contentType);
        return $response;
    }

    /**
     * Operation createOrderCommandImportFileWithHttpInfo
     *
     * Add an ORDER_COMMAND file URL
     *
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileOrderCommandPostRequest $importFileOrderCommandPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrderCommandImportFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrderCommandImportFileWithHttpInfo($importFileOrderCommandPostRequest, string $contentType = self::contentTypes['createOrderCommandImportFile'][0])
    {
        $request = $this->createOrderCommandImportFileRequest($importFileOrderCommandPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrderCommandImportFileAsync
     *
     * Add an ORDER_COMMAND file URL
     *
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileOrderCommandPostRequest $importFileOrderCommandPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrderCommandImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrderCommandImportFileAsync($importFileOrderCommandPostRequest, string $contentType = self::contentTypes['createOrderCommandImportFile'][0])
    {
        return $this->createOrderCommandImportFileAsyncWithHttpInfo($importFileOrderCommandPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrderCommandImportFileAsyncWithHttpInfo
     *
     * Add an ORDER_COMMAND file URL
     *
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileOrderCommandPostRequest $importFileOrderCommandPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrderCommandImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrderCommandImportFileAsyncWithHttpInfo($importFileOrderCommandPostRequest, string $contentType = self::contentTypes['createOrderCommandImportFile'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand';
        $request = $this->createOrderCommandImportFileRequest($importFileOrderCommandPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrderCommandImportFile'
     *
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFileOrderCommandPostRequest $importFileOrderCommandPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrderCommandImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrderCommandImportFileRequest($importFileOrderCommandPostRequest, string $contentType = self::contentTypes['createOrderCommandImportFile'][0])
    {

        // verify the required parameter 'importFileOrderCommandPostRequest' is set
        if ($importFileOrderCommandPostRequest === null || (is_array($importFileOrderCommandPostRequest) && count($importFileOrderCommandPostRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $importFileOrderCommandPostRequest when calling createOrderCommandImportFile'
            );
        }


        $resourcePath = '/import-files/order-command';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($importFileOrderCommandPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($importFileOrderCommandPostRequest));
            } else {
                $httpBody = $importFileOrderCommandPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInventoryCommandImportFile
     *
     * Get an inventory command import file by ID
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryCommandImportFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function getInventoryCommandImportFile($storefront, $idImportFile, string $contentType = self::contentTypes['getInventoryCommandImportFile'][0])
    {
        list($response) = $this->getInventoryCommandImportFileWithHttpInfo($storefront, $idImportFile, $contentType);
        return $response;
    }

    /**
     * Operation getInventoryCommandImportFileWithHttpInfo
     *
     * Get an inventory command import file by ID
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryCommandImportFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInventoryCommandImportFileWithHttpInfo($storefront, $idImportFile, string $contentType = self::contentTypes['getInventoryCommandImportFile'][0])
    {
        $request = $this->getInventoryCommandImportFileRequest($storefront, $idImportFile, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInventoryCommandImportFileAsync
     *
     * Get an inventory command import file by ID
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryCommandImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryCommandImportFileAsync($storefront, $idImportFile, string $contentType = self::contentTypes['getInventoryCommandImportFile'][0])
    {
        return $this->getInventoryCommandImportFileAsyncWithHttpInfo($storefront, $idImportFile, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInventoryCommandImportFileAsyncWithHttpInfo
     *
     * Get an inventory command import file by ID
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryCommandImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryCommandImportFileAsyncWithHttpInfo($storefront, $idImportFile, string $contentType = self::contentTypes['getInventoryCommandImportFile'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryCommand';
        $request = $this->getInventoryCommandImportFileRequest($storefront, $idImportFile, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInventoryCommandImportFile'
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryCommandImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInventoryCommandImportFileRequest($storefront, $idImportFile, string $contentType = self::contentTypes['getInventoryCommandImportFile'][0])
    {

        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling getInventoryCommandImportFile'
            );
        }

        // verify the required parameter 'idImportFile' is set
        if ($idImportFile === null || (is_array($idImportFile) && count($idImportFile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idImportFile when calling getInventoryCommandImportFile'
            );
        }
        if ($idImportFile < 1) {
            throw new \InvalidArgumentException('invalid value for "$idImportFile" when calling ImportFilesApi.getInventoryCommandImportFile, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/import-files/inventory-command/{id_import_file}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $storefront,
            'storefront', // param base name
            'Storefront', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($idImportFile !== null) {
            $resourcePath = str_replace(
                '{' . 'id_import_file' . '}',
                ObjectSerializer::toPathValue($idImportFile),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInventoryCommandImportFiles
     *
     * Get a list of your inventory command import files
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryCommandImportFiles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryCommand|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function getInventoryCommandImportFiles($storefront, $status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getInventoryCommandImportFiles'][0])
    {
        list($response) = $this->getInventoryCommandImportFilesWithHttpInfo($storefront, $status, $tsCreatedIso, $tsUpdatedIso, $sort, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getInventoryCommandImportFilesWithHttpInfo
     *
     * Get a list of your inventory command import files
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryCommandImportFiles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryCommand|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInventoryCommandImportFilesWithHttpInfo($storefront, $status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getInventoryCommandImportFiles'][0])
    {
        $request = $this->getInventoryCommandImportFilesRequest($storefront, $status, $tsCreatedIso, $tsUpdatedIso, $sort, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryCommand' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryCommand' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryCommand', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryCommand';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInventoryCommandImportFilesAsync
     *
     * Get a list of your inventory command import files
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryCommandImportFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryCommandImportFilesAsync($storefront, $status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getInventoryCommandImportFiles'][0])
    {
        return $this->getInventoryCommandImportFilesAsyncWithHttpInfo($storefront, $status, $tsCreatedIso, $tsUpdatedIso, $sort, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInventoryCommandImportFilesAsyncWithHttpInfo
     *
     * Get a list of your inventory command import files
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryCommandImportFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryCommandImportFilesAsyncWithHttpInfo($storefront, $status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getInventoryCommandImportFiles'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryCommand';
        $request = $this->getInventoryCommandImportFilesRequest($storefront, $status, $tsCreatedIso, $tsUpdatedIso, $sort, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInventoryCommandImportFiles'
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryCommandImportFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInventoryCommandImportFilesRequest($storefront, $status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getInventoryCommandImportFiles'][0])
    {

        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling getInventoryCommandImportFiles'
            );
        }





        if ($limit !== null && $limit > 30) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ImportFilesApi.getInventoryCommandImportFiles, must be smaller than or equal to 30.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ImportFilesApi.getInventoryCommandImportFiles, must be bigger than or equal to 0.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ImportFilesApi.getInventoryCommandImportFiles, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/import-files/inventory-command';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $storefront,
            'storefront', // param base name
            'Storefront', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'ImportStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tsCreatedIso,
            'ts_created_iso', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tsUpdatedIso,
            'ts_updated_iso', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'ImportFilesSortBy', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInventoryFeedImportFile
     *
     * Get an inventory feed import file by ID
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryFeedImportFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function getInventoryFeedImportFile($storefront, $idImportFile, string $contentType = self::contentTypes['getInventoryFeedImportFile'][0])
    {
        list($response) = $this->getInventoryFeedImportFileWithHttpInfo($storefront, $idImportFile, $contentType);
        return $response;
    }

    /**
     * Operation getInventoryFeedImportFileWithHttpInfo
     *
     * Get an inventory feed import file by ID
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryFeedImportFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInventoryFeedImportFileWithHttpInfo($storefront, $idImportFile, string $contentType = self::contentTypes['getInventoryFeedImportFile'][0])
    {
        $request = $this->getInventoryFeedImportFileRequest($storefront, $idImportFile, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInventoryFeedImportFileAsync
     *
     * Get an inventory feed import file by ID
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryFeedImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryFeedImportFileAsync($storefront, $idImportFile, string $contentType = self::contentTypes['getInventoryFeedImportFile'][0])
    {
        return $this->getInventoryFeedImportFileAsyncWithHttpInfo($storefront, $idImportFile, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInventoryFeedImportFileAsyncWithHttpInfo
     *
     * Get an inventory feed import file by ID
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryFeedImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryFeedImportFileAsyncWithHttpInfo($storefront, $idImportFile, string $contentType = self::contentTypes['getInventoryFeedImportFile'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileInventoryFeed';
        $request = $this->getInventoryFeedImportFileRequest($storefront, $idImportFile, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInventoryFeedImportFile'
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryFeedImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInventoryFeedImportFileRequest($storefront, $idImportFile, string $contentType = self::contentTypes['getInventoryFeedImportFile'][0])
    {

        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling getInventoryFeedImportFile'
            );
        }

        // verify the required parameter 'idImportFile' is set
        if ($idImportFile === null || (is_array($idImportFile) && count($idImportFile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idImportFile when calling getInventoryFeedImportFile'
            );
        }
        if ($idImportFile < 1) {
            throw new \InvalidArgumentException('invalid value for "$idImportFile" when calling ImportFilesApi.getInventoryFeedImportFile, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/import-files/inventory-feed/{id_import_file}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $storefront,
            'storefront', // param base name
            'Storefront', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($idImportFile !== null) {
            $resourcePath = str_replace(
                '{' . 'id_import_file' . '}',
                ObjectSerializer::toPathValue($idImportFile),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInventoryFeedImportFiles
     *
     * Get a list of your inventory feed import files
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryFeedImportFiles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryFeed|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function getInventoryFeedImportFiles($storefront, $status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getInventoryFeedImportFiles'][0])
    {
        list($response) = $this->getInventoryFeedImportFilesWithHttpInfo($storefront, $status, $tsCreatedIso, $tsUpdatedIso, $sort, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getInventoryFeedImportFilesWithHttpInfo
     *
     * Get a list of your inventory feed import files
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryFeedImportFiles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryFeed|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInventoryFeedImportFilesWithHttpInfo($storefront, $status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getInventoryFeedImportFiles'][0])
    {
        $request = $this->getInventoryFeedImportFilesRequest($storefront, $status, $tsCreatedIso, $tsUpdatedIso, $sort, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryFeed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryFeed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryFeed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryFeed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryFeed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInventoryFeedImportFilesAsync
     *
     * Get a list of your inventory feed import files
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryFeedImportFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryFeedImportFilesAsync($storefront, $status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getInventoryFeedImportFiles'][0])
    {
        return $this->getInventoryFeedImportFilesAsyncWithHttpInfo($storefront, $status, $tsCreatedIso, $tsUpdatedIso, $sort, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInventoryFeedImportFilesAsyncWithHttpInfo
     *
     * Get a list of your inventory feed import files
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryFeedImportFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryFeedImportFilesAsyncWithHttpInfo($storefront, $status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getInventoryFeedImportFiles'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileInventoryFeed';
        $request = $this->getInventoryFeedImportFilesRequest($storefront, $status, $tsCreatedIso, $tsUpdatedIso, $sort, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInventoryFeedImportFiles'
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryFeedImportFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInventoryFeedImportFilesRequest($storefront, $status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getInventoryFeedImportFiles'][0])
    {

        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling getInventoryFeedImportFiles'
            );
        }





        if ($limit !== null && $limit > 30) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ImportFilesApi.getInventoryFeedImportFiles, must be smaller than or equal to 30.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ImportFilesApi.getInventoryFeedImportFiles, must be bigger than or equal to 0.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ImportFilesApi.getInventoryFeedImportFiles, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/import-files/inventory-feed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $storefront,
            'storefront', // param base name
            'Storefront', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'ImportStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tsCreatedIso,
            'ts_created_iso', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tsUpdatedIso,
            'ts_updated_iso', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'ImportFilesSortBy', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderCommandImportFile
     *
     * Get an order command import file by ID
     *
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderCommandImportFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function getOrderCommandImportFile($idImportFile, string $contentType = self::contentTypes['getOrderCommandImportFile'][0])
    {
        list($response) = $this->getOrderCommandImportFileWithHttpInfo($idImportFile, $contentType);
        return $response;
    }

    /**
     * Operation getOrderCommandImportFileWithHttpInfo
     *
     * Get an order command import file by ID
     *
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderCommandImportFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderCommandImportFileWithHttpInfo($idImportFile, string $contentType = self::contentTypes['getOrderCommandImportFile'][0])
    {
        $request = $this->getOrderCommandImportFileRequest($idImportFile, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderCommandImportFileAsync
     *
     * Get an order command import file by ID
     *
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderCommandImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderCommandImportFileAsync($idImportFile, string $contentType = self::contentTypes['getOrderCommandImportFile'][0])
    {
        return $this->getOrderCommandImportFileAsyncWithHttpInfo($idImportFile, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderCommandImportFileAsyncWithHttpInfo
     *
     * Get an order command import file by ID
     *
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderCommandImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderCommandImportFileAsyncWithHttpInfo($idImportFile, string $contentType = self::contentTypes['getOrderCommandImportFile'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseImportFileOrderCommand';
        $request = $this->getOrderCommandImportFileRequest($idImportFile, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderCommandImportFile'
     *
     * @param  int $idImportFile Internal ID of Import File (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderCommandImportFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrderCommandImportFileRequest($idImportFile, string $contentType = self::contentTypes['getOrderCommandImportFile'][0])
    {

        // verify the required parameter 'idImportFile' is set
        if ($idImportFile === null || (is_array($idImportFile) && count($idImportFile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idImportFile when calling getOrderCommandImportFile'
            );
        }
        if ($idImportFile < 1) {
            throw new \InvalidArgumentException('invalid value for "$idImportFile" when calling ImportFilesApi.getOrderCommandImportFile, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/import-files/order-command/{id_import_file}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($idImportFile !== null) {
            $resourcePath = str_replace(
                '{' . 'id_import_file' . '}',
                ObjectSerializer::toPathValue($idImportFile),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderCommandImportFiles
     *
     * Get a list of your order command import files
     *
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderCommandImportFiles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileOrderCommand|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function getOrderCommandImportFiles($status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getOrderCommandImportFiles'][0])
    {
        list($response) = $this->getOrderCommandImportFilesWithHttpInfo($status, $tsCreatedIso, $tsUpdatedIso, $sort, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getOrderCommandImportFilesWithHttpInfo
     *
     * Get a list of your order command import files
     *
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderCommandImportFiles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileOrderCommand|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderCommandImportFilesWithHttpInfo($status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getOrderCommandImportFiles'][0])
    {
        $request = $this->getOrderCommandImportFilesRequest($status, $tsCreatedIso, $tsUpdatedIso, $sort, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileOrderCommand' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileOrderCommand' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileOrderCommand', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileOrderCommand';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileOrderCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderCommandImportFilesAsync
     *
     * Get a list of your order command import files
     *
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderCommandImportFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderCommandImportFilesAsync($status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getOrderCommandImportFiles'][0])
    {
        return $this->getOrderCommandImportFilesAsyncWithHttpInfo($status, $tsCreatedIso, $tsUpdatedIso, $sort, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderCommandImportFilesAsyncWithHttpInfo
     *
     * Get a list of your order command import files
     *
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderCommandImportFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderCommandImportFilesAsyncWithHttpInfo($status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getOrderCommandImportFiles'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseImportFileOrderCommand';
        $request = $this->getOrderCommandImportFilesRequest($status, $tsCreatedIso, $tsUpdatedIso, $sort, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderCommandImportFiles'
     *
     * @param  \OpenAPI\Client\Mirakl\Model\ImportStatus|null $status File status filter (optional)
     * @param  \DateTime|null $tsCreatedIso (optional)
     * @param  \DateTime|null $tsUpdatedIso (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ImportFilesSortBy|null $sort (optional)
     * @param  int|null $limit Desired size of result set (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderCommandImportFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrderCommandImportFilesRequest($status = null, $tsCreatedIso = null, $tsUpdatedIso = null, $sort = null, $limit = 30, $offset = 0, string $contentType = self::contentTypes['getOrderCommandImportFiles'][0])
    {





        if ($limit !== null && $limit > 30) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ImportFilesApi.getOrderCommandImportFiles, must be smaller than or equal to 30.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ImportFilesApi.getOrderCommandImportFiles, must be bigger than or equal to 0.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ImportFilesApi.getOrderCommandImportFiles, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/import-files/order-command';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'ImportStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tsCreatedIso,
            'ts_created_iso', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tsUpdatedIso,
            'ts_updated_iso', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'ImportFilesSortBy', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
