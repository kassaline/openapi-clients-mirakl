<?php
/**
 * ReturnUnitsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * The version of the OpenAPI document: 2.18.3
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Mirakl\ApiException;
use OpenAPI\Client\Mirakl\Configuration;
use OpenAPI\Client\Mirakl\HeaderSelector;
use OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * ReturnUnitsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReturnUnitsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'acceptReturnUnit' => [
            'application/json',
        ],
        'clarifyReturnUnit' => [
            'application/json',
        ],
        'getReturnUnit' => [
            'application/json',
        ],
        'getReturnUnits' => [
            'application/json',
        ],
        'rejectReturnUnit' => [
            'application/json',
        ],
        'repairReturnUnit' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation acceptReturnUnit
     *
     * Accept a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptReturnUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function acceptReturnUnit($idReturnUnit, string $contentType = self::contentTypes['acceptReturnUnit'][0])
    {
        $this->acceptReturnUnitWithHttpInfo($idReturnUnit, $contentType);
    }

    /**
     * Operation acceptReturnUnitWithHttpInfo
     *
     * Accept a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptReturnUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptReturnUnitWithHttpInfo($idReturnUnit, string $contentType = self::contentTypes['acceptReturnUnit'][0])
    {
        $request = $this->acceptReturnUnitRequest($idReturnUnit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acceptReturnUnitAsync
     *
     * Accept a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptReturnUnitAsync($idReturnUnit, string $contentType = self::contentTypes['acceptReturnUnit'][0])
    {
        return $this->acceptReturnUnitAsyncWithHttpInfo($idReturnUnit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acceptReturnUnitAsyncWithHttpInfo
     *
     * Accept a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptReturnUnitAsyncWithHttpInfo($idReturnUnit, string $contentType = self::contentTypes['acceptReturnUnit'][0])
    {
        $returnType = '';
        $request = $this->acceptReturnUnitRequest($idReturnUnit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acceptReturnUnit'
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function acceptReturnUnitRequest($idReturnUnit, string $contentType = self::contentTypes['acceptReturnUnit'][0])
    {

        // verify the required parameter 'idReturnUnit' is set
        if ($idReturnUnit === null || (is_array($idReturnUnit) && count($idReturnUnit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idReturnUnit when calling acceptReturnUnit'
            );
        }


        $resourcePath = '/return-units/{id_return_unit}/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($idReturnUnit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_return_unit' . '}',
                ObjectSerializer::toPathValue($idReturnUnit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clarifyReturnUnit
     *
     * Clarify a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitClarifyRequest $returnUnitClarifyRequest Request body containing message for clarifying return unit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clarifyReturnUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clarifyReturnUnit($idReturnUnit, $returnUnitClarifyRequest, string $contentType = self::contentTypes['clarifyReturnUnit'][0])
    {
        $this->clarifyReturnUnitWithHttpInfo($idReturnUnit, $returnUnitClarifyRequest, $contentType);
    }

    /**
     * Operation clarifyReturnUnitWithHttpInfo
     *
     * Clarify a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitClarifyRequest $returnUnitClarifyRequest Request body containing message for clarifying return unit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clarifyReturnUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clarifyReturnUnitWithHttpInfo($idReturnUnit, $returnUnitClarifyRequest, string $contentType = self::contentTypes['clarifyReturnUnit'][0])
    {
        $request = $this->clarifyReturnUnitRequest($idReturnUnit, $returnUnitClarifyRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clarifyReturnUnitAsync
     *
     * Clarify a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitClarifyRequest $returnUnitClarifyRequest Request body containing message for clarifying return unit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clarifyReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clarifyReturnUnitAsync($idReturnUnit, $returnUnitClarifyRequest, string $contentType = self::contentTypes['clarifyReturnUnit'][0])
    {
        return $this->clarifyReturnUnitAsyncWithHttpInfo($idReturnUnit, $returnUnitClarifyRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clarifyReturnUnitAsyncWithHttpInfo
     *
     * Clarify a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitClarifyRequest $returnUnitClarifyRequest Request body containing message for clarifying return unit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clarifyReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clarifyReturnUnitAsyncWithHttpInfo($idReturnUnit, $returnUnitClarifyRequest, string $contentType = self::contentTypes['clarifyReturnUnit'][0])
    {
        $returnType = '';
        $request = $this->clarifyReturnUnitRequest($idReturnUnit, $returnUnitClarifyRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clarifyReturnUnit'
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitClarifyRequest $returnUnitClarifyRequest Request body containing message for clarifying return unit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clarifyReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clarifyReturnUnitRequest($idReturnUnit, $returnUnitClarifyRequest, string $contentType = self::contentTypes['clarifyReturnUnit'][0])
    {

        // verify the required parameter 'idReturnUnit' is set
        if ($idReturnUnit === null || (is_array($idReturnUnit) && count($idReturnUnit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idReturnUnit when calling clarifyReturnUnit'
            );
        }

        // verify the required parameter 'returnUnitClarifyRequest' is set
        if ($returnUnitClarifyRequest === null || (is_array($returnUnitClarifyRequest) && count($returnUnitClarifyRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $returnUnitClarifyRequest when calling clarifyReturnUnit'
            );
        }


        $resourcePath = '/return-units/{id_return_unit}/clarify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($idReturnUnit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_return_unit' . '}',
                ObjectSerializer::toPathValue($idReturnUnit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($returnUnitClarifyRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($returnUnitClarifyRequest));
            } else {
                $httpBody = $returnUnitClarifyRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReturnUnit
     *
     * Get a return unit by ID
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitEmbeddable[]|null $embedded Additional data to be returned (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\ApiResponseReturnUnitDetails|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function getReturnUnit($idReturnUnit, $embedded = null, string $contentType = self::contentTypes['getReturnUnit'][0])
    {
        list($response) = $this->getReturnUnitWithHttpInfo($idReturnUnit, $embedded, $contentType);
        return $response;
    }

    /**
     * Operation getReturnUnitWithHttpInfo
     *
     * Get a return unit by ID
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitEmbeddable[]|null $embedded Additional data to be returned (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\ApiResponseReturnUnitDetails|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReturnUnitWithHttpInfo($idReturnUnit, $embedded = null, string $contentType = self::contentTypes['getReturnUnit'][0])
    {
        $request = $this->getReturnUnitRequest($idReturnUnit, $embedded, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\ApiResponseReturnUnitDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ApiResponseReturnUnitDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ApiResponseReturnUnitDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseReturnUnitDetails';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ApiResponseReturnUnitDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReturnUnitAsync
     *
     * Get a return unit by ID
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitEmbeddable[]|null $embedded Additional data to be returned (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReturnUnitAsync($idReturnUnit, $embedded = null, string $contentType = self::contentTypes['getReturnUnit'][0])
    {
        return $this->getReturnUnitAsyncWithHttpInfo($idReturnUnit, $embedded, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReturnUnitAsyncWithHttpInfo
     *
     * Get a return unit by ID
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitEmbeddable[]|null $embedded Additional data to be returned (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReturnUnitAsyncWithHttpInfo($idReturnUnit, $embedded = null, string $contentType = self::contentTypes['getReturnUnit'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseReturnUnitDetails';
        $request = $this->getReturnUnitRequest($idReturnUnit, $embedded, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReturnUnit'
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitEmbeddable[]|null $embedded Additional data to be returned (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReturnUnitRequest($idReturnUnit, $embedded = null, string $contentType = self::contentTypes['getReturnUnit'][0])
    {

        // verify the required parameter 'idReturnUnit' is set
        if ($idReturnUnit === null || (is_array($idReturnUnit) && count($idReturnUnit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idReturnUnit when calling getReturnUnit'
            );
        }



        $resourcePath = '/return-units/{id_return_unit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $embedded,
            'embedded', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($idReturnUnit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_return_unit' . '}',
                ObjectSerializer::toPathValue($idReturnUnit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReturnUnits
     *
     * Get a list of return units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront|null $storefront Locale of storefront (optional)
     * @param  \DateTime|null $tsCreatedFromIso Get only return units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitStatus[]|null $status Get only return units which are in the given status (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only return units which are fulfilled by the given type.&lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string|null $sort Specify sorting (optional, default to 'ts_created:desc')
     * @param  int|null $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional)
     * @param  int|null $offset Offset applied to result set&lt;br&gt;default: 0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\CollectionApiResponseReturnUnit|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function getReturnUnits($storefront = null, $tsCreatedFromIso = null, $status = null, $fulfillmentType = null, $sort = 'ts_created:desc', $limit = null, $offset = null, string $contentType = self::contentTypes['getReturnUnits'][0])
    {
        list($response) = $this->getReturnUnitsWithHttpInfo($storefront, $tsCreatedFromIso, $status, $fulfillmentType, $sort, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getReturnUnitsWithHttpInfo
     *
     * Get a list of return units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront|null $storefront Locale of storefront (optional)
     * @param  \DateTime|null $tsCreatedFromIso Get only return units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitStatus[]|null $status Get only return units which are in the given status (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only return units which are fulfilled by the given type.&lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string|null $sort Specify sorting (optional, default to 'ts_created:desc')
     * @param  int|null $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional)
     * @param  int|null $offset Offset applied to result set&lt;br&gt;default: 0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\CollectionApiResponseReturnUnit|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReturnUnitsWithHttpInfo($storefront = null, $tsCreatedFromIso = null, $status = null, $fulfillmentType = null, $sort = 'ts_created:desc', $limit = null, $offset = null, string $contentType = self::contentTypes['getReturnUnits'][0])
    {
        $request = $this->getReturnUnitsRequest($storefront, $tsCreatedFromIso, $status, $fulfillmentType, $sort, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\CollectionApiResponseReturnUnit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\CollectionApiResponseReturnUnit' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseReturnUnit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseReturnUnit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseReturnUnit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReturnUnitsAsync
     *
     * Get a list of return units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront|null $storefront Locale of storefront (optional)
     * @param  \DateTime|null $tsCreatedFromIso Get only return units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitStatus[]|null $status Get only return units which are in the given status (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only return units which are fulfilled by the given type.&lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string|null $sort Specify sorting (optional, default to 'ts_created:desc')
     * @param  int|null $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional)
     * @param  int|null $offset Offset applied to result set&lt;br&gt;default: 0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReturnUnitsAsync($storefront = null, $tsCreatedFromIso = null, $status = null, $fulfillmentType = null, $sort = 'ts_created:desc', $limit = null, $offset = null, string $contentType = self::contentTypes['getReturnUnits'][0])
    {
        return $this->getReturnUnitsAsyncWithHttpInfo($storefront, $tsCreatedFromIso, $status, $fulfillmentType, $sort, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReturnUnitsAsyncWithHttpInfo
     *
     * Get a list of return units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront|null $storefront Locale of storefront (optional)
     * @param  \DateTime|null $tsCreatedFromIso Get only return units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitStatus[]|null $status Get only return units which are in the given status (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only return units which are fulfilled by the given type.&lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string|null $sort Specify sorting (optional, default to 'ts_created:desc')
     * @param  int|null $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional)
     * @param  int|null $offset Offset applied to result set&lt;br&gt;default: 0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReturnUnitsAsyncWithHttpInfo($storefront = null, $tsCreatedFromIso = null, $status = null, $fulfillmentType = null, $sort = 'ts_created:desc', $limit = null, $offset = null, string $contentType = self::contentTypes['getReturnUnits'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseReturnUnit';
        $request = $this->getReturnUnitsRequest($storefront, $tsCreatedFromIso, $status, $fulfillmentType, $sort, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReturnUnits'
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront|null $storefront Locale of storefront (optional)
     * @param  \DateTime|null $tsCreatedFromIso Get only return units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitStatus[]|null $status Get only return units which are in the given status (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only return units which are fulfilled by the given type.&lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string|null $sort Specify sorting (optional, default to 'ts_created:desc')
     * @param  int|null $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional)
     * @param  int|null $offset Offset applied to result set&lt;br&gt;default: 0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReturnUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReturnUnitsRequest($storefront = null, $tsCreatedFromIso = null, $status = null, $fulfillmentType = null, $sort = 'ts_created:desc', $limit = null, $offset = null, string $contentType = self::contentTypes['getReturnUnits'][0])
    {









        $resourcePath = '/return-units';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $storefront,
            'storefront', // param base name
            'Storefront', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tsCreatedFromIso,
            'ts_created_from_iso', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillmentType,
            'fulfillment_type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rejectReturnUnit
     *
     * Reject a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitRejectRequest $returnUnitRejectRequest Request body containing message for rejecting return unit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectReturnUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function rejectReturnUnit($idReturnUnit, $returnUnitRejectRequest, string $contentType = self::contentTypes['rejectReturnUnit'][0])
    {
        $this->rejectReturnUnitWithHttpInfo($idReturnUnit, $returnUnitRejectRequest, $contentType);
    }

    /**
     * Operation rejectReturnUnitWithHttpInfo
     *
     * Reject a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitRejectRequest $returnUnitRejectRequest Request body containing message for rejecting return unit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectReturnUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectReturnUnitWithHttpInfo($idReturnUnit, $returnUnitRejectRequest, string $contentType = self::contentTypes['rejectReturnUnit'][0])
    {
        $request = $this->rejectReturnUnitRequest($idReturnUnit, $returnUnitRejectRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rejectReturnUnitAsync
     *
     * Reject a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitRejectRequest $returnUnitRejectRequest Request body containing message for rejecting return unit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectReturnUnitAsync($idReturnUnit, $returnUnitRejectRequest, string $contentType = self::contentTypes['rejectReturnUnit'][0])
    {
        return $this->rejectReturnUnitAsyncWithHttpInfo($idReturnUnit, $returnUnitRejectRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rejectReturnUnitAsyncWithHttpInfo
     *
     * Reject a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitRejectRequest $returnUnitRejectRequest Request body containing message for rejecting return unit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectReturnUnitAsyncWithHttpInfo($idReturnUnit, $returnUnitRejectRequest, string $contentType = self::contentTypes['rejectReturnUnit'][0])
    {
        $returnType = '';
        $request = $this->rejectReturnUnitRequest($idReturnUnit, $returnUnitRejectRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rejectReturnUnit'
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\ReturnUnitRejectRequest $returnUnitRejectRequest Request body containing message for rejecting return unit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rejectReturnUnitRequest($idReturnUnit, $returnUnitRejectRequest, string $contentType = self::contentTypes['rejectReturnUnit'][0])
    {

        // verify the required parameter 'idReturnUnit' is set
        if ($idReturnUnit === null || (is_array($idReturnUnit) && count($idReturnUnit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idReturnUnit when calling rejectReturnUnit'
            );
        }

        // verify the required parameter 'returnUnitRejectRequest' is set
        if ($returnUnitRejectRequest === null || (is_array($returnUnitRejectRequest) && count($returnUnitRejectRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $returnUnitRejectRequest when calling rejectReturnUnit'
            );
        }


        $resourcePath = '/return-units/{id_return_unit}/reject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($idReturnUnit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_return_unit' . '}',
                ObjectSerializer::toPathValue($idReturnUnit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($returnUnitRejectRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($returnUnitRejectRequest));
            } else {
                $httpBody = $returnUnitRejectRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation repairReturnUnit
     *
     * Repair a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['repairReturnUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function repairReturnUnit($idReturnUnit, string $contentType = self::contentTypes['repairReturnUnit'][0])
    {
        $this->repairReturnUnitWithHttpInfo($idReturnUnit, $contentType);
    }

    /**
     * Operation repairReturnUnitWithHttpInfo
     *
     * Repair a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['repairReturnUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function repairReturnUnitWithHttpInfo($idReturnUnit, string $contentType = self::contentTypes['repairReturnUnit'][0])
    {
        $request = $this->repairReturnUnitRequest($idReturnUnit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation repairReturnUnitAsync
     *
     * Repair a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['repairReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function repairReturnUnitAsync($idReturnUnit, string $contentType = self::contentTypes['repairReturnUnit'][0])
    {
        return $this->repairReturnUnitAsyncWithHttpInfo($idReturnUnit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation repairReturnUnitAsyncWithHttpInfo
     *
     * Repair a return unit
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['repairReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function repairReturnUnitAsyncWithHttpInfo($idReturnUnit, string $contentType = self::contentTypes['repairReturnUnit'][0])
    {
        $returnType = '';
        $request = $this->repairReturnUnitRequest($idReturnUnit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'repairReturnUnit'
     *
     * @param  int $idReturnUnit Return unit ID, unique across all return units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['repairReturnUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function repairReturnUnitRequest($idReturnUnit, string $contentType = self::contentTypes['repairReturnUnit'][0])
    {

        // verify the required parameter 'idReturnUnit' is set
        if ($idReturnUnit === null || (is_array($idReturnUnit) && count($idReturnUnit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idReturnUnit when calling repairReturnUnit'
            );
        }


        $resourcePath = '/return-units/{id_return_unit}/repair';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($idReturnUnit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_return_unit' . '}',
                ObjectSerializer::toPathValue($idReturnUnit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
