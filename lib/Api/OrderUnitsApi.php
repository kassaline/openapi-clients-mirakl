<?php
/**
 * OrderUnitsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * The version of the OpenAPI document: 2.18.3
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Mirakl\ApiException;
use OpenAPI\Client\Mirakl\Configuration;
use OpenAPI\Client\Mirakl\HeaderSelector;
use OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * OrderUnitsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderUnitsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'cancelOrderUnit' => [
            'application/json',
        ],
        'fulfilOrderUnit' => [
            'application/json',
        ],
        'getOrderUnit' => [
            'application/json',
        ],
        'getOrderUnits' => [
            'application/json',
        ],
        'refundOrderUnit' => [
            'application/json',
        ],
        'sendOrderUnit' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelOrderUnit
     *
     * Cancel an order unit
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitCancelRequest $orderUnitCancelRequest Reason of the cancellation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrderUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelOrderUnit($idOrderUnit, $orderUnitCancelRequest, string $contentType = self::contentTypes['cancelOrderUnit'][0])
    {
        $this->cancelOrderUnitWithHttpInfo($idOrderUnit, $orderUnitCancelRequest, $contentType);
    }

    /**
     * Operation cancelOrderUnitWithHttpInfo
     *
     * Cancel an order unit
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitCancelRequest $orderUnitCancelRequest Reason of the cancellation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrderUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelOrderUnitWithHttpInfo($idOrderUnit, $orderUnitCancelRequest, string $contentType = self::contentTypes['cancelOrderUnit'][0])
    {
        $request = $this->cancelOrderUnitRequest($idOrderUnit, $orderUnitCancelRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelOrderUnitAsync
     *
     * Cancel an order unit
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitCancelRequest $orderUnitCancelRequest Reason of the cancellation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderUnitAsync($idOrderUnit, $orderUnitCancelRequest, string $contentType = self::contentTypes['cancelOrderUnit'][0])
    {
        return $this->cancelOrderUnitAsyncWithHttpInfo($idOrderUnit, $orderUnitCancelRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelOrderUnitAsyncWithHttpInfo
     *
     * Cancel an order unit
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitCancelRequest $orderUnitCancelRequest Reason of the cancellation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderUnitAsyncWithHttpInfo($idOrderUnit, $orderUnitCancelRequest, string $contentType = self::contentTypes['cancelOrderUnit'][0])
    {
        $returnType = '';
        $request = $this->cancelOrderUnitRequest($idOrderUnit, $orderUnitCancelRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelOrderUnit'
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitCancelRequest $orderUnitCancelRequest Reason of the cancellation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelOrderUnitRequest($idOrderUnit, $orderUnitCancelRequest, string $contentType = self::contentTypes['cancelOrderUnit'][0])
    {

        // verify the required parameter 'idOrderUnit' is set
        if ($idOrderUnit === null || (is_array($idOrderUnit) && count($idOrderUnit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idOrderUnit when calling cancelOrderUnit'
            );
        }

        // verify the required parameter 'orderUnitCancelRequest' is set
        if ($orderUnitCancelRequest === null || (is_array($orderUnitCancelRequest) && count($orderUnitCancelRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderUnitCancelRequest when calling cancelOrderUnit'
            );
        }


        $resourcePath = '/order-units/{id_order_unit}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($idOrderUnit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_order_unit' . '}',
                ObjectSerializer::toPathValue($idOrderUnit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($orderUnitCancelRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderUnitCancelRequest));
            } else {
                $httpBody = $orderUnitCancelRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fulfilOrderUnit
     *
     * Mark an order unit to be in fulfillment
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fulfilOrderUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function fulfilOrderUnit($idOrderUnit, string $contentType = self::contentTypes['fulfilOrderUnit'][0])
    {
        $this->fulfilOrderUnitWithHttpInfo($idOrderUnit, $contentType);
    }

    /**
     * Operation fulfilOrderUnitWithHttpInfo
     *
     * Mark an order unit to be in fulfillment
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fulfilOrderUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function fulfilOrderUnitWithHttpInfo($idOrderUnit, string $contentType = self::contentTypes['fulfilOrderUnit'][0])
    {
        $request = $this->fulfilOrderUnitRequest($idOrderUnit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fulfilOrderUnitAsync
     *
     * Mark an order unit to be in fulfillment
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fulfilOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fulfilOrderUnitAsync($idOrderUnit, string $contentType = self::contentTypes['fulfilOrderUnit'][0])
    {
        return $this->fulfilOrderUnitAsyncWithHttpInfo($idOrderUnit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fulfilOrderUnitAsyncWithHttpInfo
     *
     * Mark an order unit to be in fulfillment
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fulfilOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fulfilOrderUnitAsyncWithHttpInfo($idOrderUnit, string $contentType = self::contentTypes['fulfilOrderUnit'][0])
    {
        $returnType = '';
        $request = $this->fulfilOrderUnitRequest($idOrderUnit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fulfilOrderUnit'
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fulfilOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fulfilOrderUnitRequest($idOrderUnit, string $contentType = self::contentTypes['fulfilOrderUnit'][0])
    {

        // verify the required parameter 'idOrderUnit' is set
        if ($idOrderUnit === null || (is_array($idOrderUnit) && count($idOrderUnit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idOrderUnit when calling fulfilOrderUnit'
            );
        }


        $resourcePath = '/order-units/{id_order_unit}/fulfil';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($idOrderUnit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_order_unit' . '}',
                ObjectSerializer::toPathValue($idOrderUnit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderUnit
     *
     * Get an order unit by ID
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitEmbeddable[]|null $embedded Additional data to be returned (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\ApiResponseOrderUnitDetails|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function getOrderUnit($idOrderUnit, $embedded = null, string $contentType = self::contentTypes['getOrderUnit'][0])
    {
        list($response) = $this->getOrderUnitWithHttpInfo($idOrderUnit, $embedded, $contentType);
        return $response;
    }

    /**
     * Operation getOrderUnitWithHttpInfo
     *
     * Get an order unit by ID
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitEmbeddable[]|null $embedded Additional data to be returned (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\ApiResponseOrderUnitDetails|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderUnitWithHttpInfo($idOrderUnit, $embedded = null, string $contentType = self::contentTypes['getOrderUnit'][0])
    {
        $request = $this->getOrderUnitRequest($idOrderUnit, $embedded, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\ApiResponseOrderUnitDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ApiResponseOrderUnitDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ApiResponseOrderUnitDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseOrderUnitDetails';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ApiResponseOrderUnitDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderUnitAsync
     *
     * Get an order unit by ID
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitEmbeddable[]|null $embedded Additional data to be returned (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderUnitAsync($idOrderUnit, $embedded = null, string $contentType = self::contentTypes['getOrderUnit'][0])
    {
        return $this->getOrderUnitAsyncWithHttpInfo($idOrderUnit, $embedded, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderUnitAsyncWithHttpInfo
     *
     * Get an order unit by ID
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitEmbeddable[]|null $embedded Additional data to be returned (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderUnitAsyncWithHttpInfo($idOrderUnit, $embedded = null, string $contentType = self::contentTypes['getOrderUnit'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseOrderUnitDetails';
        $request = $this->getOrderUnitRequest($idOrderUnit, $embedded, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderUnit'
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitEmbeddable[]|null $embedded Additional data to be returned (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrderUnitRequest($idOrderUnit, $embedded = null, string $contentType = self::contentTypes['getOrderUnit'][0])
    {

        // verify the required parameter 'idOrderUnit' is set
        if ($idOrderUnit === null || (is_array($idOrderUnit) && count($idOrderUnit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idOrderUnit when calling getOrderUnit'
            );
        }



        $resourcePath = '/order-units/{id_order_unit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $embedded,
            'embedded', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($idOrderUnit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_order_unit' . '}',
                ObjectSerializer::toPathValue($idOrderUnit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderUnits
     *
     * Get a list of order units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront|null $storefront Locale of storefront (optional)
     * @param  string|null $idOffer Unique ID for offer(s) (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitStatus[]|null $status Get only order units which are in the given status (optional)
     * @param  \DateTime|null $tsCreatedFromIso Get only order units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \DateTime|null $tsUpdatedFromIso Get only order units which were updated after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only order units which are fulfilled by the given type. &lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string|null $sort Specify sorting (optional, default to 'ts_created:desc')
     * @param  int|null $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional, default to 30)
     * @param  int|null $offset Offset applied to result set&lt;br&gt;default: 0 (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\CollectionApiResponseOrderUnit|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function getOrderUnits($storefront = null, $idOffer = null, $status = null, $tsCreatedFromIso = null, $tsUpdatedFromIso = null, $fulfillmentType = null, $sort = 'ts_created:desc', $limit = 30, $offset = 0, string $contentType = self::contentTypes['getOrderUnits'][0])
    {
        list($response) = $this->getOrderUnitsWithHttpInfo($storefront, $idOffer, $status, $tsCreatedFromIso, $tsUpdatedFromIso, $fulfillmentType, $sort, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getOrderUnitsWithHttpInfo
     *
     * Get a list of order units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront|null $storefront Locale of storefront (optional)
     * @param  string|null $idOffer Unique ID for offer(s) (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitStatus[]|null $status Get only order units which are in the given status (optional)
     * @param  \DateTime|null $tsCreatedFromIso Get only order units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \DateTime|null $tsUpdatedFromIso Get only order units which were updated after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only order units which are fulfilled by the given type. &lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string|null $sort Specify sorting (optional, default to 'ts_created:desc')
     * @param  int|null $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional, default to 30)
     * @param  int|null $offset Offset applied to result set&lt;br&gt;default: 0 (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\CollectionApiResponseOrderUnit|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderUnitsWithHttpInfo($storefront = null, $idOffer = null, $status = null, $tsCreatedFromIso = null, $tsUpdatedFromIso = null, $fulfillmentType = null, $sort = 'ts_created:desc', $limit = 30, $offset = 0, string $contentType = self::contentTypes['getOrderUnits'][0])
    {
        $request = $this->getOrderUnitsRequest($storefront, $idOffer, $status, $tsCreatedFromIso, $tsUpdatedFromIso, $fulfillmentType, $sort, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\CollectionApiResponseOrderUnit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\CollectionApiResponseOrderUnit' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseOrderUnit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseOrderUnit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseOrderUnit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderUnitsAsync
     *
     * Get a list of order units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront|null $storefront Locale of storefront (optional)
     * @param  string|null $idOffer Unique ID for offer(s) (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitStatus[]|null $status Get only order units which are in the given status (optional)
     * @param  \DateTime|null $tsCreatedFromIso Get only order units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \DateTime|null $tsUpdatedFromIso Get only order units which were updated after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only order units which are fulfilled by the given type. &lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string|null $sort Specify sorting (optional, default to 'ts_created:desc')
     * @param  int|null $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional, default to 30)
     * @param  int|null $offset Offset applied to result set&lt;br&gt;default: 0 (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderUnitsAsync($storefront = null, $idOffer = null, $status = null, $tsCreatedFromIso = null, $tsUpdatedFromIso = null, $fulfillmentType = null, $sort = 'ts_created:desc', $limit = 30, $offset = 0, string $contentType = self::contentTypes['getOrderUnits'][0])
    {
        return $this->getOrderUnitsAsyncWithHttpInfo($storefront, $idOffer, $status, $tsCreatedFromIso, $tsUpdatedFromIso, $fulfillmentType, $sort, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderUnitsAsyncWithHttpInfo
     *
     * Get a list of order units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront|null $storefront Locale of storefront (optional)
     * @param  string|null $idOffer Unique ID for offer(s) (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitStatus[]|null $status Get only order units which are in the given status (optional)
     * @param  \DateTime|null $tsCreatedFromIso Get only order units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \DateTime|null $tsUpdatedFromIso Get only order units which were updated after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only order units which are fulfilled by the given type. &lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string|null $sort Specify sorting (optional, default to 'ts_created:desc')
     * @param  int|null $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional, default to 30)
     * @param  int|null $offset Offset applied to result set&lt;br&gt;default: 0 (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderUnitsAsyncWithHttpInfo($storefront = null, $idOffer = null, $status = null, $tsCreatedFromIso = null, $tsUpdatedFromIso = null, $fulfillmentType = null, $sort = 'ts_created:desc', $limit = 30, $offset = 0, string $contentType = self::contentTypes['getOrderUnits'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseOrderUnit';
        $request = $this->getOrderUnitsRequest($storefront, $idOffer, $status, $tsCreatedFromIso, $tsUpdatedFromIso, $fulfillmentType, $sort, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderUnits'
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront|null $storefront Locale of storefront (optional)
     * @param  string|null $idOffer Unique ID for offer(s) (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitStatus[]|null $status Get only order units which are in the given status (optional)
     * @param  \DateTime|null $tsCreatedFromIso Get only order units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \DateTime|null $tsUpdatedFromIso Get only order units which were updated after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only order units which are fulfilled by the given type. &lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string|null $sort Specify sorting (optional, default to 'ts_created:desc')
     * @param  int|null $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional, default to 30)
     * @param  int|null $offset Offset applied to result set&lt;br&gt;default: 0 (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrderUnitsRequest($storefront = null, $idOffer = null, $status = null, $tsCreatedFromIso = null, $tsUpdatedFromIso = null, $fulfillmentType = null, $sort = 'ts_created:desc', $limit = 30, $offset = 0, string $contentType = self::contentTypes['getOrderUnits'][0])
    {








        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderUnitsApi.getOrderUnits, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderUnitsApi.getOrderUnits, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling OrderUnitsApi.getOrderUnits, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/order-units';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $storefront,
            'storefront', // param base name
            'Storefront', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idOffer,
            'id_offer', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tsCreatedFromIso,
            'ts_created_from_iso', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tsUpdatedFromIso,
            'ts_updated_from_iso', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillmentType,
            'fulfillment_type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundOrderUnit
     *
     * Send a refund to a customer
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitRefundRequest $orderUnitRefundRequest Request body containing amount and reason of the refund. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrderUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function refundOrderUnit($idOrderUnit, $orderUnitRefundRequest, string $contentType = self::contentTypes['refundOrderUnit'][0])
    {
        $this->refundOrderUnitWithHttpInfo($idOrderUnit, $orderUnitRefundRequest, $contentType);
    }

    /**
     * Operation refundOrderUnitWithHttpInfo
     *
     * Send a refund to a customer
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitRefundRequest $orderUnitRefundRequest Request body containing amount and reason of the refund. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrderUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundOrderUnitWithHttpInfo($idOrderUnit, $orderUnitRefundRequest, string $contentType = self::contentTypes['refundOrderUnit'][0])
    {
        $request = $this->refundOrderUnitRequest($idOrderUnit, $orderUnitRefundRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundOrderUnitAsync
     *
     * Send a refund to a customer
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitRefundRequest $orderUnitRefundRequest Request body containing amount and reason of the refund. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundOrderUnitAsync($idOrderUnit, $orderUnitRefundRequest, string $contentType = self::contentTypes['refundOrderUnit'][0])
    {
        return $this->refundOrderUnitAsyncWithHttpInfo($idOrderUnit, $orderUnitRefundRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundOrderUnitAsyncWithHttpInfo
     *
     * Send a refund to a customer
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitRefundRequest $orderUnitRefundRequest Request body containing amount and reason of the refund. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundOrderUnitAsyncWithHttpInfo($idOrderUnit, $orderUnitRefundRequest, string $contentType = self::contentTypes['refundOrderUnit'][0])
    {
        $returnType = '';
        $request = $this->refundOrderUnitRequest($idOrderUnit, $orderUnitRefundRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundOrderUnit'
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitRefundRequest $orderUnitRefundRequest Request body containing amount and reason of the refund. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refundOrderUnitRequest($idOrderUnit, $orderUnitRefundRequest, string $contentType = self::contentTypes['refundOrderUnit'][0])
    {

        // verify the required parameter 'idOrderUnit' is set
        if ($idOrderUnit === null || (is_array($idOrderUnit) && count($idOrderUnit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idOrderUnit when calling refundOrderUnit'
            );
        }

        // verify the required parameter 'orderUnitRefundRequest' is set
        if ($orderUnitRefundRequest === null || (is_array($orderUnitRefundRequest) && count($orderUnitRefundRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderUnitRefundRequest when calling refundOrderUnit'
            );
        }


        $resourcePath = '/order-units/{id_order_unit}/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($idOrderUnit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_order_unit' . '}',
                ObjectSerializer::toPathValue($idOrderUnit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($orderUnitRefundRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderUnitRefundRequest));
            } else {
                $httpBody = $orderUnitRefundRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendOrderUnit
     *
     * Mark an order unit as sent
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitSendRequest $orderUnitSendRequest Request body containing tracking number(s) and carrier code of the shipment(s) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendOrderUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendOrderUnit($idOrderUnit, $orderUnitSendRequest, string $contentType = self::contentTypes['sendOrderUnit'][0])
    {
        $this->sendOrderUnitWithHttpInfo($idOrderUnit, $orderUnitSendRequest, $contentType);
    }

    /**
     * Operation sendOrderUnitWithHttpInfo
     *
     * Mark an order unit as sent
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitSendRequest $orderUnitSendRequest Request body containing tracking number(s) and carrier code of the shipment(s) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendOrderUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendOrderUnitWithHttpInfo($idOrderUnit, $orderUnitSendRequest, string $contentType = self::contentTypes['sendOrderUnit'][0])
    {
        $request = $this->sendOrderUnitRequest($idOrderUnit, $orderUnitSendRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendOrderUnitAsync
     *
     * Mark an order unit as sent
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitSendRequest $orderUnitSendRequest Request body containing tracking number(s) and carrier code of the shipment(s) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendOrderUnitAsync($idOrderUnit, $orderUnitSendRequest, string $contentType = self::contentTypes['sendOrderUnit'][0])
    {
        return $this->sendOrderUnitAsyncWithHttpInfo($idOrderUnit, $orderUnitSendRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendOrderUnitAsyncWithHttpInfo
     *
     * Mark an order unit as sent
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitSendRequest $orderUnitSendRequest Request body containing tracking number(s) and carrier code of the shipment(s) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendOrderUnitAsyncWithHttpInfo($idOrderUnit, $orderUnitSendRequest, string $contentType = self::contentTypes['sendOrderUnit'][0])
    {
        $returnType = '';
        $request = $this->sendOrderUnitRequest($idOrderUnit, $orderUnitSendRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendOrderUnit'
     *
     * @param  int $idOrderUnit Order unit ID, unique across all order units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\OrderUnitSendRequest $orderUnitSendRequest Request body containing tracking number(s) and carrier code of the shipment(s) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendOrderUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendOrderUnitRequest($idOrderUnit, $orderUnitSendRequest, string $contentType = self::contentTypes['sendOrderUnit'][0])
    {

        // verify the required parameter 'idOrderUnit' is set
        if ($idOrderUnit === null || (is_array($idOrderUnit) && count($idOrderUnit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idOrderUnit when calling sendOrderUnit'
            );
        }

        // verify the required parameter 'orderUnitSendRequest' is set
        if ($orderUnitSendRequest === null || (is_array($orderUnitSendRequest) && count($orderUnitSendRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderUnitSendRequest when calling sendOrderUnit'
            );
        }


        $resourcePath = '/order-units/{id_order_unit}/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($idOrderUnit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_order_unit' . '}',
                ObjectSerializer::toPathValue($idOrderUnit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($orderUnitSendRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderUnitSendRequest));
            } else {
                $httpBody = $orderUnitSendRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
