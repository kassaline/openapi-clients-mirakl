<?php
/**
 * OffersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Mirakl\ApiException;
use OpenAPI\Client\Mirakl\Configuration;
use OpenAPI\Client\Mirakl\HeaderSelector;
use OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * OffersApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OffersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'oF01' => [
            'multipart/form-data',
        ],
        'oF02' => [
            'application/json',
        ],
        'oF03' => [
            'application/json',
        ],
        'oF04' => [
            'application/json',
        ],
        'oF21' => [
            'application/json',
        ],
        'oF22' => [
            'application/json',
        ],
        'oF24' => [
            'application/json',
        ],
        'oF51' => [
            'application/json',
        ],
        'oF52' => [
            'application/json',
        ],
        'oF53' => [
            'application/json',
        ],
        'p11' => [
            'application/json',
        ],
        'pRI01' => [
            'multipart/form-data',
        ],
        'pRI02' => [
            'application/json',
        ],
        'pRI03' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation oF01
     *
     * Import a file to add offers
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \SplFileObject|null $file Import file (CSV or XML or XLSX) to upload. Use &lt;code&gt;multipart/form-data&lt;/code&gt; with name &lt;code&gt;file&lt;/code&gt;.&lt;br/&gt; Csv format:&lt;br/&gt;&lt;pre&gt;\\\&quot;sku\\\&quot;;\\\&quot;product-id\\\&quot;;\\\&quot;product-id-type\\\&quot;;\\\&quot;description\\\&quot;;\\\&quot;internal-description\\\&quot;;\\\&quot;price\\\&quot;;\\\&quot;price-additional-info\\\&quot;;\\\&quot;quantity\\\&quot;;\\\&quot;min-quantity-alert\\\&quot;;\\\&quot;state\\\&quot;;\\\&quot;available-start-date\\\&quot;;\\\&quot;available-end-date\\\&quot;;\\\&quot;discount-price\\\&quot;;\\\&quot;discount-start-date\\\&quot;;\\\&quot;discount-end-date\\\&quot;;\\\&quot;discount-ranges\\\&quot;;\\\&quot;allow-quote-requests\\\&quot;;\\\&quot;leadtime-to-ship\\\&quot;;\\\&quot;min-order-quantity\\\&quot;;\\\&quot;max-order-quantity\\\&quot;;\\\&quot;package-quantity\\\&quot;;\\\&quot;update-delete\\\&quot;;\\\&quot;price-ranges\\\&quot;;\\\&quot;ecotax\\\&quot;;\\\&quot;gift-wrap\\\&quot;;\\\&quot;min-quantity-ordered\\\&quot;&lt;/pre&gt;&lt;br/&gt;For Dropship offers, do not use &lt;code&gt;discount-ranges&lt;/code&gt; and &lt;code&gt;price-ranges&lt;/code&gt; as they will be ignored.&lt;br/&gt;&lt;br/&gt;If you use specific sales channels, use: &lt;pre&gt;\\\&quot;price[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-price[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-start-date[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-end-date[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-ranges[channel&#x3D;channel code]\\\&quot;;\\\&quot;price-ranges[channel&#x3D;channel code]\\\&quot;&lt;/pre&gt; For Dropship offers, do not use &lt;code&gt;channel prices&lt;/code&gt;, as they will be ignored.&lt;br/&gt;&lt;br/&gt;If you use the price per measurement unit feature, use &lt;code&gt;pricing-unit&lt;/code&gt; to specify the unit corresponding to the submitted &lt;code&gt;price&lt;/code&gt;.&lt;br/&gt;&lt;br/&gt;If US Tax options are activated on the platform, use: &lt;code&gt;product-tax-code&lt;/code&gt; to facilitate tax calculations.&lt;br/&gt;&lt;br/&gt;If &lt;i&gt;Data collection related to circular economy regulations&lt;/i&gt; is enabled, use:&lt;br/&gt;&lt;pre&gt;\\\&quot;producer-id[EPR category code]\\\&quot;; \\\&quot;eco-contribution-amount[EPR category code]\\\&quot;&lt;/pre&gt;EPR category code must be one of: &lt;pre&gt;FR-AGROPACK, FR-ASL, FR-DASRIPAT, FR-DBPS, FR-DDS, FR-DEA, FR-DEEE, FR-DISPMED, FR-DIY, FR-EMBM, FR-GF, FR-JOUETS, FR-LUB, FR-MH, FR-MNU, FR-PA, FR-PAP, FR-PCHIM, FR-PMCB, FR-PNEU, FR-TABAC, FR-TLC, FR-VEHICULE, FR-VHU, DE-BATTG, DE-PACK, DE-WEEE, ES-PACK, ES-GPACK, ES-WEEE&lt;/pre&gt;&lt;br/&gt; (optional)
     * @param  string|null $importMode importMode (optional)
     * @param  bool|null $operatorFormat Force the use of the operator product format (optional, default to false)
     * @param  bool|null $withProducts This file also contains product information (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF01'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\OF01Response201
     */
    public function oF01($associative_array)
    {
        list($response) = $this->oF01WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oF01WithHttpInfo
     *
     * Import a file to add offers
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \SplFileObject|null $file Import file (CSV or XML or XLSX) to upload. Use &lt;code&gt;multipart/form-data&lt;/code&gt; with name &lt;code&gt;file&lt;/code&gt;.&lt;br/&gt; Csv format:&lt;br/&gt;&lt;pre&gt;\\\&quot;sku\\\&quot;;\\\&quot;product-id\\\&quot;;\\\&quot;product-id-type\\\&quot;;\\\&quot;description\\\&quot;;\\\&quot;internal-description\\\&quot;;\\\&quot;price\\\&quot;;\\\&quot;price-additional-info\\\&quot;;\\\&quot;quantity\\\&quot;;\\\&quot;min-quantity-alert\\\&quot;;\\\&quot;state\\\&quot;;\\\&quot;available-start-date\\\&quot;;\\\&quot;available-end-date\\\&quot;;\\\&quot;discount-price\\\&quot;;\\\&quot;discount-start-date\\\&quot;;\\\&quot;discount-end-date\\\&quot;;\\\&quot;discount-ranges\\\&quot;;\\\&quot;allow-quote-requests\\\&quot;;\\\&quot;leadtime-to-ship\\\&quot;;\\\&quot;min-order-quantity\\\&quot;;\\\&quot;max-order-quantity\\\&quot;;\\\&quot;package-quantity\\\&quot;;\\\&quot;update-delete\\\&quot;;\\\&quot;price-ranges\\\&quot;;\\\&quot;ecotax\\\&quot;;\\\&quot;gift-wrap\\\&quot;;\\\&quot;min-quantity-ordered\\\&quot;&lt;/pre&gt;&lt;br/&gt;For Dropship offers, do not use &lt;code&gt;discount-ranges&lt;/code&gt; and &lt;code&gt;price-ranges&lt;/code&gt; as they will be ignored.&lt;br/&gt;&lt;br/&gt;If you use specific sales channels, use: &lt;pre&gt;\\\&quot;price[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-price[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-start-date[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-end-date[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-ranges[channel&#x3D;channel code]\\\&quot;;\\\&quot;price-ranges[channel&#x3D;channel code]\\\&quot;&lt;/pre&gt; For Dropship offers, do not use &lt;code&gt;channel prices&lt;/code&gt;, as they will be ignored.&lt;br/&gt;&lt;br/&gt;If you use the price per measurement unit feature, use &lt;code&gt;pricing-unit&lt;/code&gt; to specify the unit corresponding to the submitted &lt;code&gt;price&lt;/code&gt;.&lt;br/&gt;&lt;br/&gt;If US Tax options are activated on the platform, use: &lt;code&gt;product-tax-code&lt;/code&gt; to facilitate tax calculations.&lt;br/&gt;&lt;br/&gt;If &lt;i&gt;Data collection related to circular economy regulations&lt;/i&gt; is enabled, use:&lt;br/&gt;&lt;pre&gt;\\\&quot;producer-id[EPR category code]\\\&quot;; \\\&quot;eco-contribution-amount[EPR category code]\\\&quot;&lt;/pre&gt;EPR category code must be one of: &lt;pre&gt;FR-AGROPACK, FR-ASL, FR-DASRIPAT, FR-DBPS, FR-DDS, FR-DEA, FR-DEEE, FR-DISPMED, FR-DIY, FR-EMBM, FR-GF, FR-JOUETS, FR-LUB, FR-MH, FR-MNU, FR-PA, FR-PAP, FR-PCHIM, FR-PMCB, FR-PNEU, FR-TABAC, FR-TLC, FR-VEHICULE, FR-VHU, DE-BATTG, DE-PACK, DE-WEEE, ES-PACK, ES-GPACK, ES-WEEE&lt;/pre&gt;&lt;br/&gt; (optional)
     * @param  string|null $importMode (optional)
     * @param  bool|null $operatorFormat Force the use of the operator product format (optional, default to false)
     * @param  bool|null $withProducts This file also contains product information (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF01'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\OF01Response201, HTTP status code, HTTP response headers (array of strings)
     */
    public function oF01WithHttpInfo($associative_array)
    {
        $request = $this->oF01Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Mirakl\Model\OF01Response201' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\OF01Response201' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\OF01Response201', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\OF01Response201';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\OF01Response201',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oF01Async
     *
     * Import a file to add offers
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \SplFileObject|null $file Import file (CSV or XML or XLSX) to upload. Use &lt;code&gt;multipart/form-data&lt;/code&gt; with name &lt;code&gt;file&lt;/code&gt;.&lt;br/&gt; Csv format:&lt;br/&gt;&lt;pre&gt;\\\&quot;sku\\\&quot;;\\\&quot;product-id\\\&quot;;\\\&quot;product-id-type\\\&quot;;\\\&quot;description\\\&quot;;\\\&quot;internal-description\\\&quot;;\\\&quot;price\\\&quot;;\\\&quot;price-additional-info\\\&quot;;\\\&quot;quantity\\\&quot;;\\\&quot;min-quantity-alert\\\&quot;;\\\&quot;state\\\&quot;;\\\&quot;available-start-date\\\&quot;;\\\&quot;available-end-date\\\&quot;;\\\&quot;discount-price\\\&quot;;\\\&quot;discount-start-date\\\&quot;;\\\&quot;discount-end-date\\\&quot;;\\\&quot;discount-ranges\\\&quot;;\\\&quot;allow-quote-requests\\\&quot;;\\\&quot;leadtime-to-ship\\\&quot;;\\\&quot;min-order-quantity\\\&quot;;\\\&quot;max-order-quantity\\\&quot;;\\\&quot;package-quantity\\\&quot;;\\\&quot;update-delete\\\&quot;;\\\&quot;price-ranges\\\&quot;;\\\&quot;ecotax\\\&quot;;\\\&quot;gift-wrap\\\&quot;;\\\&quot;min-quantity-ordered\\\&quot;&lt;/pre&gt;&lt;br/&gt;For Dropship offers, do not use &lt;code&gt;discount-ranges&lt;/code&gt; and &lt;code&gt;price-ranges&lt;/code&gt; as they will be ignored.&lt;br/&gt;&lt;br/&gt;If you use specific sales channels, use: &lt;pre&gt;\\\&quot;price[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-price[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-start-date[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-end-date[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-ranges[channel&#x3D;channel code]\\\&quot;;\\\&quot;price-ranges[channel&#x3D;channel code]\\\&quot;&lt;/pre&gt; For Dropship offers, do not use &lt;code&gt;channel prices&lt;/code&gt;, as they will be ignored.&lt;br/&gt;&lt;br/&gt;If you use the price per measurement unit feature, use &lt;code&gt;pricing-unit&lt;/code&gt; to specify the unit corresponding to the submitted &lt;code&gt;price&lt;/code&gt;.&lt;br/&gt;&lt;br/&gt;If US Tax options are activated on the platform, use: &lt;code&gt;product-tax-code&lt;/code&gt; to facilitate tax calculations.&lt;br/&gt;&lt;br/&gt;If &lt;i&gt;Data collection related to circular economy regulations&lt;/i&gt; is enabled, use:&lt;br/&gt;&lt;pre&gt;\\\&quot;producer-id[EPR category code]\\\&quot;; \\\&quot;eco-contribution-amount[EPR category code]\\\&quot;&lt;/pre&gt;EPR category code must be one of: &lt;pre&gt;FR-AGROPACK, FR-ASL, FR-DASRIPAT, FR-DBPS, FR-DDS, FR-DEA, FR-DEEE, FR-DISPMED, FR-DIY, FR-EMBM, FR-GF, FR-JOUETS, FR-LUB, FR-MH, FR-MNU, FR-PA, FR-PAP, FR-PCHIM, FR-PMCB, FR-PNEU, FR-TABAC, FR-TLC, FR-VEHICULE, FR-VHU, DE-BATTG, DE-PACK, DE-WEEE, ES-PACK, ES-GPACK, ES-WEEE&lt;/pre&gt;&lt;br/&gt; (optional)
     * @param  string|null $importMode (optional)
     * @param  bool|null $operatorFormat Force the use of the operator product format (optional, default to false)
     * @param  bool|null $withProducts This file also contains product information (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF01Async($associative_array)
    {
        return $this->oF01AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oF01AsyncWithHttpInfo
     *
     * Import a file to add offers
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \SplFileObject|null $file Import file (CSV or XML or XLSX) to upload. Use &lt;code&gt;multipart/form-data&lt;/code&gt; with name &lt;code&gt;file&lt;/code&gt;.&lt;br/&gt; Csv format:&lt;br/&gt;&lt;pre&gt;\\\&quot;sku\\\&quot;;\\\&quot;product-id\\\&quot;;\\\&quot;product-id-type\\\&quot;;\\\&quot;description\\\&quot;;\\\&quot;internal-description\\\&quot;;\\\&quot;price\\\&quot;;\\\&quot;price-additional-info\\\&quot;;\\\&quot;quantity\\\&quot;;\\\&quot;min-quantity-alert\\\&quot;;\\\&quot;state\\\&quot;;\\\&quot;available-start-date\\\&quot;;\\\&quot;available-end-date\\\&quot;;\\\&quot;discount-price\\\&quot;;\\\&quot;discount-start-date\\\&quot;;\\\&quot;discount-end-date\\\&quot;;\\\&quot;discount-ranges\\\&quot;;\\\&quot;allow-quote-requests\\\&quot;;\\\&quot;leadtime-to-ship\\\&quot;;\\\&quot;min-order-quantity\\\&quot;;\\\&quot;max-order-quantity\\\&quot;;\\\&quot;package-quantity\\\&quot;;\\\&quot;update-delete\\\&quot;;\\\&quot;price-ranges\\\&quot;;\\\&quot;ecotax\\\&quot;;\\\&quot;gift-wrap\\\&quot;;\\\&quot;min-quantity-ordered\\\&quot;&lt;/pre&gt;&lt;br/&gt;For Dropship offers, do not use &lt;code&gt;discount-ranges&lt;/code&gt; and &lt;code&gt;price-ranges&lt;/code&gt; as they will be ignored.&lt;br/&gt;&lt;br/&gt;If you use specific sales channels, use: &lt;pre&gt;\\\&quot;price[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-price[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-start-date[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-end-date[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-ranges[channel&#x3D;channel code]\\\&quot;;\\\&quot;price-ranges[channel&#x3D;channel code]\\\&quot;&lt;/pre&gt; For Dropship offers, do not use &lt;code&gt;channel prices&lt;/code&gt;, as they will be ignored.&lt;br/&gt;&lt;br/&gt;If you use the price per measurement unit feature, use &lt;code&gt;pricing-unit&lt;/code&gt; to specify the unit corresponding to the submitted &lt;code&gt;price&lt;/code&gt;.&lt;br/&gt;&lt;br/&gt;If US Tax options are activated on the platform, use: &lt;code&gt;product-tax-code&lt;/code&gt; to facilitate tax calculations.&lt;br/&gt;&lt;br/&gt;If &lt;i&gt;Data collection related to circular economy regulations&lt;/i&gt; is enabled, use:&lt;br/&gt;&lt;pre&gt;\\\&quot;producer-id[EPR category code]\\\&quot;; \\\&quot;eco-contribution-amount[EPR category code]\\\&quot;&lt;/pre&gt;EPR category code must be one of: &lt;pre&gt;FR-AGROPACK, FR-ASL, FR-DASRIPAT, FR-DBPS, FR-DDS, FR-DEA, FR-DEEE, FR-DISPMED, FR-DIY, FR-EMBM, FR-GF, FR-JOUETS, FR-LUB, FR-MH, FR-MNU, FR-PA, FR-PAP, FR-PCHIM, FR-PMCB, FR-PNEU, FR-TABAC, FR-TLC, FR-VEHICULE, FR-VHU, DE-BATTG, DE-PACK, DE-WEEE, ES-PACK, ES-GPACK, ES-WEEE&lt;/pre&gt;&lt;br/&gt; (optional)
     * @param  string|null $importMode (optional)
     * @param  bool|null $operatorFormat Force the use of the operator product format (optional, default to false)
     * @param  bool|null $withProducts This file also contains product information (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF01AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\OF01Response201';
        $request = $this->oF01Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oF01'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \SplFileObject|null $file Import file (CSV or XML or XLSX) to upload. Use &lt;code&gt;multipart/form-data&lt;/code&gt; with name &lt;code&gt;file&lt;/code&gt;.&lt;br/&gt; Csv format:&lt;br/&gt;&lt;pre&gt;\\\&quot;sku\\\&quot;;\\\&quot;product-id\\\&quot;;\\\&quot;product-id-type\\\&quot;;\\\&quot;description\\\&quot;;\\\&quot;internal-description\\\&quot;;\\\&quot;price\\\&quot;;\\\&quot;price-additional-info\\\&quot;;\\\&quot;quantity\\\&quot;;\\\&quot;min-quantity-alert\\\&quot;;\\\&quot;state\\\&quot;;\\\&quot;available-start-date\\\&quot;;\\\&quot;available-end-date\\\&quot;;\\\&quot;discount-price\\\&quot;;\\\&quot;discount-start-date\\\&quot;;\\\&quot;discount-end-date\\\&quot;;\\\&quot;discount-ranges\\\&quot;;\\\&quot;allow-quote-requests\\\&quot;;\\\&quot;leadtime-to-ship\\\&quot;;\\\&quot;min-order-quantity\\\&quot;;\\\&quot;max-order-quantity\\\&quot;;\\\&quot;package-quantity\\\&quot;;\\\&quot;update-delete\\\&quot;;\\\&quot;price-ranges\\\&quot;;\\\&quot;ecotax\\\&quot;;\\\&quot;gift-wrap\\\&quot;;\\\&quot;min-quantity-ordered\\\&quot;&lt;/pre&gt;&lt;br/&gt;For Dropship offers, do not use &lt;code&gt;discount-ranges&lt;/code&gt; and &lt;code&gt;price-ranges&lt;/code&gt; as they will be ignored.&lt;br/&gt;&lt;br/&gt;If you use specific sales channels, use: &lt;pre&gt;\\\&quot;price[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-price[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-start-date[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-end-date[channel&#x3D;channel code]\\\&quot;;\\\&quot;discount-ranges[channel&#x3D;channel code]\\\&quot;;\\\&quot;price-ranges[channel&#x3D;channel code]\\\&quot;&lt;/pre&gt; For Dropship offers, do not use &lt;code&gt;channel prices&lt;/code&gt;, as they will be ignored.&lt;br/&gt;&lt;br/&gt;If you use the price per measurement unit feature, use &lt;code&gt;pricing-unit&lt;/code&gt; to specify the unit corresponding to the submitted &lt;code&gt;price&lt;/code&gt;.&lt;br/&gt;&lt;br/&gt;If US Tax options are activated on the platform, use: &lt;code&gt;product-tax-code&lt;/code&gt; to facilitate tax calculations.&lt;br/&gt;&lt;br/&gt;If &lt;i&gt;Data collection related to circular economy regulations&lt;/i&gt; is enabled, use:&lt;br/&gt;&lt;pre&gt;\\\&quot;producer-id[EPR category code]\\\&quot;; \\\&quot;eco-contribution-amount[EPR category code]\\\&quot;&lt;/pre&gt;EPR category code must be one of: &lt;pre&gt;FR-AGROPACK, FR-ASL, FR-DASRIPAT, FR-DBPS, FR-DDS, FR-DEA, FR-DEEE, FR-DISPMED, FR-DIY, FR-EMBM, FR-GF, FR-JOUETS, FR-LUB, FR-MH, FR-MNU, FR-PA, FR-PAP, FR-PCHIM, FR-PMCB, FR-PNEU, FR-TABAC, FR-TLC, FR-VEHICULE, FR-VHU, DE-BATTG, DE-PACK, DE-WEEE, ES-PACK, ES-GPACK, ES-WEEE&lt;/pre&gt;&lt;br/&gt; (optional)
     * @param  string|null $importMode (optional)
     * @param  bool|null $operatorFormat Force the use of the operator product format (optional, default to false)
     * @param  bool|null $withProducts This file also contains product information (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oF01Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $file = array_key_exists('file', $associative_array) ? $associative_array['file'] : null;
        $importMode = array_key_exists('importMode', $associative_array) ? $associative_array['importMode'] : null;
        $operatorFormat = array_key_exists('operatorFormat', $associative_array) ? $associative_array['operatorFormat'] : false;
        $withProducts = array_key_exists('withProducts', $associative_array) ? $associative_array['withProducts'] : false;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oF01'][0];
        






        $resourcePath = '/api/offers/imports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);



        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($importMode !== null) {
            $formParams['import_mode'] = ObjectSerializer::toFormValue($importMode);
        }
        // form params
        if ($operatorFormat !== null) {
            $formParams['operator_format'] = ObjectSerializer::toFormValue($operatorFormat);
        }
        // form params
        if ($withProducts !== null) {
            $formParams['with_products'] = ObjectSerializer::toFormValue($withProducts);
        }

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oF02
     *
     * Get information and statistics about an offer import
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $import Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF02'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\OF02Response200
     */
    public function oF02($associative_array)
    {
        list($response) = $this->oF02WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oF02WithHttpInfo
     *
     * Get information and statistics about an offer import
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $import Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF02'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\OF02Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oF02WithHttpInfo($associative_array)
    {
        $request = $this->oF02Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\OF02Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\OF02Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\OF02Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\OF02Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\OF02Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oF02Async
     *
     * Get information and statistics about an offer import
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $import Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF02'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF02Async($associative_array)
    {
        return $this->oF02AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oF02AsyncWithHttpInfo
     *
     * Get information and statistics about an offer import
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $import Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF02'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF02AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\OF02Response200';
        $request = $this->oF02Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oF02'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $import Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF02'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oF02Request($associative_array)
    {
        // unbox the parameters from the associative array
        $import = array_key_exists('import', $associative_array) ? $associative_array['import'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oF02'][0];
        
        // verify the required parameter 'import' is set
        if ($import === null || (is_array($import) && count($import) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $import when calling oF02'
            );
        }



        $resourcePath = '/api/offers/imports/{import}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($import !== null) {
            $resourcePath = str_replace(
                '{' . 'import' . '}',
                ObjectSerializer::toPathValue($import),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oF03
     *
     * Get the error report file for an offer import
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $import Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF03'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function oF03($associative_array)
    {
        list($response) = $this->oF03WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oF03WithHttpInfo
     *
     * Get the error report file for an offer import
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $import Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF03'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function oF03WithHttpInfo($associative_array)
    {
        $request = $this->oF03Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oF03Async
     *
     * Get the error report file for an offer import
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $import Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF03'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF03Async($associative_array)
    {
        return $this->oF03AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oF03AsyncWithHttpInfo
     *
     * Get the error report file for an offer import
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $import Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF03'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF03AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\SplFileObject';
        $request = $this->oF03Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oF03'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $import Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF03'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oF03Request($associative_array)
    {
        // unbox the parameters from the associative array
        $import = array_key_exists('import', $associative_array) ? $associative_array['import'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oF03'][0];
        
        // verify the required parameter 'import' is set
        if ($import === null || (is_array($import) && count($import) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $import when calling oF03'
            );
        }



        $resourcePath = '/api/offers/imports/{import}/error_report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($import !== null) {
            $resourcePath = str_replace(
                '{' . 'import' . '}',
                ObjectSerializer::toPathValue($import),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oF04
     *
     * Get information and statistics about offer imports
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $startDate Start creation date for filtering (optional)
     * @param  \DateTime|null $endDate End creation date for filtering (optional)
     * @param  string|null $status Offer import status (optional)
     * @param  string|null $mode Offer import mode (optional)
     * @param  string[]|null $origins List of offer import origins for filtering. This parameter can be supplied multiple times (origins&#x3D;API&amp;origins&#x3D;FTP...). (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF04'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\OF04Response200
     */
    public function oF04($associative_array)
    {
        list($response) = $this->oF04WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oF04WithHttpInfo
     *
     * Get information and statistics about offer imports
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $startDate Start creation date for filtering (optional)
     * @param  \DateTime|null $endDate End creation date for filtering (optional)
     * @param  string|null $status Offer import status (optional)
     * @param  string|null $mode Offer import mode (optional)
     * @param  string[]|null $origins List of offer import origins for filtering. This parameter can be supplied multiple times (origins&#x3D;API&amp;origins&#x3D;FTP...). (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF04'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\OF04Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oF04WithHttpInfo($associative_array)
    {
        $request = $this->oF04Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\OF04Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\OF04Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\OF04Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\OF04Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\OF04Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oF04Async
     *
     * Get information and statistics about offer imports
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $startDate Start creation date for filtering (optional)
     * @param  \DateTime|null $endDate End creation date for filtering (optional)
     * @param  string|null $status Offer import status (optional)
     * @param  string|null $mode Offer import mode (optional)
     * @param  string[]|null $origins List of offer import origins for filtering. This parameter can be supplied multiple times (origins&#x3D;API&amp;origins&#x3D;FTP...). (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF04'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF04Async($associative_array)
    {
        return $this->oF04AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oF04AsyncWithHttpInfo
     *
     * Get information and statistics about offer imports
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $startDate Start creation date for filtering (optional)
     * @param  \DateTime|null $endDate End creation date for filtering (optional)
     * @param  string|null $status Offer import status (optional)
     * @param  string|null $mode Offer import mode (optional)
     * @param  string[]|null $origins List of offer import origins for filtering. This parameter can be supplied multiple times (origins&#x3D;API&amp;origins&#x3D;FTP...). (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF04'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF04AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\OF04Response200';
        $request = $this->oF04Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oF04'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $startDate Start creation date for filtering (optional)
     * @param  \DateTime|null $endDate End creation date for filtering (optional)
     * @param  string|null $status Offer import status (optional)
     * @param  string|null $mode Offer import mode (optional)
     * @param  string[]|null $origins List of offer import origins for filtering. This parameter can be supplied multiple times (origins&#x3D;API&amp;origins&#x3D;FTP...). (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF04'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oF04Request($associative_array)
    {
        // unbox the parameters from the associative array
        $startDate = array_key_exists('startDate', $associative_array) ? $associative_array['startDate'] : null;
        $endDate = array_key_exists('endDate', $associative_array) ? $associative_array['endDate'] : null;
        $status = array_key_exists('status', $associative_array) ? $associative_array['status'] : null;
        $mode = array_key_exists('mode', $associative_array) ? $associative_array['mode'] : null;
        $origins = array_key_exists('origins', $associative_array) ? $associative_array['origins'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $pageToken = array_key_exists('pageToken', $associative_array) ? $associative_array['pageToken'] : null;
        $sort = array_key_exists('sort', $associative_array) ? $associative_array['sort'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oF04'][0];
        









        $resourcePath = '/api/offers/imports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mode,
            'mode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $origins,
            'origins', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageToken,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oF21
     *
     * List offers of a shop
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $offerStateCodes List of offer state codes (optional)
     * @param  string|null $sku Offer&#39;s sku (optional)
     * @param  string|null $productId Product&#39;s sku (optional)
     * @param  bool|null $favorite Filter only favorite offers (optional, default to false)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF21'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\OF21Response200
     */
    public function oF21($associative_array)
    {
        list($response) = $this->oF21WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oF21WithHttpInfo
     *
     * List offers of a shop
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $offerStateCodes List of offer state codes (optional)
     * @param  string|null $sku Offer&#39;s sku (optional)
     * @param  string|null $productId Product&#39;s sku (optional)
     * @param  bool|null $favorite Filter only favorite offers (optional, default to false)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF21'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\OF21Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oF21WithHttpInfo($associative_array)
    {
        $request = $this->oF21Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\OF21Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\OF21Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\OF21Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\OF21Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\OF21Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oF21Async
     *
     * List offers of a shop
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $offerStateCodes List of offer state codes (optional)
     * @param  string|null $sku Offer&#39;s sku (optional)
     * @param  string|null $productId Product&#39;s sku (optional)
     * @param  bool|null $favorite Filter only favorite offers (optional, default to false)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF21'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF21Async($associative_array)
    {
        return $this->oF21AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oF21AsyncWithHttpInfo
     *
     * List offers of a shop
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $offerStateCodes List of offer state codes (optional)
     * @param  string|null $sku Offer&#39;s sku (optional)
     * @param  string|null $productId Product&#39;s sku (optional)
     * @param  bool|null $favorite Filter only favorite offers (optional, default to false)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF21'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF21AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\OF21Response200';
        $request = $this->oF21Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oF21'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $offerStateCodes List of offer state codes (optional)
     * @param  string|null $sku Offer&#39;s sku (optional)
     * @param  string|null $productId Product&#39;s sku (optional)
     * @param  bool|null $favorite Filter only favorite offers (optional, default to false)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF21'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oF21Request($associative_array)
    {
        // unbox the parameters from the associative array
        $offerStateCodes = array_key_exists('offerStateCodes', $associative_array) ? $associative_array['offerStateCodes'] : null;
        $sku = array_key_exists('sku', $associative_array) ? $associative_array['sku'] : null;
        $productId = array_key_exists('productId', $associative_array) ? $associative_array['productId'] : null;
        $favorite = array_key_exists('favorite', $associative_array) ? $associative_array['favorite'] : false;
        $pricingChannelCode = array_key_exists('pricingChannelCode', $associative_array) ? $associative_array['pricingChannelCode'] : null;
        $pricingCustomerOrganizationId = array_key_exists('pricingCustomerOrganizationId', $associative_array) ? $associative_array['pricingCustomerOrganizationId'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $locale = array_key_exists('locale', $associative_array) ? $associative_array['locale'] : null;
        $max = array_key_exists('max', $associative_array) ? $associative_array['max'] : null;
        $offset = array_key_exists('offset', $associative_array) ? $associative_array['offset'] : null;
        $sort = array_key_exists('sort', $associative_array) ? $associative_array['sort'] : null;
        $order = array_key_exists('order', $associative_array) ? $associative_array['order'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oF21'][0];
        













        $resourcePath = '/api/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offerStateCodes,
            'offer_state_codes', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sku,
            'sku', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $productId,
            'product_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $favorite,
            'favorite', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pricingChannelCode,
            'pricing_channel_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pricingCustomerOrganizationId,
            'pricing_customer_organization_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max,
            'max', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oF22
     *
     * Get information about an offer
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $offer Offer identifier (required)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF22'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\OF22Response200
     */
    public function oF22($associative_array)
    {
        list($response) = $this->oF22WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oF22WithHttpInfo
     *
     * Get information about an offer
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $offer Offer identifier (required)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF22'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\OF22Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oF22WithHttpInfo($associative_array)
    {
        $request = $this->oF22Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\OF22Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\OF22Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\OF22Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\OF22Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\OF22Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oF22Async
     *
     * Get information about an offer
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $offer Offer identifier (required)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF22'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF22Async($associative_array)
    {
        return $this->oF22AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oF22AsyncWithHttpInfo
     *
     * Get information about an offer
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $offer Offer identifier (required)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF22'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF22AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\OF22Response200';
        $request = $this->oF22Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oF22'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $offer Offer identifier (required)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF22'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oF22Request($associative_array)
    {
        // unbox the parameters from the associative array
        $offer = array_key_exists('offer', $associative_array) ? $associative_array['offer'] : null;
        $pricingChannelCode = array_key_exists('pricingChannelCode', $associative_array) ? $associative_array['pricingChannelCode'] : null;
        $pricingCustomerOrganizationId = array_key_exists('pricingCustomerOrganizationId', $associative_array) ? $associative_array['pricingCustomerOrganizationId'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $locale = array_key_exists('locale', $associative_array) ? $associative_array['locale'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oF22'][0];
        
        // verify the required parameter 'offer' is set
        if ($offer === null || (is_array($offer) && count($offer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer when calling oF22'
            );
        }






        $resourcePath = '/api/offers/{offer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pricingChannelCode,
            'pricing_channel_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pricingCustomerOrganizationId,
            'pricing_customer_organization_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($offer !== null) {
            $resourcePath = str_replace(
                '{' . 'offer' . '}',
                ObjectSerializer::toPathValue($offer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oF24
     *
     * Create, update, or delete offers
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OF24Request|null $oF24Request oF24Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF24'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\OF24Response201
     */
    public function oF24($associative_array)
    {
        list($response) = $this->oF24WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oF24WithHttpInfo
     *
     * Create, update, or delete offers
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OF24Request|null $oF24Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF24'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\OF24Response201, HTTP status code, HTTP response headers (array of strings)
     */
    public function oF24WithHttpInfo($associative_array)
    {
        $request = $this->oF24Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Mirakl\Model\OF24Response201' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\OF24Response201' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\OF24Response201', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\OF24Response201';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\OF24Response201',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oF24Async
     *
     * Create, update, or delete offers
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OF24Request|null $oF24Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF24'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF24Async($associative_array)
    {
        return $this->oF24AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oF24AsyncWithHttpInfo
     *
     * Create, update, or delete offers
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OF24Request|null $oF24Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF24'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF24AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\OF24Response201';
        $request = $this->oF24Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oF24'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OF24Request|null $oF24Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF24'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oF24Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $oF24Request = array_key_exists('oF24Request', $associative_array) ? $associative_array['oF24Request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oF24'][0];
        



        $resourcePath = '/api/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($oF24Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($oF24Request));
            } else {
                $httpBody = $oF24Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oF51
     *
     * Get offers CSV file
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $lastRequestDate Date and time of your last request.&lt;br/&gt;If provided, retrieves all offers updated since this date and time, including deleted and inactive offers.&lt;br/&gt;If not provided, retrieves all active offers only, unless otherwise specified in the &lt;i&gt;include_inactive_offers&lt;/i&gt; field. (optional)
     * @param  string|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. If specified, only offers that can be sold on the specified channel(s) will be returned. If not, offers will be returned regardless of their channels. (optional)
     * @param  string|null $shippingZones List of the shipping zones codes to filter with, URL-encoded and using a comma (,) as a separator. If specified, only shipping information linked to the given zones will be returned. Otherwise, all shipping information for all zones will be returned. (optional)
     * @param  bool|null $includeInactiveOffers When calling the API in full mode (i.e. when no &lt;i&gt;last_request_date&lt;/i&gt; is provided), inactive offers are not returned. To retrieve both active and inactive offers, set this field to true.&lt;br /&gt;When calling the API in differential mode (i.e. when the &lt;i&gt;last_request_date&lt;/i&gt; is provided), both active and inactive offers are returned. This field cannot be used in differential mode otherwise the call fails. (optional, default to false)
     * @param  string|null $includeFields List of the fields to include, URL-encoded and using a comma (,) as a separator. If specified, only listed fields will be returned. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF51'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     * @deprecated
     */
    public function oF51($associative_array)
    {
        list($response) = $this->oF51WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oF51WithHttpInfo
     *
     * Get offers CSV file
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $lastRequestDate Date and time of your last request.&lt;br/&gt;If provided, retrieves all offers updated since this date and time, including deleted and inactive offers.&lt;br/&gt;If not provided, retrieves all active offers only, unless otherwise specified in the &lt;i&gt;include_inactive_offers&lt;/i&gt; field. (optional)
     * @param  string|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. If specified, only offers that can be sold on the specified channel(s) will be returned. If not, offers will be returned regardless of their channels. (optional)
     * @param  string|null $shippingZones List of the shipping zones codes to filter with, URL-encoded and using a comma (,) as a separator. If specified, only shipping information linked to the given zones will be returned. Otherwise, all shipping information for all zones will be returned. (optional)
     * @param  bool|null $includeInactiveOffers When calling the API in full mode (i.e. when no &lt;i&gt;last_request_date&lt;/i&gt; is provided), inactive offers are not returned. To retrieve both active and inactive offers, set this field to true.&lt;br /&gt;When calling the API in differential mode (i.e. when the &lt;i&gt;last_request_date&lt;/i&gt; is provided), both active and inactive offers are returned. This field cannot be used in differential mode otherwise the call fails. (optional, default to false)
     * @param  string|null $includeFields List of the fields to include, URL-encoded and using a comma (,) as a separator. If specified, only listed fields will be returned. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF51'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function oF51WithHttpInfo($associative_array)
    {
        $request = $this->oF51Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oF51Async
     *
     * Get offers CSV file
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $lastRequestDate Date and time of your last request.&lt;br/&gt;If provided, retrieves all offers updated since this date and time, including deleted and inactive offers.&lt;br/&gt;If not provided, retrieves all active offers only, unless otherwise specified in the &lt;i&gt;include_inactive_offers&lt;/i&gt; field. (optional)
     * @param  string|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. If specified, only offers that can be sold on the specified channel(s) will be returned. If not, offers will be returned regardless of their channels. (optional)
     * @param  string|null $shippingZones List of the shipping zones codes to filter with, URL-encoded and using a comma (,) as a separator. If specified, only shipping information linked to the given zones will be returned. Otherwise, all shipping information for all zones will be returned. (optional)
     * @param  bool|null $includeInactiveOffers When calling the API in full mode (i.e. when no &lt;i&gt;last_request_date&lt;/i&gt; is provided), inactive offers are not returned. To retrieve both active and inactive offers, set this field to true.&lt;br /&gt;When calling the API in differential mode (i.e. when the &lt;i&gt;last_request_date&lt;/i&gt; is provided), both active and inactive offers are returned. This field cannot be used in differential mode otherwise the call fails. (optional, default to false)
     * @param  string|null $includeFields List of the fields to include, URL-encoded and using a comma (,) as a separator. If specified, only listed fields will be returned. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF51'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function oF51Async($associative_array)
    {
        return $this->oF51AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oF51AsyncWithHttpInfo
     *
     * Get offers CSV file
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $lastRequestDate Date and time of your last request.&lt;br/&gt;If provided, retrieves all offers updated since this date and time, including deleted and inactive offers.&lt;br/&gt;If not provided, retrieves all active offers only, unless otherwise specified in the &lt;i&gt;include_inactive_offers&lt;/i&gt; field. (optional)
     * @param  string|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. If specified, only offers that can be sold on the specified channel(s) will be returned. If not, offers will be returned regardless of their channels. (optional)
     * @param  string|null $shippingZones List of the shipping zones codes to filter with, URL-encoded and using a comma (,) as a separator. If specified, only shipping information linked to the given zones will be returned. Otherwise, all shipping information for all zones will be returned. (optional)
     * @param  bool|null $includeInactiveOffers When calling the API in full mode (i.e. when no &lt;i&gt;last_request_date&lt;/i&gt; is provided), inactive offers are not returned. To retrieve both active and inactive offers, set this field to true.&lt;br /&gt;When calling the API in differential mode (i.e. when the &lt;i&gt;last_request_date&lt;/i&gt; is provided), both active and inactive offers are returned. This field cannot be used in differential mode otherwise the call fails. (optional, default to false)
     * @param  string|null $includeFields List of the fields to include, URL-encoded and using a comma (,) as a separator. If specified, only listed fields will be returned. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF51'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function oF51AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\SplFileObject';
        $request = $this->oF51Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oF51'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $lastRequestDate Date and time of your last request.&lt;br/&gt;If provided, retrieves all offers updated since this date and time, including deleted and inactive offers.&lt;br/&gt;If not provided, retrieves all active offers only, unless otherwise specified in the &lt;i&gt;include_inactive_offers&lt;/i&gt; field. (optional)
     * @param  string|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. If specified, only offers that can be sold on the specified channel(s) will be returned. If not, offers will be returned regardless of their channels. (optional)
     * @param  string|null $shippingZones List of the shipping zones codes to filter with, URL-encoded and using a comma (,) as a separator. If specified, only shipping information linked to the given zones will be returned. Otherwise, all shipping information for all zones will be returned. (optional)
     * @param  bool|null $includeInactiveOffers When calling the API in full mode (i.e. when no &lt;i&gt;last_request_date&lt;/i&gt; is provided), inactive offers are not returned. To retrieve both active and inactive offers, set this field to true.&lt;br /&gt;When calling the API in differential mode (i.e. when the &lt;i&gt;last_request_date&lt;/i&gt; is provided), both active and inactive offers are returned. This field cannot be used in differential mode otherwise the call fails. (optional, default to false)
     * @param  string|null $includeFields List of the fields to include, URL-encoded and using a comma (,) as a separator. If specified, only listed fields will be returned. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF51'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function oF51Request($associative_array)
    {
        // unbox the parameters from the associative array
        $lastRequestDate = array_key_exists('lastRequestDate', $associative_array) ? $associative_array['lastRequestDate'] : null;
        $channelCodes = array_key_exists('channelCodes', $associative_array) ? $associative_array['channelCodes'] : null;
        $shippingZones = array_key_exists('shippingZones', $associative_array) ? $associative_array['shippingZones'] : null;
        $includeInactiveOffers = array_key_exists('includeInactiveOffers', $associative_array) ? $associative_array['includeInactiveOffers'] : false;
        $includeFields = array_key_exists('includeFields', $associative_array) ? $associative_array['includeFields'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oF51'][0];
        







        $resourcePath = '/api/offers/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastRequestDate,
            'last_request_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelCodes,
            'channel_codes', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shippingZones,
            'shipping_zones', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeInactiveOffers,
            'include_inactive_offers', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeFields,
            'include_fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oF52
     *
     * Export offers CSV or JSON file asynchronously
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OF52Request|null $oF52Request oF52Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF52'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\OF52Response200
     */
    public function oF52($associative_array)
    {
        list($response) = $this->oF52WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oF52WithHttpInfo
     *
     * Export offers CSV or JSON file asynchronously
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OF52Request|null $oF52Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF52'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\OF52Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oF52WithHttpInfo($associative_array)
    {
        $request = $this->oF52Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\OF52Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\OF52Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\OF52Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\OF52Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\OF52Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oF52Async
     *
     * Export offers CSV or JSON file asynchronously
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OF52Request|null $oF52Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF52'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF52Async($associative_array)
    {
        return $this->oF52AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oF52AsyncWithHttpInfo
     *
     * Export offers CSV or JSON file asynchronously
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OF52Request|null $oF52Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF52'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF52AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\OF52Response200';
        $request = $this->oF52Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oF52'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\OF52Request|null $oF52Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF52'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oF52Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $oF52Request = array_key_exists('oF52Request', $associative_array) ? $associative_array['oF52Request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oF52'][0];
        



        $resourcePath = '/api/offers/export/async';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($oF52Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($oF52Request));
            } else {
                $httpBody = $oF52Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oF53
     *
     * Poll the status of an asynchronous offer export (OF52)
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $trackingId The asynchronous offer export id (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF53'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\OF53Response200
     */
    public function oF53($associative_array)
    {
        list($response) = $this->oF53WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oF53WithHttpInfo
     *
     * Poll the status of an asynchronous offer export (OF52)
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $trackingId The asynchronous offer export id (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF53'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\OF53Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oF53WithHttpInfo($associative_array)
    {
        $request = $this->oF53Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\OF53Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\OF53Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\OF53Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\OF53Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\OF53Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oF53Async
     *
     * Poll the status of an asynchronous offer export (OF52)
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $trackingId The asynchronous offer export id (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF53'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF53Async($associative_array)
    {
        return $this->oF53AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oF53AsyncWithHttpInfo
     *
     * Poll the status of an asynchronous offer export (OF52)
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $trackingId The asynchronous offer export id (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF53'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oF53AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\OF53Response200';
        $request = $this->oF53Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oF53'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $trackingId The asynchronous offer export id (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oF53'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oF53Request($associative_array)
    {
        // unbox the parameters from the associative array
        $trackingId = array_key_exists('trackingId', $associative_array) ? $associative_array['trackingId'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oF53'][0];
        
        // verify the required parameter 'trackingId' is set
        if ($trackingId === null || (is_array($trackingId) && count($trackingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trackingId when calling oF53'
            );
        }



        $resourcePath = '/api/offers/export/async/status/{tracking_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($trackingId !== null) {
            $resourcePath = str_replace(
                '{' . 'tracking_id' . '}',
                ObjectSerializer::toPathValue($trackingId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation p11
     *
     * List offers for each given product
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $productIds List of product&#39;s skus separated with comma. Limited to 100 values. One of the two is required product_ids or product_references. (optional)
     * @param  string|null $productReferences List of the product&#39;s identifiers with type (structure: \&quot;product_references&#x3D;&amp;lt;productIdType&amp;gt;|&amp;lt;productId&amp;gt;,&amp;lt;productIdType&amp;gt;|&amp;lt;productId&amp;gt;, ...\&quot;). Limited to 100 values.  One of the two is required product_ids or product_references.&lt;br/&gt;Example: /api/products/offers?product_references&#x3D;EAN|3120201243238 (optional)
     * @param  string|null $offerStateCodes List of offer state codes (optional)
     * @param  bool|null $allOffers If &lt;code&gt;false&lt;/code&gt; returns only active offers. If &lt;code&gt;true&lt;/code&gt; return all offers. (optional, default to false)
     * @param  string|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. If specified, only offers that can be sold on the specified channel(s) will be returned. If not, offers will be returned regardless of their channels. (optional)
     * @param  bool|null $allChannels If &lt;code&gt;false&lt;/code&gt;, filters the offers with the given channel_codes or all shop channels if no channel_codes are given. &lt;br&gt; If &lt;code&gt;true&lt;/code&gt;, filters on all shop channels and ignores the channel_codes. (optional, default to false)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  string|null $shippingZones List of shipping zones. Filter used to pick shipping prices on one or multiple shipping zones (optional)
     * @param  bool|null $allShippingZones If &lt;code&gt;false&lt;/code&gt;, filters the offers with the given shipping zones. &lt;br&gt; If &lt;code&gt;true&lt;/code&gt;, selects all shop shipping zones and ignores the provided shipping_zones. (optional, default to false)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\P11Response200
     */
    public function p11($associative_array)
    {
        list($response) = $this->p11WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation p11WithHttpInfo
     *
     * List offers for each given product
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $productIds List of product&#39;s skus separated with comma. Limited to 100 values. One of the two is required product_ids or product_references. (optional)
     * @param  string|null $productReferences List of the product&#39;s identifiers with type (structure: \&quot;product_references&#x3D;&amp;lt;productIdType&amp;gt;|&amp;lt;productId&amp;gt;,&amp;lt;productIdType&amp;gt;|&amp;lt;productId&amp;gt;, ...\&quot;). Limited to 100 values.  One of the two is required product_ids or product_references.&lt;br/&gt;Example: /api/products/offers?product_references&#x3D;EAN|3120201243238 (optional)
     * @param  string|null $offerStateCodes List of offer state codes (optional)
     * @param  bool|null $allOffers If &lt;code&gt;false&lt;/code&gt; returns only active offers. If &lt;code&gt;true&lt;/code&gt; return all offers. (optional, default to false)
     * @param  string|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. If specified, only offers that can be sold on the specified channel(s) will be returned. If not, offers will be returned regardless of their channels. (optional)
     * @param  bool|null $allChannels If &lt;code&gt;false&lt;/code&gt;, filters the offers with the given channel_codes or all shop channels if no channel_codes are given. &lt;br&gt; If &lt;code&gt;true&lt;/code&gt;, filters on all shop channels and ignores the channel_codes. (optional, default to false)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  string|null $shippingZones List of shipping zones. Filter used to pick shipping prices on one or multiple shipping zones (optional)
     * @param  bool|null $allShippingZones If &lt;code&gt;false&lt;/code&gt;, filters the offers with the given shipping zones. &lt;br&gt; If &lt;code&gt;true&lt;/code&gt;, selects all shop shipping zones and ignores the provided shipping_zones. (optional, default to false)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\P11Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function p11WithHttpInfo($associative_array)
    {
        $request = $this->p11Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\P11Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\P11Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\P11Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\P11Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\P11Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation p11Async
     *
     * List offers for each given product
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $productIds List of product&#39;s skus separated with comma. Limited to 100 values. One of the two is required product_ids or product_references. (optional)
     * @param  string|null $productReferences List of the product&#39;s identifiers with type (structure: \&quot;product_references&#x3D;&amp;lt;productIdType&amp;gt;|&amp;lt;productId&amp;gt;,&amp;lt;productIdType&amp;gt;|&amp;lt;productId&amp;gt;, ...\&quot;). Limited to 100 values.  One of the two is required product_ids or product_references.&lt;br/&gt;Example: /api/products/offers?product_references&#x3D;EAN|3120201243238 (optional)
     * @param  string|null $offerStateCodes List of offer state codes (optional)
     * @param  bool|null $allOffers If &lt;code&gt;false&lt;/code&gt; returns only active offers. If &lt;code&gt;true&lt;/code&gt; return all offers. (optional, default to false)
     * @param  string|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. If specified, only offers that can be sold on the specified channel(s) will be returned. If not, offers will be returned regardless of their channels. (optional)
     * @param  bool|null $allChannels If &lt;code&gt;false&lt;/code&gt;, filters the offers with the given channel_codes or all shop channels if no channel_codes are given. &lt;br&gt; If &lt;code&gt;true&lt;/code&gt;, filters on all shop channels and ignores the channel_codes. (optional, default to false)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  string|null $shippingZones List of shipping zones. Filter used to pick shipping prices on one or multiple shipping zones (optional)
     * @param  bool|null $allShippingZones If &lt;code&gt;false&lt;/code&gt;, filters the offers with the given shipping zones. &lt;br&gt; If &lt;code&gt;true&lt;/code&gt;, selects all shop shipping zones and ignores the provided shipping_zones. (optional, default to false)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function p11Async($associative_array)
    {
        return $this->p11AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation p11AsyncWithHttpInfo
     *
     * List offers for each given product
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $productIds List of product&#39;s skus separated with comma. Limited to 100 values. One of the two is required product_ids or product_references. (optional)
     * @param  string|null $productReferences List of the product&#39;s identifiers with type (structure: \&quot;product_references&#x3D;&amp;lt;productIdType&amp;gt;|&amp;lt;productId&amp;gt;,&amp;lt;productIdType&amp;gt;|&amp;lt;productId&amp;gt;, ...\&quot;). Limited to 100 values.  One of the two is required product_ids or product_references.&lt;br/&gt;Example: /api/products/offers?product_references&#x3D;EAN|3120201243238 (optional)
     * @param  string|null $offerStateCodes List of offer state codes (optional)
     * @param  bool|null $allOffers If &lt;code&gt;false&lt;/code&gt; returns only active offers. If &lt;code&gt;true&lt;/code&gt; return all offers. (optional, default to false)
     * @param  string|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. If specified, only offers that can be sold on the specified channel(s) will be returned. If not, offers will be returned regardless of their channels. (optional)
     * @param  bool|null $allChannels If &lt;code&gt;false&lt;/code&gt;, filters the offers with the given channel_codes or all shop channels if no channel_codes are given. &lt;br&gt; If &lt;code&gt;true&lt;/code&gt;, filters on all shop channels and ignores the channel_codes. (optional, default to false)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  string|null $shippingZones List of shipping zones. Filter used to pick shipping prices on one or multiple shipping zones (optional)
     * @param  bool|null $allShippingZones If &lt;code&gt;false&lt;/code&gt;, filters the offers with the given shipping zones. &lt;br&gt; If &lt;code&gt;true&lt;/code&gt;, selects all shop shipping zones and ignores the provided shipping_zones. (optional, default to false)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function p11AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\P11Response200';
        $request = $this->p11Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'p11'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $productIds List of product&#39;s skus separated with comma. Limited to 100 values. One of the two is required product_ids or product_references. (optional)
     * @param  string|null $productReferences List of the product&#39;s identifiers with type (structure: \&quot;product_references&#x3D;&amp;lt;productIdType&amp;gt;|&amp;lt;productId&amp;gt;,&amp;lt;productIdType&amp;gt;|&amp;lt;productId&amp;gt;, ...\&quot;). Limited to 100 values.  One of the two is required product_ids or product_references.&lt;br/&gt;Example: /api/products/offers?product_references&#x3D;EAN|3120201243238 (optional)
     * @param  string|null $offerStateCodes List of offer state codes (optional)
     * @param  bool|null $allOffers If &lt;code&gt;false&lt;/code&gt; returns only active offers. If &lt;code&gt;true&lt;/code&gt; return all offers. (optional, default to false)
     * @param  string|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. If specified, only offers that can be sold on the specified channel(s) will be returned. If not, offers will be returned regardless of their channels. (optional)
     * @param  bool|null $allChannels If &lt;code&gt;false&lt;/code&gt;, filters the offers with the given channel_codes or all shop channels if no channel_codes are given. &lt;br&gt; If &lt;code&gt;true&lt;/code&gt;, filters on all shop channels and ignores the channel_codes. (optional, default to false)
     * @param  string|null $pricingChannelCode Filter used to pick prices on a specific channel (optional)
     * @param  string|null $pricingCustomerOrganizationId For Customer Pricing users only. Customer identifier code the API will use to return all prices and applicable price for this organization. Ignored if value does not exist. (optional)
     * @param  string|null $shippingZones List of shipping zones. Filter used to pick shipping prices on one or multiple shipping zones (optional)
     * @param  bool|null $allShippingZones If &lt;code&gt;false&lt;/code&gt;, filters the offers with the given shipping zones. &lt;br&gt; If &lt;code&gt;true&lt;/code&gt;, selects all shop shipping zones and ignores the provided shipping_zones. (optional, default to false)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function p11Request($associative_array)
    {
        // unbox the parameters from the associative array
        $productIds = array_key_exists('productIds', $associative_array) ? $associative_array['productIds'] : null;
        $productReferences = array_key_exists('productReferences', $associative_array) ? $associative_array['productReferences'] : null;
        $offerStateCodes = array_key_exists('offerStateCodes', $associative_array) ? $associative_array['offerStateCodes'] : null;
        $allOffers = array_key_exists('allOffers', $associative_array) ? $associative_array['allOffers'] : false;
        $channelCodes = array_key_exists('channelCodes', $associative_array) ? $associative_array['channelCodes'] : null;
        $allChannels = array_key_exists('allChannels', $associative_array) ? $associative_array['allChannels'] : false;
        $pricingChannelCode = array_key_exists('pricingChannelCode', $associative_array) ? $associative_array['pricingChannelCode'] : null;
        $pricingCustomerOrganizationId = array_key_exists('pricingCustomerOrganizationId', $associative_array) ? $associative_array['pricingCustomerOrganizationId'] : null;
        $shippingZones = array_key_exists('shippingZones', $associative_array) ? $associative_array['shippingZones'] : null;
        $allShippingZones = array_key_exists('allShippingZones', $associative_array) ? $associative_array['allShippingZones'] : false;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $locale = array_key_exists('locale', $associative_array) ? $associative_array['locale'] : null;
        $max = array_key_exists('max', $associative_array) ? $associative_array['max'] : null;
        $offset = array_key_exists('offset', $associative_array) ? $associative_array['offset'] : null;
        $sort = array_key_exists('sort', $associative_array) ? $associative_array['sort'] : null;
        $order = array_key_exists('order', $associative_array) ? $associative_array['order'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['p11'][0];
        

















        $resourcePath = '/api/products/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $productIds,
            'product_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $productReferences,
            'product_references', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offerStateCodes,
            'offer_state_codes', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allOffers,
            'all_offers', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelCodes,
            'channel_codes', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allChannels,
            'all_channels', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pricingChannelCode,
            'pricing_channel_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pricingCustomerOrganizationId,
            'pricing_customer_organization_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shippingZones,
            'shipping_zones', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allShippingZones,
            'all_shipping_zones', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max,
            'max', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pRI01
     *
     * Import a price file
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \SplFileObject|null $file Import CSV file to upload. Use &lt;code&gt;multipart/form-data&lt;/code&gt; with name &lt;code&gt;file&lt;/code&gt;.&lt;br/&gt; Csv format:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;\\\&quot;offer-sku\\\&quot;;\\\&quot;price\\\&quot;;\\\&quot;discount-price\\\&quot;;\\\&quot;discount-start-date\\\&quot;;\\\&quot;discount-end-date\\\&quot;&lt;/code&gt;&lt;/li&gt; &lt;ul&gt;     &lt;li&gt;1 line &#x3D; 1 offer price&lt;/li&gt;     &lt;li&gt;List prices for the same offer together&lt;/li&gt;     &lt;li&gt;Limits: 50 prices can be created for an offer&lt;/li&gt; &lt;/ul&gt; &lt;li&gt;&lt;b&gt;Volume Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;price-ranges&lt;/code&gt; and &lt;code&gt;discount-ranges&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Channel Pricing users&lt;/b&gt;: use additional column &lt;code&gt;channels&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Scheduled Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;start-date&lt;/code&gt; and &lt;code&gt;end-date&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Customer Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;customer-organization-ids&lt;/code&gt; and &lt;code&gt;customer-group-ids&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;/ul&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI01'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\PRI01Response201
     */
    public function pRI01($associative_array)
    {
        list($response) = $this->pRI01WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation pRI01WithHttpInfo
     *
     * Import a price file
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \SplFileObject|null $file Import CSV file to upload. Use &lt;code&gt;multipart/form-data&lt;/code&gt; with name &lt;code&gt;file&lt;/code&gt;.&lt;br/&gt; Csv format:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;\\\&quot;offer-sku\\\&quot;;\\\&quot;price\\\&quot;;\\\&quot;discount-price\\\&quot;;\\\&quot;discount-start-date\\\&quot;;\\\&quot;discount-end-date\\\&quot;&lt;/code&gt;&lt;/li&gt; &lt;ul&gt;     &lt;li&gt;1 line &#x3D; 1 offer price&lt;/li&gt;     &lt;li&gt;List prices for the same offer together&lt;/li&gt;     &lt;li&gt;Limits: 50 prices can be created for an offer&lt;/li&gt; &lt;/ul&gt; &lt;li&gt;&lt;b&gt;Volume Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;price-ranges&lt;/code&gt; and &lt;code&gt;discount-ranges&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Channel Pricing users&lt;/b&gt;: use additional column &lt;code&gt;channels&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Scheduled Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;start-date&lt;/code&gt; and &lt;code&gt;end-date&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Customer Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;customer-organization-ids&lt;/code&gt; and &lt;code&gt;customer-group-ids&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;/ul&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI01'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\PRI01Response201, HTTP status code, HTTP response headers (array of strings)
     */
    public function pRI01WithHttpInfo($associative_array)
    {
        $request = $this->pRI01Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Mirakl\Model\PRI01Response201' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\PRI01Response201' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\PRI01Response201', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\PRI01Response201';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\PRI01Response201',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pRI01Async
     *
     * Import a price file
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \SplFileObject|null $file Import CSV file to upload. Use &lt;code&gt;multipart/form-data&lt;/code&gt; with name &lt;code&gt;file&lt;/code&gt;.&lt;br/&gt; Csv format:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;\\\&quot;offer-sku\\\&quot;;\\\&quot;price\\\&quot;;\\\&quot;discount-price\\\&quot;;\\\&quot;discount-start-date\\\&quot;;\\\&quot;discount-end-date\\\&quot;&lt;/code&gt;&lt;/li&gt; &lt;ul&gt;     &lt;li&gt;1 line &#x3D; 1 offer price&lt;/li&gt;     &lt;li&gt;List prices for the same offer together&lt;/li&gt;     &lt;li&gt;Limits: 50 prices can be created for an offer&lt;/li&gt; &lt;/ul&gt; &lt;li&gt;&lt;b&gt;Volume Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;price-ranges&lt;/code&gt; and &lt;code&gt;discount-ranges&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Channel Pricing users&lt;/b&gt;: use additional column &lt;code&gt;channels&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Scheduled Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;start-date&lt;/code&gt; and &lt;code&gt;end-date&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Customer Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;customer-organization-ids&lt;/code&gt; and &lt;code&gt;customer-group-ids&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;/ul&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pRI01Async($associative_array)
    {
        return $this->pRI01AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pRI01AsyncWithHttpInfo
     *
     * Import a price file
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \SplFileObject|null $file Import CSV file to upload. Use &lt;code&gt;multipart/form-data&lt;/code&gt; with name &lt;code&gt;file&lt;/code&gt;.&lt;br/&gt; Csv format:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;\\\&quot;offer-sku\\\&quot;;\\\&quot;price\\\&quot;;\\\&quot;discount-price\\\&quot;;\\\&quot;discount-start-date\\\&quot;;\\\&quot;discount-end-date\\\&quot;&lt;/code&gt;&lt;/li&gt; &lt;ul&gt;     &lt;li&gt;1 line &#x3D; 1 offer price&lt;/li&gt;     &lt;li&gt;List prices for the same offer together&lt;/li&gt;     &lt;li&gt;Limits: 50 prices can be created for an offer&lt;/li&gt; &lt;/ul&gt; &lt;li&gt;&lt;b&gt;Volume Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;price-ranges&lt;/code&gt; and &lt;code&gt;discount-ranges&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Channel Pricing users&lt;/b&gt;: use additional column &lt;code&gt;channels&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Scheduled Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;start-date&lt;/code&gt; and &lt;code&gt;end-date&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Customer Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;customer-organization-ids&lt;/code&gt; and &lt;code&gt;customer-group-ids&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;/ul&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pRI01AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\PRI01Response201';
        $request = $this->pRI01Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pRI01'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \SplFileObject|null $file Import CSV file to upload. Use &lt;code&gt;multipart/form-data&lt;/code&gt; with name &lt;code&gt;file&lt;/code&gt;.&lt;br/&gt; Csv format:&lt;br/&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;\\\&quot;offer-sku\\\&quot;;\\\&quot;price\\\&quot;;\\\&quot;discount-price\\\&quot;;\\\&quot;discount-start-date\\\&quot;;\\\&quot;discount-end-date\\\&quot;&lt;/code&gt;&lt;/li&gt; &lt;ul&gt;     &lt;li&gt;1 line &#x3D; 1 offer price&lt;/li&gt;     &lt;li&gt;List prices for the same offer together&lt;/li&gt;     &lt;li&gt;Limits: 50 prices can be created for an offer&lt;/li&gt; &lt;/ul&gt; &lt;li&gt;&lt;b&gt;Volume Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;price-ranges&lt;/code&gt; and &lt;code&gt;discount-ranges&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Channel Pricing users&lt;/b&gt;: use additional column &lt;code&gt;channels&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Scheduled Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;start-date&lt;/code&gt; and &lt;code&gt;end-date&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;li&gt;&lt;b&gt;Customer Pricing users&lt;/b&gt;: use additional columns &lt;code&gt;customer-organization-ids&lt;/code&gt; and &lt;code&gt;customer-group-ids&lt;/code&gt; Not applicable for Dropship offers&lt;/li&gt; &lt;/ul&gt; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pRI01Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $file = array_key_exists('file', $associative_array) ? $associative_array['file'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['pRI01'][0];
        



        $resourcePath = '/api/offers/pricing/imports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);



        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pRI02
     *
     * Get information and statistics about an offer pricing import
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $importId Import identifiers (optional)
     * @param  \DateTime|null $startDate Start creation date for filtering (optional)
     * @param  \DateTime|null $endDate End creation date for filtering (optional)
     * @param  string|null $status Offer import status (optional)
     * @param  string[]|null $origins List of offer pricing import origins for filtering. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI02'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\PRI02Response200
     */
    public function pRI02($associative_array)
    {
        list($response) = $this->pRI02WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation pRI02WithHttpInfo
     *
     * Get information and statistics about an offer pricing import
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $importId Import identifiers (optional)
     * @param  \DateTime|null $startDate Start creation date for filtering (optional)
     * @param  \DateTime|null $endDate End creation date for filtering (optional)
     * @param  string|null $status Offer import status (optional)
     * @param  string[]|null $origins List of offer pricing import origins for filtering. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI02'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\PRI02Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function pRI02WithHttpInfo($associative_array)
    {
        $request = $this->pRI02Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\PRI02Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\PRI02Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\PRI02Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\PRI02Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\PRI02Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pRI02Async
     *
     * Get information and statistics about an offer pricing import
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $importId Import identifiers (optional)
     * @param  \DateTime|null $startDate Start creation date for filtering (optional)
     * @param  \DateTime|null $endDate End creation date for filtering (optional)
     * @param  string|null $status Offer import status (optional)
     * @param  string[]|null $origins List of offer pricing import origins for filtering. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI02'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pRI02Async($associative_array)
    {
        return $this->pRI02AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pRI02AsyncWithHttpInfo
     *
     * Get information and statistics about an offer pricing import
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $importId Import identifiers (optional)
     * @param  \DateTime|null $startDate Start creation date for filtering (optional)
     * @param  \DateTime|null $endDate End creation date for filtering (optional)
     * @param  string|null $status Offer import status (optional)
     * @param  string[]|null $origins List of offer pricing import origins for filtering. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI02'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pRI02AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\PRI02Response200';
        $request = $this->pRI02Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pRI02'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $importId Import identifiers (optional)
     * @param  \DateTime|null $startDate Start creation date for filtering (optional)
     * @param  \DateTime|null $endDate End creation date for filtering (optional)
     * @param  string|null $status Offer import status (optional)
     * @param  string[]|null $origins List of offer pricing import origins for filtering. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI02'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pRI02Request($associative_array)
    {
        // unbox the parameters from the associative array
        $importId = array_key_exists('importId', $associative_array) ? $associative_array['importId'] : null;
        $startDate = array_key_exists('startDate', $associative_array) ? $associative_array['startDate'] : null;
        $endDate = array_key_exists('endDate', $associative_array) ? $associative_array['endDate'] : null;
        $status = array_key_exists('status', $associative_array) ? $associative_array['status'] : null;
        $origins = array_key_exists('origins', $associative_array) ? $associative_array['origins'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $pageToken = array_key_exists('pageToken', $associative_array) ? $associative_array['pageToken'] : null;
        $sort = array_key_exists('sort', $associative_array) ? $associative_array['sort'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['pRI02'][0];
        









        $resourcePath = '/api/offers/pricing/imports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $importId,
            'import_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $origins,
            'origins', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageToken,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pRI03
     *
     * Get the error report for a price import in CSV format
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $importId Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI03'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function pRI03($associative_array)
    {
        list($response) = $this->pRI03WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation pRI03WithHttpInfo
     *
     * Get the error report for a price import in CSV format
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $importId Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI03'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function pRI03WithHttpInfo($associative_array)
    {
        $request = $this->pRI03Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pRI03Async
     *
     * Get the error report for a price import in CSV format
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $importId Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI03'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pRI03Async($associative_array)
    {
        return $this->pRI03AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pRI03AsyncWithHttpInfo
     *
     * Get the error report for a price import in CSV format
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $importId Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI03'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pRI03AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\SplFileObject';
        $request = $this->pRI03Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pRI03'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $importId Import identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pRI03'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pRI03Request($associative_array)
    {
        // unbox the parameters from the associative array
        $importId = array_key_exists('importId', $associative_array) ? $associative_array['importId'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['pRI03'][0];
        
        // verify the required parameter 'importId' is set
        if ($importId === null || (is_array($importId) && count($importId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $importId when calling pRI03'
            );
        }



        $resourcePath = '/api/offers/pricing/imports/{import_id}/error_report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($importId !== null) {
            $resourcePath = str_replace(
                '{' . 'import_id' . '}',
                ObjectSerializer::toPathValue($importId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
