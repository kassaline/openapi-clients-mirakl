<?php
/**
 * MessagesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Mirakl\ApiException;
use OpenAPI\Client\Mirakl\Configuration;
use OpenAPI\Client\Mirakl\HeaderSelector;
use OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * MessagesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MessagesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'm10' => [
            'application/json',
        ],
        'm11' => [
            'application/json',
        ],
        'm13' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation m10
     *
     * Retrieve a thread
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $threadId The identifier of the thread to retrieve. (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m10'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\M10Response200
     */
    public function m10($associative_array)
    {
        list($response) = $this->m10WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation m10WithHttpInfo
     *
     * Retrieve a thread
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $threadId The identifier of the thread to retrieve. (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m10'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\M10Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function m10WithHttpInfo($associative_array)
    {
        $request = $this->m10Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\M10Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\M10Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\M10Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\M10Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\M10Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation m10Async
     *
     * Retrieve a thread
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $threadId The identifier of the thread to retrieve. (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m10'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function m10Async($associative_array)
    {
        return $this->m10AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation m10AsyncWithHttpInfo
     *
     * Retrieve a thread
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $threadId The identifier of the thread to retrieve. (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m10'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function m10AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\M10Response200';
        $request = $this->m10Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'm10'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $threadId The identifier of the thread to retrieve. (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m10'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function m10Request($associative_array)
    {
        // unbox the parameters from the associative array
        $threadId = array_key_exists('threadId', $associative_array) ? $associative_array['threadId'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['m10'][0];
        
        // verify the required parameter 'threadId' is set
        if ($threadId === null || (is_array($threadId) && count($threadId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $threadId when calling m10'
            );
        }



        $resourcePath = '/api/inbox/threads/{thread_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($threadId !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($threadId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation m11
     *
     * List all threads
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $entityType Entity type to include in result (default: include all).&lt;br/&gt; Available values: MMP_ORDER, MMP_OFFER, MPS_ORDER, MPS_SERVICE, SELLER_OPERATOR (optional)
     * @param  string[]|null $entityId Comma separated list of Entity id to include in result (default: include all).&lt;br/&gt; The entity_type must be specified to use this filter, otherwise an error 400 will be returned.&lt;br/&gt; Example of an entity_id query: entity_id&#x3D;order1-A,order20-A,order13-A&amp;entity_type&#x3D;MMP_ORDER (optional)
     * @param  \DateTime|null $updatedSince Retrieve threads modified at or after this date. (optional)
     * @param  bool|null $withMessages True to include message details. Limited to the last 100 messages received on each thread. (optional, default to false)
     * @param  string[]|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. &lt;br/&gt; If specified, only order messages linked to the given channels will be returned (Whatever the value of &lt;code&gt;entity_type&lt;/code&gt;). &lt;br/&gt; Otherwise, messages will be returned regardless of their channels. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m11'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\M11Response200
     */
    public function m11($associative_array)
    {
        list($response) = $this->m11WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation m11WithHttpInfo
     *
     * List all threads
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $entityType Entity type to include in result (default: include all).&lt;br/&gt; Available values: MMP_ORDER, MMP_OFFER, MPS_ORDER, MPS_SERVICE, SELLER_OPERATOR (optional)
     * @param  string[]|null $entityId Comma separated list of Entity id to include in result (default: include all).&lt;br/&gt; The entity_type must be specified to use this filter, otherwise an error 400 will be returned.&lt;br/&gt; Example of an entity_id query: entity_id&#x3D;order1-A,order20-A,order13-A&amp;entity_type&#x3D;MMP_ORDER (optional)
     * @param  \DateTime|null $updatedSince Retrieve threads modified at or after this date. (optional)
     * @param  bool|null $withMessages True to include message details. Limited to the last 100 messages received on each thread. (optional, default to false)
     * @param  string[]|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. &lt;br/&gt; If specified, only order messages linked to the given channels will be returned (Whatever the value of &lt;code&gt;entity_type&lt;/code&gt;). &lt;br/&gt; Otherwise, messages will be returned regardless of their channels. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m11'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\M11Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function m11WithHttpInfo($associative_array)
    {
        $request = $this->m11Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\M11Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\M11Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\M11Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\M11Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\M11Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation m11Async
     *
     * List all threads
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $entityType Entity type to include in result (default: include all).&lt;br/&gt; Available values: MMP_ORDER, MMP_OFFER, MPS_ORDER, MPS_SERVICE, SELLER_OPERATOR (optional)
     * @param  string[]|null $entityId Comma separated list of Entity id to include in result (default: include all).&lt;br/&gt; The entity_type must be specified to use this filter, otherwise an error 400 will be returned.&lt;br/&gt; Example of an entity_id query: entity_id&#x3D;order1-A,order20-A,order13-A&amp;entity_type&#x3D;MMP_ORDER (optional)
     * @param  \DateTime|null $updatedSince Retrieve threads modified at or after this date. (optional)
     * @param  bool|null $withMessages True to include message details. Limited to the last 100 messages received on each thread. (optional, default to false)
     * @param  string[]|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. &lt;br/&gt; If specified, only order messages linked to the given channels will be returned (Whatever the value of &lt;code&gt;entity_type&lt;/code&gt;). &lt;br/&gt; Otherwise, messages will be returned regardless of their channels. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function m11Async($associative_array)
    {
        return $this->m11AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation m11AsyncWithHttpInfo
     *
     * List all threads
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $entityType Entity type to include in result (default: include all).&lt;br/&gt; Available values: MMP_ORDER, MMP_OFFER, MPS_ORDER, MPS_SERVICE, SELLER_OPERATOR (optional)
     * @param  string[]|null $entityId Comma separated list of Entity id to include in result (default: include all).&lt;br/&gt; The entity_type must be specified to use this filter, otherwise an error 400 will be returned.&lt;br/&gt; Example of an entity_id query: entity_id&#x3D;order1-A,order20-A,order13-A&amp;entity_type&#x3D;MMP_ORDER (optional)
     * @param  \DateTime|null $updatedSince Retrieve threads modified at or after this date. (optional)
     * @param  bool|null $withMessages True to include message details. Limited to the last 100 messages received on each thread. (optional, default to false)
     * @param  string[]|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. &lt;br/&gt; If specified, only order messages linked to the given channels will be returned (Whatever the value of &lt;code&gt;entity_type&lt;/code&gt;). &lt;br/&gt; Otherwise, messages will be returned regardless of their channels. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function m11AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\M11Response200';
        $request = $this->m11Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'm11'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $entityType Entity type to include in result (default: include all).&lt;br/&gt; Available values: MMP_ORDER, MMP_OFFER, MPS_ORDER, MPS_SERVICE, SELLER_OPERATOR (optional)
     * @param  string[]|null $entityId Comma separated list of Entity id to include in result (default: include all).&lt;br/&gt; The entity_type must be specified to use this filter, otherwise an error 400 will be returned.&lt;br/&gt; Example of an entity_id query: entity_id&#x3D;order1-A,order20-A,order13-A&amp;entity_type&#x3D;MMP_ORDER (optional)
     * @param  \DateTime|null $updatedSince Retrieve threads modified at or after this date. (optional)
     * @param  bool|null $withMessages True to include message details. Limited to the last 100 messages received on each thread. (optional, default to false)
     * @param  string[]|null $channelCodes List of the channel codes to filter with, using a comma (,) as a separator. &lt;br/&gt; If specified, only order messages linked to the given channels will be returned (Whatever the value of &lt;code&gt;entity_type&lt;/code&gt;). &lt;br/&gt; Otherwise, messages will be returned regardless of their channels. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function m11Request($associative_array)
    {
        // unbox the parameters from the associative array
        $entityType = array_key_exists('entityType', $associative_array) ? $associative_array['entityType'] : null;
        $entityId = array_key_exists('entityId', $associative_array) ? $associative_array['entityId'] : null;
        $updatedSince = array_key_exists('updatedSince', $associative_array) ? $associative_array['updatedSince'] : null;
        $withMessages = array_key_exists('withMessages', $associative_array) ? $associative_array['withMessages'] : false;
        $channelCodes = array_key_exists('channelCodes', $associative_array) ? $associative_array['channelCodes'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $pageToken = array_key_exists('pageToken', $associative_array) ? $associative_array['pageToken'] : null;
        $sort = array_key_exists('sort', $associative_array) ? $associative_array['sort'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['m11'][0];
        









        $resourcePath = '/api/inbox/threads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityType,
            'entity_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityId,
            'entity_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updatedSince,
            'updated_since', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $withMessages,
            'with_messages', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelCodes,
            'channel_codes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageToken,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation m13
     *
     * Download an attachment
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $attachmentId The identifier of the attachment to retrieve. (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m13'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function m13($associative_array)
    {
        list($response) = $this->m13WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation m13WithHttpInfo
     *
     * Download an attachment
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $attachmentId The identifier of the attachment to retrieve. (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m13'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function m13WithHttpInfo($associative_array)
    {
        $request = $this->m13Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation m13Async
     *
     * Download an attachment
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $attachmentId The identifier of the attachment to retrieve. (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m13'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function m13Async($associative_array)
    {
        return $this->m13AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation m13AsyncWithHttpInfo
     *
     * Download an attachment
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $attachmentId The identifier of the attachment to retrieve. (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m13'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function m13AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\SplFileObject';
        $request = $this->m13Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'm13'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $attachmentId The identifier of the attachment to retrieve. (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['m13'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function m13Request($associative_array)
    {
        // unbox the parameters from the associative array
        $attachmentId = array_key_exists('attachmentId', $associative_array) ? $associative_array['attachmentId'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['m13'][0];
        
        // verify the required parameter 'attachmentId' is set
        if ($attachmentId === null || (is_array($attachmentId) && count($attachmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachmentId when calling m13'
            );
        }



        $resourcePath = '/api/inbox/threads/{attachment_id}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($attachmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'attachment_id' . '}',
                ObjectSerializer::toPathValue($attachmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
