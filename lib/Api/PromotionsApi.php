<?php
/**
 * PromotionsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Mirakl\ApiException;
use OpenAPI\Client\Mirakl\Configuration;
use OpenAPI\Client\Mirakl\HeaderSelector;
use OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * PromotionsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PromotionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'pR01' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation pR01
     *
     * List promotions
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $ids A comma separated list of identifiers for a promotion (optional)
     * @param  string|null $types A comma separated list of types for a promotion [AMOUNT_OFF|FREE_ITEMS|PERCENTAGE_OFF] (optional)
     * @param  string|null $states A comma separated list of states for a promotion [PENDING|ACTIVE|EXPIRED|PENDING_APPROVAL|REJECTED|ALL] (optional, default to 'ACTIVE')
     * @param  \DateTime|null $endingAfter Returns promotions which ended or will end after this date (optional)
     * @param  \DateTime|null $startingBefore Returns promotions which started or will start before this date (optional)
     * @param  \DateTime|null $dateCreatedFrom Filter promotion creation date lower limit (optional)
     * @param  \DateTime|null $dateCreatedTo Filter promotion creation date upper limit (optional)
     * @param  \DateTime|null $lastRequestDate Last request date and time. We recommend using the differential mode along with the &lt;code&gt;states&lt;/code&gt; parameter. (optional)
     * @param  string|null $locale The locale to filter the medias and the public descriptions with. If not specified, medias and public descriptions of all locales are returned.If specified, only the media and the public description matching the locale will be returned, or, if not exist, the one matching the platform default locale. (optional)
     * @param  string|null $triggerOfferIds Promotion-triggering offer ids, separated by commas (optional)
     * @param  string|null $rewardOfferIds Promotion reward offer ids, separated by commas (optional)
     * @param  string|null $channelCodes Channel codes on which promotions apply, separated by commas (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pR01'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\PR01Response200
     */
    public function pR01($associative_array)
    {
        list($response) = $this->pR01WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation pR01WithHttpInfo
     *
     * List promotions
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $ids A comma separated list of identifiers for a promotion (optional)
     * @param  string|null $types A comma separated list of types for a promotion [AMOUNT_OFF|FREE_ITEMS|PERCENTAGE_OFF] (optional)
     * @param  string|null $states A comma separated list of states for a promotion [PENDING|ACTIVE|EXPIRED|PENDING_APPROVAL|REJECTED|ALL] (optional, default to 'ACTIVE')
     * @param  \DateTime|null $endingAfter Returns promotions which ended or will end after this date (optional)
     * @param  \DateTime|null $startingBefore Returns promotions which started or will start before this date (optional)
     * @param  \DateTime|null $dateCreatedFrom Filter promotion creation date lower limit (optional)
     * @param  \DateTime|null $dateCreatedTo Filter promotion creation date upper limit (optional)
     * @param  \DateTime|null $lastRequestDate Last request date and time. We recommend using the differential mode along with the &lt;code&gt;states&lt;/code&gt; parameter. (optional)
     * @param  string|null $locale The locale to filter the medias and the public descriptions with. If not specified, medias and public descriptions of all locales are returned.If specified, only the media and the public description matching the locale will be returned, or, if not exist, the one matching the platform default locale. (optional)
     * @param  string|null $triggerOfferIds Promotion-triggering offer ids, separated by commas (optional)
     * @param  string|null $rewardOfferIds Promotion reward offer ids, separated by commas (optional)
     * @param  string|null $channelCodes Channel codes on which promotions apply, separated by commas (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pR01'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\PR01Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function pR01WithHttpInfo($associative_array)
    {
        $request = $this->pR01Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\PR01Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\PR01Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\PR01Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\PR01Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\PR01Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pR01Async
     *
     * List promotions
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $ids A comma separated list of identifiers for a promotion (optional)
     * @param  string|null $types A comma separated list of types for a promotion [AMOUNT_OFF|FREE_ITEMS|PERCENTAGE_OFF] (optional)
     * @param  string|null $states A comma separated list of states for a promotion [PENDING|ACTIVE|EXPIRED|PENDING_APPROVAL|REJECTED|ALL] (optional, default to 'ACTIVE')
     * @param  \DateTime|null $endingAfter Returns promotions which ended or will end after this date (optional)
     * @param  \DateTime|null $startingBefore Returns promotions which started or will start before this date (optional)
     * @param  \DateTime|null $dateCreatedFrom Filter promotion creation date lower limit (optional)
     * @param  \DateTime|null $dateCreatedTo Filter promotion creation date upper limit (optional)
     * @param  \DateTime|null $lastRequestDate Last request date and time. We recommend using the differential mode along with the &lt;code&gt;states&lt;/code&gt; parameter. (optional)
     * @param  string|null $locale The locale to filter the medias and the public descriptions with. If not specified, medias and public descriptions of all locales are returned.If specified, only the media and the public description matching the locale will be returned, or, if not exist, the one matching the platform default locale. (optional)
     * @param  string|null $triggerOfferIds Promotion-triggering offer ids, separated by commas (optional)
     * @param  string|null $rewardOfferIds Promotion reward offer ids, separated by commas (optional)
     * @param  string|null $channelCodes Channel codes on which promotions apply, separated by commas (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pR01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pR01Async($associative_array)
    {
        return $this->pR01AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pR01AsyncWithHttpInfo
     *
     * List promotions
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $ids A comma separated list of identifiers for a promotion (optional)
     * @param  string|null $types A comma separated list of types for a promotion [AMOUNT_OFF|FREE_ITEMS|PERCENTAGE_OFF] (optional)
     * @param  string|null $states A comma separated list of states for a promotion [PENDING|ACTIVE|EXPIRED|PENDING_APPROVAL|REJECTED|ALL] (optional, default to 'ACTIVE')
     * @param  \DateTime|null $endingAfter Returns promotions which ended or will end after this date (optional)
     * @param  \DateTime|null $startingBefore Returns promotions which started or will start before this date (optional)
     * @param  \DateTime|null $dateCreatedFrom Filter promotion creation date lower limit (optional)
     * @param  \DateTime|null $dateCreatedTo Filter promotion creation date upper limit (optional)
     * @param  \DateTime|null $lastRequestDate Last request date and time. We recommend using the differential mode along with the &lt;code&gt;states&lt;/code&gt; parameter. (optional)
     * @param  string|null $locale The locale to filter the medias and the public descriptions with. If not specified, medias and public descriptions of all locales are returned.If specified, only the media and the public description matching the locale will be returned, or, if not exist, the one matching the platform default locale. (optional)
     * @param  string|null $triggerOfferIds Promotion-triggering offer ids, separated by commas (optional)
     * @param  string|null $rewardOfferIds Promotion reward offer ids, separated by commas (optional)
     * @param  string|null $channelCodes Channel codes on which promotions apply, separated by commas (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pR01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pR01AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\PR01Response200';
        $request = $this->pR01Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pR01'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $ids A comma separated list of identifiers for a promotion (optional)
     * @param  string|null $types A comma separated list of types for a promotion [AMOUNT_OFF|FREE_ITEMS|PERCENTAGE_OFF] (optional)
     * @param  string|null $states A comma separated list of states for a promotion [PENDING|ACTIVE|EXPIRED|PENDING_APPROVAL|REJECTED|ALL] (optional, default to 'ACTIVE')
     * @param  \DateTime|null $endingAfter Returns promotions which ended or will end after this date (optional)
     * @param  \DateTime|null $startingBefore Returns promotions which started or will start before this date (optional)
     * @param  \DateTime|null $dateCreatedFrom Filter promotion creation date lower limit (optional)
     * @param  \DateTime|null $dateCreatedTo Filter promotion creation date upper limit (optional)
     * @param  \DateTime|null $lastRequestDate Last request date and time. We recommend using the differential mode along with the &lt;code&gt;states&lt;/code&gt; parameter. (optional)
     * @param  string|null $locale The locale to filter the medias and the public descriptions with. If not specified, medias and public descriptions of all locales are returned.If specified, only the media and the public description matching the locale will be returned, or, if not exist, the one matching the platform default locale. (optional)
     * @param  string|null $triggerOfferIds Promotion-triggering offer ids, separated by commas (optional)
     * @param  string|null $rewardOfferIds Promotion reward offer ids, separated by commas (optional)
     * @param  string|null $channelCodes Channel codes on which promotions apply, separated by commas (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pR01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pR01Request($associative_array)
    {
        // unbox the parameters from the associative array
        $ids = array_key_exists('ids', $associative_array) ? $associative_array['ids'] : null;
        $types = array_key_exists('types', $associative_array) ? $associative_array['types'] : null;
        $states = array_key_exists('states', $associative_array) ? $associative_array['states'] : 'ACTIVE';
        $endingAfter = array_key_exists('endingAfter', $associative_array) ? $associative_array['endingAfter'] : null;
        $startingBefore = array_key_exists('startingBefore', $associative_array) ? $associative_array['startingBefore'] : null;
        $dateCreatedFrom = array_key_exists('dateCreatedFrom', $associative_array) ? $associative_array['dateCreatedFrom'] : null;
        $dateCreatedTo = array_key_exists('dateCreatedTo', $associative_array) ? $associative_array['dateCreatedTo'] : null;
        $lastRequestDate = array_key_exists('lastRequestDate', $associative_array) ? $associative_array['lastRequestDate'] : null;
        $locale = array_key_exists('locale', $associative_array) ? $associative_array['locale'] : null;
        $triggerOfferIds = array_key_exists('triggerOfferIds', $associative_array) ? $associative_array['triggerOfferIds'] : null;
        $rewardOfferIds = array_key_exists('rewardOfferIds', $associative_array) ? $associative_array['rewardOfferIds'] : null;
        $channelCodes = array_key_exists('channelCodes', $associative_array) ? $associative_array['channelCodes'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $max = array_key_exists('max', $associative_array) ? $associative_array['max'] : null;
        $offset = array_key_exists('offset', $associative_array) ? $associative_array['offset'] : null;
        $sort = array_key_exists('sort', $associative_array) ? $associative_array['sort'] : null;
        $order = array_key_exists('order', $associative_array) ? $associative_array['order'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['pR01'][0];
        


















        $resourcePath = '/api/promotions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $types,
            'types', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $states,
            'states', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endingAfter,
            'ending_after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startingBefore,
            'starting_before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateCreatedFrom,
            'date_created_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateCreatedTo,
            'date_created_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastRequestDate,
            'last_request_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $triggerOfferIds,
            'trigger_offer_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rewardOfferIds,
            'reward_offer_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelCodes,
            'channel_codes', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max,
            'max', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
