<?php
/**
 * InvoicingAndAccountingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Mirakl\ApiException;
use OpenAPI\Client\Mirakl\Configuration;
use OpenAPI\Client\Mirakl\HeaderSelector;
use OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * InvoicingAndAccountingApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvoicingAndAccountingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'dR11' => [
            'application/json',
        ],
        'dR12' => [
            'application/json',
        ],
        'dR73' => [
            'application/json',
        ],
        'iV01' => [
            'application/json',
        ],
        'iV02' => [
            'application/json',
        ],
        'tL02' => [
            'application/json',
        ],
        'tL03' => [
            'application/json',
        ],
        'tL04' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation dR11
     *
     * List accounting documents requests
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $id Filter document requests with the given id (optional)
     * @param  string|null $documentNumber Filter document requests with the given document number (optional)
     * @param  \DateTime|null $dateCreatedFrom Filter document requests created after the given date (optional)
     * @param  \DateTime|null $dateCreatedTo Filter document requests created before the given date (optional)
     * @param  \DateTime|null $lastUpdatedFrom Filter document requests updated after the given date (optional)
     * @param  \DateTime|null $lastUpdatedTo Filter document requests updated before the given date (optional)
     * @param  \DateTime|null $issueDateFrom Filter document requests issued after the given date (optional)
     * @param  \DateTime|null $issueDateTo Filter document requests issued before the given date (optional)
     * @param  string[]|null $state Document request states. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $type Accounting document types. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $issuerType Issuer types. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $entityId Entity identifiers. (default: include all). This parameter can be supplied multiple times.&lt;br&gt;The &lt;code&gt;entity_type&lt;/code&gt; must be specified to use this filter, otherwise an error 400 will be returned.&lt;br&gt;Example: entity_id&#x3D;order1-A&amp;entity_id&#x3D;order20-A&amp;entity_type&#x3D;PRODUCT_LOGISTIC_ORDER (optional)
     * @param  string[]|null $entityType Entity types. This parameter can be supplied multiple times. (optional)
     * @param  \DateTime|null $billingCycleFrom Filter document requests generated by billing cycle after the given date. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  \DateTime|null $billingCycleTo Filter document requests generated by billing cycle before the given date. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  string|null $paymentState Filter document requests with the given payment state. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER, LOGISTIC_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR11'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\DR11Response200
     */
    public function dR11($associative_array)
    {
        list($response) = $this->dR11WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation dR11WithHttpInfo
     *
     * List accounting documents requests
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $id Filter document requests with the given id (optional)
     * @param  string|null $documentNumber Filter document requests with the given document number (optional)
     * @param  \DateTime|null $dateCreatedFrom Filter document requests created after the given date (optional)
     * @param  \DateTime|null $dateCreatedTo Filter document requests created before the given date (optional)
     * @param  \DateTime|null $lastUpdatedFrom Filter document requests updated after the given date (optional)
     * @param  \DateTime|null $lastUpdatedTo Filter document requests updated before the given date (optional)
     * @param  \DateTime|null $issueDateFrom Filter document requests issued after the given date (optional)
     * @param  \DateTime|null $issueDateTo Filter document requests issued before the given date (optional)
     * @param  string[]|null $state Document request states. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $type Accounting document types. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $issuerType Issuer types. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $entityId Entity identifiers. (default: include all). This parameter can be supplied multiple times.&lt;br&gt;The &lt;code&gt;entity_type&lt;/code&gt; must be specified to use this filter, otherwise an error 400 will be returned.&lt;br&gt;Example: entity_id&#x3D;order1-A&amp;entity_id&#x3D;order20-A&amp;entity_type&#x3D;PRODUCT_LOGISTIC_ORDER (optional)
     * @param  string[]|null $entityType Entity types. This parameter can be supplied multiple times. (optional)
     * @param  \DateTime|null $billingCycleFrom Filter document requests generated by billing cycle after the given date. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  \DateTime|null $billingCycleTo Filter document requests generated by billing cycle before the given date. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  string|null $paymentState Filter document requests with the given payment state. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER, LOGISTIC_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR11'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\DR11Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function dR11WithHttpInfo($associative_array)
    {
        $request = $this->dR11Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\DR11Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\DR11Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\DR11Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\DR11Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\DR11Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dR11Async
     *
     * List accounting documents requests
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $id Filter document requests with the given id (optional)
     * @param  string|null $documentNumber Filter document requests with the given document number (optional)
     * @param  \DateTime|null $dateCreatedFrom Filter document requests created after the given date (optional)
     * @param  \DateTime|null $dateCreatedTo Filter document requests created before the given date (optional)
     * @param  \DateTime|null $lastUpdatedFrom Filter document requests updated after the given date (optional)
     * @param  \DateTime|null $lastUpdatedTo Filter document requests updated before the given date (optional)
     * @param  \DateTime|null $issueDateFrom Filter document requests issued after the given date (optional)
     * @param  \DateTime|null $issueDateTo Filter document requests issued before the given date (optional)
     * @param  string[]|null $state Document request states. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $type Accounting document types. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $issuerType Issuer types. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $entityId Entity identifiers. (default: include all). This parameter can be supplied multiple times.&lt;br&gt;The &lt;code&gt;entity_type&lt;/code&gt; must be specified to use this filter, otherwise an error 400 will be returned.&lt;br&gt;Example: entity_id&#x3D;order1-A&amp;entity_id&#x3D;order20-A&amp;entity_type&#x3D;PRODUCT_LOGISTIC_ORDER (optional)
     * @param  string[]|null $entityType Entity types. This parameter can be supplied multiple times. (optional)
     * @param  \DateTime|null $billingCycleFrom Filter document requests generated by billing cycle after the given date. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  \DateTime|null $billingCycleTo Filter document requests generated by billing cycle before the given date. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  string|null $paymentState Filter document requests with the given payment state. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER, LOGISTIC_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dR11Async($associative_array)
    {
        return $this->dR11AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dR11AsyncWithHttpInfo
     *
     * List accounting documents requests
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $id Filter document requests with the given id (optional)
     * @param  string|null $documentNumber Filter document requests with the given document number (optional)
     * @param  \DateTime|null $dateCreatedFrom Filter document requests created after the given date (optional)
     * @param  \DateTime|null $dateCreatedTo Filter document requests created before the given date (optional)
     * @param  \DateTime|null $lastUpdatedFrom Filter document requests updated after the given date (optional)
     * @param  \DateTime|null $lastUpdatedTo Filter document requests updated before the given date (optional)
     * @param  \DateTime|null $issueDateFrom Filter document requests issued after the given date (optional)
     * @param  \DateTime|null $issueDateTo Filter document requests issued before the given date (optional)
     * @param  string[]|null $state Document request states. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $type Accounting document types. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $issuerType Issuer types. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $entityId Entity identifiers. (default: include all). This parameter can be supplied multiple times.&lt;br&gt;The &lt;code&gt;entity_type&lt;/code&gt; must be specified to use this filter, otherwise an error 400 will be returned.&lt;br&gt;Example: entity_id&#x3D;order1-A&amp;entity_id&#x3D;order20-A&amp;entity_type&#x3D;PRODUCT_LOGISTIC_ORDER (optional)
     * @param  string[]|null $entityType Entity types. This parameter can be supplied multiple times. (optional)
     * @param  \DateTime|null $billingCycleFrom Filter document requests generated by billing cycle after the given date. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  \DateTime|null $billingCycleTo Filter document requests generated by billing cycle before the given date. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  string|null $paymentState Filter document requests with the given payment state. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER, LOGISTIC_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dR11AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\DR11Response200';
        $request = $this->dR11Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dR11'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $id Filter document requests with the given id (optional)
     * @param  string|null $documentNumber Filter document requests with the given document number (optional)
     * @param  \DateTime|null $dateCreatedFrom Filter document requests created after the given date (optional)
     * @param  \DateTime|null $dateCreatedTo Filter document requests created before the given date (optional)
     * @param  \DateTime|null $lastUpdatedFrom Filter document requests updated after the given date (optional)
     * @param  \DateTime|null $lastUpdatedTo Filter document requests updated before the given date (optional)
     * @param  \DateTime|null $issueDateFrom Filter document requests issued after the given date (optional)
     * @param  \DateTime|null $issueDateTo Filter document requests issued before the given date (optional)
     * @param  string[]|null $state Document request states. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $type Accounting document types. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $issuerType Issuer types. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $entityId Entity identifiers. (default: include all). This parameter can be supplied multiple times.&lt;br&gt;The &lt;code&gt;entity_type&lt;/code&gt; must be specified to use this filter, otherwise an error 400 will be returned.&lt;br&gt;Example: entity_id&#x3D;order1-A&amp;entity_id&#x3D;order20-A&amp;entity_type&#x3D;PRODUCT_LOGISTIC_ORDER (optional)
     * @param  string[]|null $entityType Entity types. This parameter can be supplied multiple times. (optional)
     * @param  \DateTime|null $billingCycleFrom Filter document requests generated by billing cycle after the given date. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  \DateTime|null $billingCycleTo Filter document requests generated by billing cycle before the given date. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  string|null $paymentState Filter document requests with the given payment state. This filter is only available for documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER, LOGISTIC_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dR11Request($associative_array)
    {
        // unbox the parameters from the associative array
        $id = array_key_exists('id', $associative_array) ? $associative_array['id'] : null;
        $documentNumber = array_key_exists('documentNumber', $associative_array) ? $associative_array['documentNumber'] : null;
        $dateCreatedFrom = array_key_exists('dateCreatedFrom', $associative_array) ? $associative_array['dateCreatedFrom'] : null;
        $dateCreatedTo = array_key_exists('dateCreatedTo', $associative_array) ? $associative_array['dateCreatedTo'] : null;
        $lastUpdatedFrom = array_key_exists('lastUpdatedFrom', $associative_array) ? $associative_array['lastUpdatedFrom'] : null;
        $lastUpdatedTo = array_key_exists('lastUpdatedTo', $associative_array) ? $associative_array['lastUpdatedTo'] : null;
        $issueDateFrom = array_key_exists('issueDateFrom', $associative_array) ? $associative_array['issueDateFrom'] : null;
        $issueDateTo = array_key_exists('issueDateTo', $associative_array) ? $associative_array['issueDateTo'] : null;
        $state = array_key_exists('state', $associative_array) ? $associative_array['state'] : null;
        $type = array_key_exists('type', $associative_array) ? $associative_array['type'] : null;
        $issuerType = array_key_exists('issuerType', $associative_array) ? $associative_array['issuerType'] : null;
        $entityId = array_key_exists('entityId', $associative_array) ? $associative_array['entityId'] : null;
        $entityType = array_key_exists('entityType', $associative_array) ? $associative_array['entityType'] : null;
        $billingCycleFrom = array_key_exists('billingCycleFrom', $associative_array) ? $associative_array['billingCycleFrom'] : null;
        $billingCycleTo = array_key_exists('billingCycleTo', $associative_array) ? $associative_array['billingCycleTo'] : null;
        $paymentState = array_key_exists('paymentState', $associative_array) ? $associative_array['paymentState'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $pageToken = array_key_exists('pageToken', $associative_array) ? $associative_array['pageToken'] : null;
        $sort = array_key_exists('sort', $associative_array) ? $associative_array['sort'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['dR11'][0];
        








        if ($state !== null && count($state) > 100) {
            throw new \InvalidArgumentException('invalid value for "$state" when calling InvoicingAndAccountingApi.dR11, number of items must be less than or equal to 100.');
        }
        if ($state !== null && count($state) < 0) {
            throw new \InvalidArgumentException('invalid value for "$state" when calling InvoicingAndAccountingApi.dR11, number of items must be greater than or equal to 0.');
        }
        
        if ($type !== null && count($type) > 100) {
            throw new \InvalidArgumentException('invalid value for "$type" when calling InvoicingAndAccountingApi.dR11, number of items must be less than or equal to 100.');
        }
        if ($type !== null && count($type) < 0) {
            throw new \InvalidArgumentException('invalid value for "$type" when calling InvoicingAndAccountingApi.dR11, number of items must be greater than or equal to 0.');
        }
        
        if ($issuerType !== null && count($issuerType) > 100) {
            throw new \InvalidArgumentException('invalid value for "$issuerType" when calling InvoicingAndAccountingApi.dR11, number of items must be less than or equal to 100.');
        }
        if ($issuerType !== null && count($issuerType) < 0) {
            throw new \InvalidArgumentException('invalid value for "$issuerType" when calling InvoicingAndAccountingApi.dR11, number of items must be greater than or equal to 0.');
        }
        
        if ($entityId !== null && count($entityId) > 100) {
            throw new \InvalidArgumentException('invalid value for "$entityId" when calling InvoicingAndAccountingApi.dR11, number of items must be less than or equal to 100.');
        }
        if ($entityId !== null && count($entityId) < 0) {
            throw new \InvalidArgumentException('invalid value for "$entityId" when calling InvoicingAndAccountingApi.dR11, number of items must be greater than or equal to 0.');
        }
        
        if ($entityType !== null && count($entityType) > 100) {
            throw new \InvalidArgumentException('invalid value for "$entityType" when calling InvoicingAndAccountingApi.dR11, number of items must be less than or equal to 100.');
        }
        if ($entityType !== null && count($entityType) < 0) {
            throw new \InvalidArgumentException('invalid value for "$entityType" when calling InvoicingAndAccountingApi.dR11, number of items must be greater than or equal to 0.');
        }
        







        $resourcePath = '/api/document-request/requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentNumber,
            'document_number', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateCreatedFrom,
            'date_created_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateCreatedTo,
            'date_created_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastUpdatedFrom,
            'last_updated_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastUpdatedTo,
            'last_updated_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $issueDateFrom,
            'issue_date_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $issueDateTo,
            'issue_date_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $issuerType,
            'issuer_type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityId,
            'entity_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityType,
            'entity_type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $billingCycleFrom,
            'billing_cycle_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $billingCycleTo,
            'billing_cycle_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentState,
            'payment_state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageToken,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dR12
     *
     * List of document request lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $documentRequestId Document Request identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR12'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\DR12Response200
     */
    public function dR12($associative_array)
    {
        list($response) = $this->dR12WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation dR12WithHttpInfo
     *
     * List of document request lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $documentRequestId Document Request identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR12'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\DR12Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function dR12WithHttpInfo($associative_array)
    {
        $request = $this->dR12Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\DR12Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\DR12Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\DR12Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\DR12Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\DR12Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dR12Async
     *
     * List of document request lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $documentRequestId Document Request identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR12'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dR12Async($associative_array)
    {
        return $this->dR12AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dR12AsyncWithHttpInfo
     *
     * List of document request lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $documentRequestId Document Request identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR12'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dR12AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\DR12Response200';
        $request = $this->dR12Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dR12'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $documentRequestId Document Request identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR12'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dR12Request($associative_array)
    {
        // unbox the parameters from the associative array
        $documentRequestId = array_key_exists('documentRequestId', $associative_array) ? $associative_array['documentRequestId'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $pageToken = array_key_exists('pageToken', $associative_array) ? $associative_array['pageToken'] : null;
        $sort = array_key_exists('sort', $associative_array) ? $associative_array['sort'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['dR12'][0];
        
        // verify the required parameter 'documentRequestId' is set
        if ($documentRequestId === null || (is_array($documentRequestId) && count($documentRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentRequestId when calling dR12'
            );
        }





        $resourcePath = '/api/document-request/{document_request_id}/lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageToken,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($documentRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'document_request_id' . '}',
                ObjectSerializer::toPathValue($documentRequestId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dR73
     *
     * Download accounting documents
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $documentRequestId The document request unique identifier. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $documentId Document identifiers. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $documentFormat Document formats. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $entityId Entity identifiers related to the documents to download. This parameter can be supplied multiple times.&lt;br&gt;The &lt;code&gt;entity_type&lt;/code&gt; must be specified to use this filter, otherwise an error 400 will be returned.&lt;br&gt;Example: entity_id&#x3D;order1-A&amp;entity_id&#x3D;order20-A&amp;entity_type&#x3D;PRODUCT_LOGISTIC_ORDER (optional)
     * @param  string[]|null $entityType Entity types related to the documents to download. This parameter can be supplied multiple times. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR73'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function dR73($associative_array)
    {
        list($response) = $this->dR73WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation dR73WithHttpInfo
     *
     * Download accounting documents
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $documentRequestId The document request unique identifier. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $documentId Document identifiers. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $documentFormat Document formats. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $entityId Entity identifiers related to the documents to download. This parameter can be supplied multiple times.&lt;br&gt;The &lt;code&gt;entity_type&lt;/code&gt; must be specified to use this filter, otherwise an error 400 will be returned.&lt;br&gt;Example: entity_id&#x3D;order1-A&amp;entity_id&#x3D;order20-A&amp;entity_type&#x3D;PRODUCT_LOGISTIC_ORDER (optional)
     * @param  string[]|null $entityType Entity types related to the documents to download. This parameter can be supplied multiple times. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR73'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function dR73WithHttpInfo($associative_array)
    {
        $request = $this->dR73Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dR73Async
     *
     * Download accounting documents
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $documentRequestId The document request unique identifier. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $documentId Document identifiers. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $documentFormat Document formats. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $entityId Entity identifiers related to the documents to download. This parameter can be supplied multiple times.&lt;br&gt;The &lt;code&gt;entity_type&lt;/code&gt; must be specified to use this filter, otherwise an error 400 will be returned.&lt;br&gt;Example: entity_id&#x3D;order1-A&amp;entity_id&#x3D;order20-A&amp;entity_type&#x3D;PRODUCT_LOGISTIC_ORDER (optional)
     * @param  string[]|null $entityType Entity types related to the documents to download. This parameter can be supplied multiple times. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR73'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dR73Async($associative_array)
    {
        return $this->dR73AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dR73AsyncWithHttpInfo
     *
     * Download accounting documents
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $documentRequestId The document request unique identifier. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $documentId Document identifiers. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $documentFormat Document formats. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $entityId Entity identifiers related to the documents to download. This parameter can be supplied multiple times.&lt;br&gt;The &lt;code&gt;entity_type&lt;/code&gt; must be specified to use this filter, otherwise an error 400 will be returned.&lt;br&gt;Example: entity_id&#x3D;order1-A&amp;entity_id&#x3D;order20-A&amp;entity_type&#x3D;PRODUCT_LOGISTIC_ORDER (optional)
     * @param  string[]|null $entityType Entity types related to the documents to download. This parameter can be supplied multiple times. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR73'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dR73AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\SplFileObject';
        $request = $this->dR73Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dR73'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $documentRequestId The document request unique identifier. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $documentId Document identifiers. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $documentFormat Document formats. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $entityId Entity identifiers related to the documents to download. This parameter can be supplied multiple times.&lt;br&gt;The &lt;code&gt;entity_type&lt;/code&gt; must be specified to use this filter, otherwise an error 400 will be returned.&lt;br&gt;Example: entity_id&#x3D;order1-A&amp;entity_id&#x3D;order20-A&amp;entity_type&#x3D;PRODUCT_LOGISTIC_ORDER (optional)
     * @param  string[]|null $entityType Entity types related to the documents to download. This parameter can be supplied multiple times. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dR73'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dR73Request($associative_array)
    {
        // unbox the parameters from the associative array
        $documentRequestId = array_key_exists('documentRequestId', $associative_array) ? $associative_array['documentRequestId'] : null;
        $documentId = array_key_exists('documentId', $associative_array) ? $associative_array['documentId'] : null;
        $documentFormat = array_key_exists('documentFormat', $associative_array) ? $associative_array['documentFormat'] : null;
        $entityId = array_key_exists('entityId', $associative_array) ? $associative_array['entityId'] : null;
        $entityType = array_key_exists('entityType', $associative_array) ? $associative_array['entityType'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['dR73'][0];
        
        if ($documentRequestId !== null && count($documentRequestId) > 100) {
            throw new \InvalidArgumentException('invalid value for "$documentRequestId" when calling InvoicingAndAccountingApi.dR73, number of items must be less than or equal to 100.');
        }
        if ($documentRequestId !== null && count($documentRequestId) < 0) {
            throw new \InvalidArgumentException('invalid value for "$documentRequestId" when calling InvoicingAndAccountingApi.dR73, number of items must be greater than or equal to 0.');
        }
        
        if ($documentId !== null && count($documentId) > 100) {
            throw new \InvalidArgumentException('invalid value for "$documentId" when calling InvoicingAndAccountingApi.dR73, number of items must be less than or equal to 100.');
        }
        if ($documentId !== null && count($documentId) < 0) {
            throw new \InvalidArgumentException('invalid value for "$documentId" when calling InvoicingAndAccountingApi.dR73, number of items must be greater than or equal to 0.');
        }
        
        if ($documentFormat !== null && count($documentFormat) > 100) {
            throw new \InvalidArgumentException('invalid value for "$documentFormat" when calling InvoicingAndAccountingApi.dR73, number of items must be less than or equal to 100.');
        }
        if ($documentFormat !== null && count($documentFormat) < 0) {
            throw new \InvalidArgumentException('invalid value for "$documentFormat" when calling InvoicingAndAccountingApi.dR73, number of items must be greater than or equal to 0.');
        }
        
        if ($entityId !== null && count($entityId) > 100) {
            throw new \InvalidArgumentException('invalid value for "$entityId" when calling InvoicingAndAccountingApi.dR73, number of items must be less than or equal to 100.');
        }
        if ($entityId !== null && count($entityId) < 0) {
            throw new \InvalidArgumentException('invalid value for "$entityId" when calling InvoicingAndAccountingApi.dR73, number of items must be greater than or equal to 0.');
        }
        
        if ($entityType !== null && count($entityType) > 100) {
            throw new \InvalidArgumentException('invalid value for "$entityType" when calling InvoicingAndAccountingApi.dR73, number of items must be less than or equal to 100.');
        }
        if ($entityType !== null && count($entityType) < 0) {
            throw new \InvalidArgumentException('invalid value for "$entityType" when calling InvoicingAndAccountingApi.dR73, number of items must be greater than or equal to 0.');
        }
        


        $resourcePath = '/api/document-request/documents/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentRequestId,
            'document_request_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'document_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentFormat,
            'document_format', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityId,
            'entity_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityType,
            'entity_type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation iV01
     *
     * List accounting documents
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $currency Currency code for filtering (optional)
     * @param  \DateTime|null $endDate Creation date for filtering (optional)
     * @param  string[]|null $issuingUserTypes A comma separated list of issuing user type for filtering. By default all types are returned (optional)
     * @param  string|null $paymentStatus Accounting document payment state (optional)
     * @param  \DateTime|null $startDate Creation date for filtering (optional)
     * @param  string|null $type Accounting document type for filtering. By default only invoices by the shop payment process are returned. (optional, default to 'AUTO_INVOICE')
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['iV01'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\IV01Response200
     */
    public function iV01($associative_array)
    {
        list($response) = $this->iV01WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation iV01WithHttpInfo
     *
     * List accounting documents
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $currency Currency code for filtering (optional)
     * @param  \DateTime|null $endDate Creation date for filtering (optional)
     * @param  string[]|null $issuingUserTypes A comma separated list of issuing user type for filtering. By default all types are returned (optional)
     * @param  string|null $paymentStatus Accounting document payment state (optional)
     * @param  \DateTime|null $startDate Creation date for filtering (optional)
     * @param  string|null $type Accounting document type for filtering. By default only invoices by the shop payment process are returned. (optional, default to 'AUTO_INVOICE')
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['iV01'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\IV01Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function iV01WithHttpInfo($associative_array)
    {
        $request = $this->iV01Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\IV01Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\IV01Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\IV01Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\IV01Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\IV01Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation iV01Async
     *
     * List accounting documents
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $currency Currency code for filtering (optional)
     * @param  \DateTime|null $endDate Creation date for filtering (optional)
     * @param  string[]|null $issuingUserTypes A comma separated list of issuing user type for filtering. By default all types are returned (optional)
     * @param  string|null $paymentStatus Accounting document payment state (optional)
     * @param  \DateTime|null $startDate Creation date for filtering (optional)
     * @param  string|null $type Accounting document type for filtering. By default only invoices by the shop payment process are returned. (optional, default to 'AUTO_INVOICE')
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['iV01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function iV01Async($associative_array)
    {
        return $this->iV01AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation iV01AsyncWithHttpInfo
     *
     * List accounting documents
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $currency Currency code for filtering (optional)
     * @param  \DateTime|null $endDate Creation date for filtering (optional)
     * @param  string[]|null $issuingUserTypes A comma separated list of issuing user type for filtering. By default all types are returned (optional)
     * @param  string|null $paymentStatus Accounting document payment state (optional)
     * @param  \DateTime|null $startDate Creation date for filtering (optional)
     * @param  string|null $type Accounting document type for filtering. By default only invoices by the shop payment process are returned. (optional, default to 'AUTO_INVOICE')
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['iV01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function iV01AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\IV01Response200';
        $request = $this->iV01Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'iV01'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $currency Currency code for filtering (optional)
     * @param  \DateTime|null $endDate Creation date for filtering (optional)
     * @param  string[]|null $issuingUserTypes A comma separated list of issuing user type for filtering. By default all types are returned (optional)
     * @param  string|null $paymentStatus Accounting document payment state (optional)
     * @param  \DateTime|null $startDate Creation date for filtering (optional)
     * @param  string|null $type Accounting document type for filtering. By default only invoices by the shop payment process are returned. (optional, default to 'AUTO_INVOICE')
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['iV01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function iV01Request($associative_array)
    {
        // unbox the parameters from the associative array
        $currency = array_key_exists('currency', $associative_array) ? $associative_array['currency'] : null;
        $endDate = array_key_exists('endDate', $associative_array) ? $associative_array['endDate'] : null;
        $issuingUserTypes = array_key_exists('issuingUserTypes', $associative_array) ? $associative_array['issuingUserTypes'] : null;
        $paymentStatus = array_key_exists('paymentStatus', $associative_array) ? $associative_array['paymentStatus'] : null;
        $startDate = array_key_exists('startDate', $associative_array) ? $associative_array['startDate'] : null;
        $type = array_key_exists('type', $associative_array) ? $associative_array['type'] : 'AUTO_INVOICE';
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $max = array_key_exists('max', $associative_array) ? $associative_array['max'] : null;
        $offset = array_key_exists('offset', $associative_array) ? $associative_array['offset'] : null;
        $sort = array_key_exists('sort', $associative_array) ? $associative_array['sort'] : null;
        $order = array_key_exists('order', $associative_array) ? $associative_array['order'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['iV01'][0];
        












        $resourcePath = '/api/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $issuingUserTypes,
            'issuing_user_types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentStatus,
            'payment_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max,
            'max', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation iV02
     *
     * Download an accounting document
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $accountingDocumentId Accounting document identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['iV02'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function iV02($associative_array)
    {
        list($response) = $this->iV02WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation iV02WithHttpInfo
     *
     * Download an accounting document
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $accountingDocumentId Accounting document identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['iV02'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function iV02WithHttpInfo($associative_array)
    {
        $request = $this->iV02Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation iV02Async
     *
     * Download an accounting document
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $accountingDocumentId Accounting document identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['iV02'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function iV02Async($associative_array)
    {
        return $this->iV02AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation iV02AsyncWithHttpInfo
     *
     * Download an accounting document
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $accountingDocumentId Accounting document identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['iV02'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function iV02AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\SplFileObject';
        $request = $this->iV02Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'iV02'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $accountingDocumentId Accounting document identifier (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['iV02'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function iV02Request($associative_array)
    {
        // unbox the parameters from the associative array
        $accountingDocumentId = array_key_exists('accountingDocumentId', $associative_array) ? $associative_array['accountingDocumentId'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['iV02'][0];
        
        // verify the required parameter 'accountingDocumentId' is set
        if ($accountingDocumentId === null || (is_array($accountingDocumentId) && count($accountingDocumentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountingDocumentId when calling iV02'
            );
        }



        $resourcePath = '/api/invoices/{accounting_document_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($accountingDocumentId !== null) {
            $resourcePath = str_replace(
                '{' . 'accounting_document_id' . '}',
                ObjectSerializer::toPathValue($accountingDocumentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tL02
     *
     * List transaction lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $dateCreatedFrom Creation date for filtering (optional)
     * @param  \DateTime|null $dateCreatedTo Creation date for filtering (optional)
     * @param  \DateTime|null $transactionDateFrom Transaction date for filtering (optional)
     * @param  \DateTime|null $transactionDateTo Transaction date for filtering (optional)
     * @param  \DateTime|null $lastUpdatedFrom Last updated date for filtering (optional)
     * @param  string[]|null $paymentState Payment state for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $transactionType Transaction type for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string|null $accountingDocumentNumber Accounting document number for filtering. (optional)
     * @param  string[]|null $orderId Order id for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $orderLineId Order line id for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $orderReferenceForCustomer A comma-separated list of order references for customer. (optional)
     * @param  string[]|null $orderReferenceForSeller A comma-separated list of order references for seller. (optional)
     * @param  string|null $accountingDocumentId Accounting document id for filtering. This parameter only filter documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  string[]|null $shopModel Shop model for filtering. This parameter can be supplied multiple times. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL02'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\TL02Response200
     */
    public function tL02($associative_array)
    {
        list($response) = $this->tL02WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation tL02WithHttpInfo
     *
     * List transaction lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $dateCreatedFrom Creation date for filtering (optional)
     * @param  \DateTime|null $dateCreatedTo Creation date for filtering (optional)
     * @param  \DateTime|null $transactionDateFrom Transaction date for filtering (optional)
     * @param  \DateTime|null $transactionDateTo Transaction date for filtering (optional)
     * @param  \DateTime|null $lastUpdatedFrom Last updated date for filtering (optional)
     * @param  string[]|null $paymentState Payment state for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $transactionType Transaction type for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string|null $accountingDocumentNumber Accounting document number for filtering. (optional)
     * @param  string[]|null $orderId Order id for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $orderLineId Order line id for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $orderReferenceForCustomer A comma-separated list of order references for customer. (optional)
     * @param  string[]|null $orderReferenceForSeller A comma-separated list of order references for seller. (optional)
     * @param  string|null $accountingDocumentId Accounting document id for filtering. This parameter only filter documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  string[]|null $shopModel Shop model for filtering. This parameter can be supplied multiple times. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL02'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\TL02Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function tL02WithHttpInfo($associative_array)
    {
        $request = $this->tL02Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\TL02Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\TL02Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\TL02Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\TL02Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\TL02Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tL02Async
     *
     * List transaction lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $dateCreatedFrom Creation date for filtering (optional)
     * @param  \DateTime|null $dateCreatedTo Creation date for filtering (optional)
     * @param  \DateTime|null $transactionDateFrom Transaction date for filtering (optional)
     * @param  \DateTime|null $transactionDateTo Transaction date for filtering (optional)
     * @param  \DateTime|null $lastUpdatedFrom Last updated date for filtering (optional)
     * @param  string[]|null $paymentState Payment state for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $transactionType Transaction type for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string|null $accountingDocumentNumber Accounting document number for filtering. (optional)
     * @param  string[]|null $orderId Order id for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $orderLineId Order line id for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $orderReferenceForCustomer A comma-separated list of order references for customer. (optional)
     * @param  string[]|null $orderReferenceForSeller A comma-separated list of order references for seller. (optional)
     * @param  string|null $accountingDocumentId Accounting document id for filtering. This parameter only filter documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  string[]|null $shopModel Shop model for filtering. This parameter can be supplied multiple times. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL02'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tL02Async($associative_array)
    {
        return $this->tL02AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tL02AsyncWithHttpInfo
     *
     * List transaction lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $dateCreatedFrom Creation date for filtering (optional)
     * @param  \DateTime|null $dateCreatedTo Creation date for filtering (optional)
     * @param  \DateTime|null $transactionDateFrom Transaction date for filtering (optional)
     * @param  \DateTime|null $transactionDateTo Transaction date for filtering (optional)
     * @param  \DateTime|null $lastUpdatedFrom Last updated date for filtering (optional)
     * @param  string[]|null $paymentState Payment state for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $transactionType Transaction type for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string|null $accountingDocumentNumber Accounting document number for filtering. (optional)
     * @param  string[]|null $orderId Order id for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $orderLineId Order line id for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $orderReferenceForCustomer A comma-separated list of order references for customer. (optional)
     * @param  string[]|null $orderReferenceForSeller A comma-separated list of order references for seller. (optional)
     * @param  string|null $accountingDocumentId Accounting document id for filtering. This parameter only filter documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  string[]|null $shopModel Shop model for filtering. This parameter can be supplied multiple times. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL02'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tL02AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\TL02Response200';
        $request = $this->tL02Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tL02'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  \DateTime|null $dateCreatedFrom Creation date for filtering (optional)
     * @param  \DateTime|null $dateCreatedTo Creation date for filtering (optional)
     * @param  \DateTime|null $transactionDateFrom Transaction date for filtering (optional)
     * @param  \DateTime|null $transactionDateTo Transaction date for filtering (optional)
     * @param  \DateTime|null $lastUpdatedFrom Last updated date for filtering (optional)
     * @param  string[]|null $paymentState Payment state for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $transactionType Transaction type for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string|null $accountingDocumentNumber Accounting document number for filtering. (optional)
     * @param  string[]|null $orderId Order id for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $orderLineId Order line id for filtering. This parameter can be supplied multiple times. (optional)
     * @param  string[]|null $orderReferenceForCustomer A comma-separated list of order references for customer. (optional)
     * @param  string[]|null $orderReferenceForSeller A comma-separated list of order references for seller. (optional)
     * @param  string|null $accountingDocumentId Accounting document id for filtering. This parameter only filter documents requests of the type: &lt;code&gt;SHOP_BILLING_CYCLE_PURCHASE_ORDER&lt;/code&gt;. (optional)
     * @param  string[]|null $shopModel Shop model for filtering. This parameter can be supplied multiple times. (optional)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $pageToken Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL02'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tL02Request($associative_array)
    {
        // unbox the parameters from the associative array
        $dateCreatedFrom = array_key_exists('dateCreatedFrom', $associative_array) ? $associative_array['dateCreatedFrom'] : null;
        $dateCreatedTo = array_key_exists('dateCreatedTo', $associative_array) ? $associative_array['dateCreatedTo'] : null;
        $transactionDateFrom = array_key_exists('transactionDateFrom', $associative_array) ? $associative_array['transactionDateFrom'] : null;
        $transactionDateTo = array_key_exists('transactionDateTo', $associative_array) ? $associative_array['transactionDateTo'] : null;
        $lastUpdatedFrom = array_key_exists('lastUpdatedFrom', $associative_array) ? $associative_array['lastUpdatedFrom'] : null;
        $paymentState = array_key_exists('paymentState', $associative_array) ? $associative_array['paymentState'] : null;
        $transactionType = array_key_exists('transactionType', $associative_array) ? $associative_array['transactionType'] : null;
        $accountingDocumentNumber = array_key_exists('accountingDocumentNumber', $associative_array) ? $associative_array['accountingDocumentNumber'] : null;
        $orderId = array_key_exists('orderId', $associative_array) ? $associative_array['orderId'] : null;
        $orderLineId = array_key_exists('orderLineId', $associative_array) ? $associative_array['orderLineId'] : null;
        $orderReferenceForCustomer = array_key_exists('orderReferenceForCustomer', $associative_array) ? $associative_array['orderReferenceForCustomer'] : null;
        $orderReferenceForSeller = array_key_exists('orderReferenceForSeller', $associative_array) ? $associative_array['orderReferenceForSeller'] : null;
        $accountingDocumentId = array_key_exists('accountingDocumentId', $associative_array) ? $associative_array['accountingDocumentId'] : null;
        $shopModel = array_key_exists('shopModel', $associative_array) ? $associative_array['shopModel'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $pageToken = array_key_exists('pageToken', $associative_array) ? $associative_array['pageToken'] : null;
        $sort = array_key_exists('sort', $associative_array) ? $associative_array['sort'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['tL02'][0];
        





        if ($paymentState !== null && count($paymentState) > 100) {
            throw new \InvalidArgumentException('invalid value for "$paymentState" when calling InvoicingAndAccountingApi.tL02, number of items must be less than or equal to 100.');
        }
        if ($paymentState !== null && count($paymentState) < 0) {
            throw new \InvalidArgumentException('invalid value for "$paymentState" when calling InvoicingAndAccountingApi.tL02, number of items must be greater than or equal to 0.');
        }
        
        if ($transactionType !== null && count($transactionType) > 100) {
            throw new \InvalidArgumentException('invalid value for "$transactionType" when calling InvoicingAndAccountingApi.tL02, number of items must be less than or equal to 100.');
        }
        if ($transactionType !== null && count($transactionType) < 0) {
            throw new \InvalidArgumentException('invalid value for "$transactionType" when calling InvoicingAndAccountingApi.tL02, number of items must be greater than or equal to 0.');
        }
        

        if ($orderId !== null && count($orderId) > 100) {
            throw new \InvalidArgumentException('invalid value for "$orderId" when calling InvoicingAndAccountingApi.tL02, number of items must be less than or equal to 100.');
        }
        if ($orderId !== null && count($orderId) < 0) {
            throw new \InvalidArgumentException('invalid value for "$orderId" when calling InvoicingAndAccountingApi.tL02, number of items must be greater than or equal to 0.');
        }
        
        if ($orderLineId !== null && count($orderLineId) > 100) {
            throw new \InvalidArgumentException('invalid value for "$orderLineId" when calling InvoicingAndAccountingApi.tL02, number of items must be less than or equal to 100.');
        }
        if ($orderLineId !== null && count($orderLineId) < 0) {
            throw new \InvalidArgumentException('invalid value for "$orderLineId" when calling InvoicingAndAccountingApi.tL02, number of items must be greater than or equal to 0.');
        }
        
        if ($orderReferenceForCustomer !== null && count($orderReferenceForCustomer) > 100) {
            throw new \InvalidArgumentException('invalid value for "$orderReferenceForCustomer" when calling InvoicingAndAccountingApi.tL02, number of items must be less than or equal to 100.');
        }
        if ($orderReferenceForCustomer !== null && count($orderReferenceForCustomer) < 0) {
            throw new \InvalidArgumentException('invalid value for "$orderReferenceForCustomer" when calling InvoicingAndAccountingApi.tL02, number of items must be greater than or equal to 0.');
        }
        
        if ($orderReferenceForSeller !== null && count($orderReferenceForSeller) > 100) {
            throw new \InvalidArgumentException('invalid value for "$orderReferenceForSeller" when calling InvoicingAndAccountingApi.tL02, number of items must be less than or equal to 100.');
        }
        if ($orderReferenceForSeller !== null && count($orderReferenceForSeller) < 0) {
            throw new \InvalidArgumentException('invalid value for "$orderReferenceForSeller" when calling InvoicingAndAccountingApi.tL02, number of items must be greater than or equal to 0.');
        }
        






        $resourcePath = '/api/sellerpayment/transactions_logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateCreatedFrom,
            'date_created_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateCreatedTo,
            'date_created_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transactionDateFrom,
            'transaction_date_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transactionDateTo,
            'transaction_date_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastUpdatedFrom,
            'last_updated_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentState,
            'payment_state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transactionType,
            'transaction_type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountingDocumentNumber,
            'accounting_document_number', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderId,
            'order_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderLineId,
            'order_line_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderReferenceForCustomer,
            'order_reference_for_customer', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderReferenceForSeller,
            'order_reference_for_seller', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountingDocumentId,
            'accounting_document_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopModel,
            'shop_model', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageToken,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tL03
     *
     * Export transaction lines JSON file asynchronously
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\TL03Request|null $tL03Request tL03Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL03'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\TL03Response200
     */
    public function tL03($associative_array)
    {
        list($response) = $this->tL03WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation tL03WithHttpInfo
     *
     * Export transaction lines JSON file asynchronously
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\TL03Request|null $tL03Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL03'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\TL03Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function tL03WithHttpInfo($associative_array)
    {
        $request = $this->tL03Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\TL03Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\TL03Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\TL03Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\TL03Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\TL03Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tL03Async
     *
     * Export transaction lines JSON file asynchronously
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\TL03Request|null $tL03Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL03'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tL03Async($associative_array)
    {
        return $this->tL03AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tL03AsyncWithHttpInfo
     *
     * Export transaction lines JSON file asynchronously
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\TL03Request|null $tL03Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL03'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tL03AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\TL03Response200';
        $request = $this->tL03Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tL03'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\TL03Request|null $tL03Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL03'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tL03Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $tL03Request = array_key_exists('tL03Request', $associative_array) ? $associative_array['tL03Request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['tL03'][0];
        



        $resourcePath = '/api/sellerpayment/transactions_logs/async';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tL03Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tL03Request));
            } else {
                $httpBody = $tL03Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tL04
     *
     * Poll the status of an asynchronous transaction log export (TL03)
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $trackingId The asynchronous transaction log export id (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL04'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\TL04Response200
     */
    public function tL04($associative_array)
    {
        list($response) = $this->tL04WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation tL04WithHttpInfo
     *
     * Poll the status of an asynchronous transaction log export (TL03)
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $trackingId The asynchronous transaction log export id (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL04'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\TL04Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function tL04WithHttpInfo($associative_array)
    {
        $request = $this->tL04Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\TL04Response200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\TL04Response200' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\TL04Response200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\TL04Response200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\TL04Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tL04Async
     *
     * Poll the status of an asynchronous transaction log export (TL03)
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $trackingId The asynchronous transaction log export id (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL04'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tL04Async($associative_array)
    {
        return $this->tL04AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tL04AsyncWithHttpInfo
     *
     * Poll the status of an asynchronous transaction log export (TL03)
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $trackingId The asynchronous transaction log export id (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL04'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tL04AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\TL04Response200';
        $request = $this->tL04Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tL04'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $trackingId The asynchronous transaction log export id (required)
     * @param  int|null $shopId Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tL04'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tL04Request($associative_array)
    {
        // unbox the parameters from the associative array
        $trackingId = array_key_exists('trackingId', $associative_array) ? $associative_array['trackingId'] : null;
        $shopId = array_key_exists('shopId', $associative_array) ? $associative_array['shopId'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['tL04'][0];
        
        // verify the required parameter 'trackingId' is set
        if ($trackingId === null || (is_array($trackingId) && count($trackingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trackingId when calling tL04'
            );
        }



        $resourcePath = '/api/sellerpayment/transactions_logs/async/status/{tracking_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopId,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($trackingId !== null) {
            $resourcePath = str_replace(
                '{' . 'tracking_id' . '}',
                ObjectSerializer::toPathValue($trackingId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
