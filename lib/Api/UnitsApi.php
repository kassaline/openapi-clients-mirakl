<?php
/**
 * UnitsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * The version of the OpenAPI document: 2.18.3
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Mirakl\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Mirakl\ApiException;
use OpenAPI\Client\Mirakl\Configuration;
use OpenAPI\Client\Mirakl\HeaderSelector;
use OpenAPI\Client\Mirakl\ObjectSerializer;

/**
 * UnitsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UnitsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'bulkUpdateUnits' => [
            'application/json',
        ],
        'createUnit' => [
            'application/json',
        ],
        'deleteUnit' => [
            'application/json',
        ],
        'getUnit' => [
            'application/json',
        ],
        'getUnits' => [
            'application/json',
        ],
        'patchUnit' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bulkUpdateUnits
     *
     * Update some fields of a given set of units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitsBulkUpdateRequest[] $unitsBulkUpdateRequest Update Object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\UnitsBulkUpdateResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function bulkUpdateUnits($storefront, $unitsBulkUpdateRequest, string $contentType = self::contentTypes['bulkUpdateUnits'][0])
    {
        list($response) = $this->bulkUpdateUnitsWithHttpInfo($storefront, $unitsBulkUpdateRequest, $contentType);
        return $response;
    }

    /**
     * Operation bulkUpdateUnitsWithHttpInfo
     *
     * Update some fields of a given set of units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitsBulkUpdateRequest[] $unitsBulkUpdateRequest Update Object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\UnitsBulkUpdateResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkUpdateUnitsWithHttpInfo($storefront, $unitsBulkUpdateRequest, string $contentType = self::contentTypes['bulkUpdateUnits'][0])
    {
        $request = $this->bulkUpdateUnitsRequest($storefront, $unitsBulkUpdateRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 207:
                    if ('\OpenAPI\Client\Mirakl\Model\UnitsBulkUpdateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\UnitsBulkUpdateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\UnitsBulkUpdateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\UnitsBulkUpdateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 207:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\UnitsBulkUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkUpdateUnitsAsync
     *
     * Update some fields of a given set of units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitsBulkUpdateRequest[] $unitsBulkUpdateRequest Update Object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateUnitsAsync($storefront, $unitsBulkUpdateRequest, string $contentType = self::contentTypes['bulkUpdateUnits'][0])
    {
        return $this->bulkUpdateUnitsAsyncWithHttpInfo($storefront, $unitsBulkUpdateRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkUpdateUnitsAsyncWithHttpInfo
     *
     * Update some fields of a given set of units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitsBulkUpdateRequest[] $unitsBulkUpdateRequest Update Object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateUnitsAsyncWithHttpInfo($storefront, $unitsBulkUpdateRequest, string $contentType = self::contentTypes['bulkUpdateUnits'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\UnitsBulkUpdateResponse';
        $request = $this->bulkUpdateUnitsRequest($storefront, $unitsBulkUpdateRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkUpdateUnits'
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitsBulkUpdateRequest[] $unitsBulkUpdateRequest Update Object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkUpdateUnitsRequest($storefront, $unitsBulkUpdateRequest, string $contentType = self::contentTypes['bulkUpdateUnits'][0])
    {

        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling bulkUpdateUnits'
            );
        }

        // verify the required parameter 'unitsBulkUpdateRequest' is set
        if ($unitsBulkUpdateRequest === null || (is_array($unitsBulkUpdateRequest) && count($unitsBulkUpdateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unitsBulkUpdateRequest when calling bulkUpdateUnits'
            );
        }


        $resourcePath = '/units/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $storefront,
            'storefront', // param base name
            'Storefront', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($unitsBulkUpdateRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($unitsBulkUpdateRequest));
            } else {
                $httpBody = $unitsBulkUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createUnit
     *
     * Add a unit
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitRequest $unitRequest Information about the unit that will be generated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\ApiResponseUnit|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function createUnit($storefront, $unitRequest, string $contentType = self::contentTypes['createUnit'][0])
    {
        list($response) = $this->createUnitWithHttpInfo($storefront, $unitRequest, $contentType);
        return $response;
    }

    /**
     * Operation createUnitWithHttpInfo
     *
     * Add a unit
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitRequest $unitRequest Information about the unit that will be generated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\ApiResponseUnit|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUnitWithHttpInfo($storefront, $unitRequest, string $contentType = self::contentTypes['createUnit'][0])
    {
        $request = $this->createUnitRequest($storefront, $unitRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\ApiResponseUnit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ApiResponseUnit' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ApiResponseUnit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseUnit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ApiResponseUnit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createUnitAsync
     *
     * Add a unit
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitRequest $unitRequest Information about the unit that will be generated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUnitAsync($storefront, $unitRequest, string $contentType = self::contentTypes['createUnit'][0])
    {
        return $this->createUnitAsyncWithHttpInfo($storefront, $unitRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createUnitAsyncWithHttpInfo
     *
     * Add a unit
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitRequest $unitRequest Information about the unit that will be generated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUnitAsyncWithHttpInfo($storefront, $unitRequest, string $contentType = self::contentTypes['createUnit'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseUnit';
        $request = $this->createUnitRequest($storefront, $unitRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createUnit'
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitRequest $unitRequest Information about the unit that will be generated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createUnitRequest($storefront, $unitRequest, string $contentType = self::contentTypes['createUnit'][0])
    {

        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling createUnit'
            );
        }

        // verify the required parameter 'unitRequest' is set
        if ($unitRequest === null || (is_array($unitRequest) && count($unitRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unitRequest when calling createUnit'
            );
        }


        $resourcePath = '/units';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $storefront,
            'storefront', // param base name
            'Storefront', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($unitRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($unitRequest));
            } else {
                $httpBody = $unitRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteUnit
     *
     * Delete a unit
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteUnit($idUnit, $storefront, string $contentType = self::contentTypes['deleteUnit'][0])
    {
        $this->deleteUnitWithHttpInfo($idUnit, $storefront, $contentType);
    }

    /**
     * Operation deleteUnitWithHttpInfo
     *
     * Delete a unit
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUnitWithHttpInfo($idUnit, $storefront, string $contentType = self::contentTypes['deleteUnit'][0])
    {
        $request = $this->deleteUnitRequest($idUnit, $storefront, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteUnitAsync
     *
     * Delete a unit
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUnitAsync($idUnit, $storefront, string $contentType = self::contentTypes['deleteUnit'][0])
    {
        return $this->deleteUnitAsyncWithHttpInfo($idUnit, $storefront, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteUnitAsyncWithHttpInfo
     *
     * Delete a unit
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUnitAsyncWithHttpInfo($idUnit, $storefront, string $contentType = self::contentTypes['deleteUnit'][0])
    {
        $returnType = '';
        $request = $this->deleteUnitRequest($idUnit, $storefront, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteUnit'
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteUnitRequest($idUnit, $storefront, string $contentType = self::contentTypes['deleteUnit'][0])
    {

        // verify the required parameter 'idUnit' is set
        if ($idUnit === null || (is_array($idUnit) && count($idUnit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idUnit when calling deleteUnit'
            );
        }
        if ($idUnit < 1) {
            throw new \InvalidArgumentException('invalid value for "$idUnit" when calling UnitsApi.deleteUnit, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling deleteUnit'
            );
        }


        $resourcePath = '/units/{id_unit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $storefront,
            'storefront', // param base name
            'Storefront', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($idUnit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_unit' . '}',
                ObjectSerializer::toPathValue($idUnit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUnit
     *
     * Get a unit by ID
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitEmbeddedEnum[]|null $embedded embedded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\ApiResponseUnit|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function getUnit($idUnit, $storefront, $embedded = null, string $contentType = self::contentTypes['getUnit'][0])
    {
        list($response) = $this->getUnitWithHttpInfo($idUnit, $storefront, $embedded, $contentType);
        return $response;
    }

    /**
     * Operation getUnitWithHttpInfo
     *
     * Get a unit by ID
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitEmbeddedEnum[]|null $embedded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\ApiResponseUnit|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUnitWithHttpInfo($idUnit, $storefront, $embedded = null, string $contentType = self::contentTypes['getUnit'][0])
    {
        $request = $this->getUnitRequest($idUnit, $storefront, $embedded, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\ApiResponseUnit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ApiResponseUnit' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ApiResponseUnit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseUnit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ApiResponseUnit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUnitAsync
     *
     * Get a unit by ID
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitEmbeddedEnum[]|null $embedded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnitAsync($idUnit, $storefront, $embedded = null, string $contentType = self::contentTypes['getUnit'][0])
    {
        return $this->getUnitAsyncWithHttpInfo($idUnit, $storefront, $embedded, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUnitAsyncWithHttpInfo
     *
     * Get a unit by ID
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitEmbeddedEnum[]|null $embedded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnitAsyncWithHttpInfo($idUnit, $storefront, $embedded = null, string $contentType = self::contentTypes['getUnit'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseUnit';
        $request = $this->getUnitRequest($idUnit, $storefront, $embedded, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUnit'
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitEmbeddedEnum[]|null $embedded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUnitRequest($idUnit, $storefront, $embedded = null, string $contentType = self::contentTypes['getUnit'][0])
    {

        // verify the required parameter 'idUnit' is set
        if ($idUnit === null || (is_array($idUnit) && count($idUnit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idUnit when calling getUnit'
            );
        }
        if ($idUnit < 1) {
            throw new \InvalidArgumentException('invalid value for "$idUnit" when calling UnitsApi.getUnit, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling getUnit'
            );
        }



        $resourcePath = '/units/{id_unit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $storefront,
            'storefront', // param base name
            'Storefront', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $embedded,
            'embedded', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($idUnit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_unit' . '}',
                ObjectSerializer::toPathValue($idUnit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUnits
     *
     * Get a list of your units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int|null $limit Desired size of result set, maximum is 100 (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string|null $idOffer Provided ID of your stock (optional)
     * @param  int|null $idProduct Our internal id_product (optional)
     * @param  string|null $ean EAN, 13 or 14 digits (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitEmbeddedEnum[]|null $embedded embedded (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only units which are fulfilled by the given type. &lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\CollectionApiResponseUnitEmbedded|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function getUnits($storefront, $limit = 30, $offset = 0, $idOffer = null, $idProduct = null, $ean = null, $embedded = null, $fulfillmentType = null, string $contentType = self::contentTypes['getUnits'][0])
    {
        list($response) = $this->getUnitsWithHttpInfo($storefront, $limit, $offset, $idOffer, $idProduct, $ean, $embedded, $fulfillmentType, $contentType);
        return $response;
    }

    /**
     * Operation getUnitsWithHttpInfo
     *
     * Get a list of your units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int|null $limit Desired size of result set, maximum is 100 (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string|null $idOffer Provided ID of your stock (optional)
     * @param  int|null $idProduct Our internal id_product (optional)
     * @param  string|null $ean EAN, 13 or 14 digits (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitEmbeddedEnum[]|null $embedded (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only units which are fulfilled by the given type. &lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\CollectionApiResponseUnitEmbedded|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUnitsWithHttpInfo($storefront, $limit = 30, $offset = 0, $idOffer = null, $idProduct = null, $ean = null, $embedded = null, $fulfillmentType = null, string $contentType = self::contentTypes['getUnits'][0])
    {
        $request = $this->getUnitsRequest($storefront, $limit, $offset, $idOffer, $idProduct, $ean, $embedded, $fulfillmentType, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\CollectionApiResponseUnitEmbedded' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\CollectionApiResponseUnitEmbedded' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseUnitEmbedded', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseUnitEmbedded';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseUnitEmbedded',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUnitsAsync
     *
     * Get a list of your units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int|null $limit Desired size of result set, maximum is 100 (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string|null $idOffer Provided ID of your stock (optional)
     * @param  int|null $idProduct Our internal id_product (optional)
     * @param  string|null $ean EAN, 13 or 14 digits (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitEmbeddedEnum[]|null $embedded (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only units which are fulfilled by the given type. &lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnitsAsync($storefront, $limit = 30, $offset = 0, $idOffer = null, $idProduct = null, $ean = null, $embedded = null, $fulfillmentType = null, string $contentType = self::contentTypes['getUnits'][0])
    {
        return $this->getUnitsAsyncWithHttpInfo($storefront, $limit, $offset, $idOffer, $idProduct, $ean, $embedded, $fulfillmentType, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUnitsAsyncWithHttpInfo
     *
     * Get a list of your units
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int|null $limit Desired size of result set, maximum is 100 (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string|null $idOffer Provided ID of your stock (optional)
     * @param  int|null $idProduct Our internal id_product (optional)
     * @param  string|null $ean EAN, 13 or 14 digits (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitEmbeddedEnum[]|null $embedded (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only units which are fulfilled by the given type. &lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnitsAsyncWithHttpInfo($storefront, $limit = 30, $offset = 0, $idOffer = null, $idProduct = null, $ean = null, $embedded = null, $fulfillmentType = null, string $contentType = self::contentTypes['getUnits'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\CollectionApiResponseUnitEmbedded';
        $request = $this->getUnitsRequest($storefront, $limit, $offset, $idOffer, $idProduct, $ean, $embedded, $fulfillmentType, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUnits'
     *
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int|null $limit Desired size of result set, maximum is 100 (optional, default to 30)
     * @param  int|null $offset Offset applied to result set (optional, default to 0)
     * @param  string|null $idOffer Provided ID of your stock (optional)
     * @param  int|null $idProduct Our internal id_product (optional)
     * @param  string|null $ean EAN, 13 or 14 digits (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitEmbeddedEnum[]|null $embedded (optional)
     * @param  \OpenAPI\Client\Mirakl\Model\FulfillmentType[]|null $fulfillmentType Get only units which are fulfilled by the given type. &lt;br/&gt; The value &#x60;fulfilled_by_kaufland&#x60; is **DEPRECATED**. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUnitsRequest($storefront, $limit = 30, $offset = 0, $idOffer = null, $idProduct = null, $ean = null, $embedded = null, $fulfillmentType = null, string $contentType = self::contentTypes['getUnits'][0])
    {

        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling getUnits'
            );
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling UnitsApi.getUnits, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling UnitsApi.getUnits, must be bigger than or equal to 0.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling UnitsApi.getUnits, must be bigger than or equal to 0.');
        }
        

        if ($idProduct !== null && $idProduct < 1) {
            throw new \InvalidArgumentException('invalid value for "$idProduct" when calling UnitsApi.getUnits, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/units';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $storefront,
            'storefront', // param base name
            'Storefront', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idOffer,
            'id_offer', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idProduct,
            'id_product', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ean,
            'ean', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $embedded,
            'embedded', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillmentType,
            'fulfillment_type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchUnit
     *
     * Update some of the fields of a unit
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitPatchRequest $unitPatchRequest Update Object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Mirakl\Model\ApiResponseUnit|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse
     */
    public function patchUnit($idUnit, $storefront, $unitPatchRequest, string $contentType = self::contentTypes['patchUnit'][0])
    {
        list($response) = $this->patchUnitWithHttpInfo($idUnit, $storefront, $unitPatchRequest, $contentType);
        return $response;
    }

    /**
     * Operation patchUnitWithHttpInfo
     *
     * Update some of the fields of a unit
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitPatchRequest $unitPatchRequest Update Object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Mirakl\Model\ApiResponseUnit|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse|\OpenAPI\Client\Mirakl\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchUnitWithHttpInfo($idUnit, $storefront, $unitPatchRequest, string $contentType = self::contentTypes['patchUnit'][0])
    {
        $request = $this->patchUnitRequest($idUnit, $storefront, $unitPatchRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Mirakl\Model\ApiResponseUnit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ApiResponseUnit' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ApiResponseUnit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Mirakl\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Mirakl\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseUnit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ApiResponseUnit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Mirakl\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchUnitAsync
     *
     * Update some of the fields of a unit
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitPatchRequest $unitPatchRequest Update Object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchUnitAsync($idUnit, $storefront, $unitPatchRequest, string $contentType = self::contentTypes['patchUnit'][0])
    {
        return $this->patchUnitAsyncWithHttpInfo($idUnit, $storefront, $unitPatchRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchUnitAsyncWithHttpInfo
     *
     * Update some of the fields of a unit
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitPatchRequest $unitPatchRequest Update Object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchUnitAsyncWithHttpInfo($idUnit, $storefront, $unitPatchRequest, string $contentType = self::contentTypes['patchUnit'][0])
    {
        $returnType = '\OpenAPI\Client\Mirakl\Model\ApiResponseUnit';
        $request = $this->patchUnitRequest($idUnit, $storefront, $unitPatchRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchUnit'
     *
     * @param  int $idUnit Internal ID of Unit, unique across all Units (required)
     * @param  \OpenAPI\Client\Mirakl\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \OpenAPI\Client\Mirakl\Model\UnitPatchRequest $unitPatchRequest Update Object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchUnitRequest($idUnit, $storefront, $unitPatchRequest, string $contentType = self::contentTypes['patchUnit'][0])
    {

        // verify the required parameter 'idUnit' is set
        if ($idUnit === null || (is_array($idUnit) && count($idUnit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idUnit when calling patchUnit'
            );
        }
        if ($idUnit < 1) {
            throw new \InvalidArgumentException('invalid value for "$idUnit" when calling UnitsApi.patchUnit, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling patchUnit'
            );
        }

        // verify the required parameter 'unitPatchRequest' is set
        if ($unitPatchRequest === null || (is_array($unitPatchRequest) && count($unitPatchRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unitPatchRequest when calling patchUnit'
            );
        }


        $resourcePath = '/units/{id_unit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $storefront,
            'storefront', // param base name
            'Storefront', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($idUnit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_unit' . '}',
                ObjectSerializer::toPathValue($idUnit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($unitPatchRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($unitPatchRequest));
            } else {
                $httpBody = $unitPatchRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
